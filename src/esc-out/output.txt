
Lex:
0000: 0 + 5 -- (1, 1) -- Identifier -- func2
0001: 5 + 1 -- (1, 6) -- Spaces -- " "
0002: 6 + 1 -- (1, 7) -- Colon -- :
0003: 7 + 1 -- (1, 8) -- Colon -- :
0004: 8 + 1 -- (1, 9) -- Spaces -- " "
0005: 9 + 1 -- (1, 10) -- BraceOpen -- {
0006: 10 + 1 -- (1, 11) -- EndOfLine -- \n
0007: 11 + 4 -- (2, 1) -- Spaces -- "    "
0008: 15 + 4 -- (2, 5) -- Identifier -- cond
0009: 19 + 1 -- (2, 9) -- Spaces -- " "
0010: 20 + 1 -- (2, 10) -- Colon -- :
0011: 21 + 1 -- (2, 11) -- Spaces -- " "
0012: 22 + 4 -- (2, 12) -- Identifier -- bool
0013: 26 + 1 -- (2, 16) -- Spaces -- " "
0014: 27 + 1 -- (2, 17) -- Colon -- :
0015: 28 + 1 -- (2, 18) -- Spaces -- " "
0016: 29 + 1 -- (2, 19) -- LessThan -- <
0017: 30 + 1 -- (2, 20) -- GreaterThan -- >
0018: 31 + 1 -- (2, 21) -- EndOfLine -- \n
0019: 32 + 4 -- (3, 1) -- Spaces -- "    "
0020: 36 + 3 -- (3, 5) -- Identifier -- num
0021: 39 + 1 -- (3, 8) -- Spaces -- " "
0022: 40 + 1 -- (3, 9) -- Colon -- :
0023: 41 + 1 -- (3, 10) -- Spaces -- " "
0024: 42 + 3 -- (3, 11) -- Identifier -- int
0025: 45 + 1 -- (3, 14) -- Spaces -- " "
0026: 46 + 1 -- (3, 15) -- Colon -- :
0027: 47 + 1 -- (3, 16) -- Spaces -- " "
0028: 48 + 1 -- (3, 17) -- LessThan -- <
0029: 49 + 1 -- (3, 18) -- GreaterThan -- >
0030: 50 + 1 -- (3, 19) -- EndOfLine -- \n
0031: 51 + 4 -- (4, 1) -- Spaces -- "    "
0032: 55 + 2 -- (4, 5) -- Identifier -- if
0033: 57 + 1 -- (4, 7) -- Spaces -- " "
0034: 58 + 5 -- (4, 8) -- Identifier -- false
0035: 63 + 1 -- (4, 13) -- Spaces -- " "
0036: 64 + 1 -- (4, 14) -- BraceOpen -- {
0037: 65 + 1 -- (4, 15) -- EndOfLine -- \n
0038: 66 + 8 -- (5, 1) -- Spaces -- "        "
0039: 74 + 6 -- (5, 9) -- Identifier -- return
0040: 80 + 1 -- (5, 15) -- Spaces -- " "
0041: 81 + 1 -- (5, 16) -- Number -- 0
0042: 82 + 1 -- (5, 17) -- EndOfLine -- \n
0043: 83 + 4 -- (6, 1) -- Spaces -- "    "
0044: 87 + 1 -- (6, 5) -- BraceClose -- }
0045: 88 + 1 -- (6, 6) -- EndOfLine -- \n
0046: 89 + 4 -- (7, 1) -- Spaces -- "    "
0047: 93 + 2 -- (7, 5) -- Identifier -- if
0048: 95 + 1 -- (7, 7) -- Spaces -- " "
0049: 96 + 1 -- (7, 8) -- Exclamation -- !
0050: 97 + 4 -- (7, 9) -- Identifier -- cond
0051: 101 + 1 -- (7, 13) -- Spaces -- " "
0052: 102 + 1 -- (7, 14) -- BraceOpen -- {
0053: 103 + 1 -- (7, 15) -- Spaces -- " "
0054: 104 + 6 -- (7, 16) -- Identifier -- return
0055: 110 + 1 -- (7, 22) -- Spaces -- " "
0056: 111 + 3 -- (7, 23) -- Identifier -- num
0057: 114 + 1 -- (7, 26) -- Spaces -- " "
0058: 115 + 1 -- (7, 27) -- BraceClose -- }
0059: 116 + 1 -- (7, 28) -- EndOfLine -- \n
0060: 117 + 4 -- (8, 1) -- Spaces -- "    "
0061: 121 + 6 -- (8, 5) -- Identifier -- return
0062: 127 + 1 -- (8, 11) -- Spaces -- " "
0063: 128 + 4 -- (8, 12) -- Number -- 9999
0064: 132 + 1 -- (8, 16) -- Spaces -- " "
0065: 133 + 14 -- (8, 17) -- Comment -- // unreachable
0066: 147 + 1 -- (8, 31) -- EndOfLine -- \n
0067: 148 + 1 -- (9, 1) -- BraceClose -- }
0068: 149 + 1 -- (9, 2) -- EndOfLine -- \n
0069: 150 + 5 -- (10, 1) -- Identifier -- func1
0070: 155 + 1 -- (10, 6) -- Spaces -- " "
0071: 156 + 1 -- (10, 7) -- Colon -- :
0072: 157 + 1 -- (10, 8) -- Colon -- :
0073: 158 + 1 -- (10, 9) -- Spaces -- " "
0074: 159 + 1 -- (10, 10) -- BraceOpen -- {
0075: 160 + 1 -- (10, 11) -- EndOfLine -- \n
0076: 161 + 4 -- (11, 1) -- Spaces -- "    "
0077: 165 + 1 -- (11, 5) -- Identifier -- a
0078: 166 + 1 -- (11, 6) -- Spaces -- " "
0079: 167 + 1 -- (11, 7) -- Colon -- :
0080: 168 + 1 -- (11, 8) -- Equals -- =
0081: 169 + 1 -- (11, 9) -- Spaces -- " "
0082: 170 + 1 -- (11, 10) -- Number -- 2
0083: 171 + 1 -- (11, 11) -- EndOfLine -- \n
0084: 172 + 4 -- (12, 1) -- Spaces -- "    "
0085: 176 + 1 -- (12, 5) -- Identifier -- b
0086: 177 + 1 -- (12, 6) -- Spaces -- " "
0087: 178 + 1 -- (12, 7) -- Colon -- :
0088: 179 + 1 -- (12, 8) -- Equals -- =
0089: 180 + 1 -- (12, 9) -- Spaces -- " "
0090: 181 + 1 -- (12, 10) -- Identifier -- a
0091: 182 + 1 -- (12, 11) -- Spaces -- " "
0092: 183 + 1 -- (12, 12) -- Plus -- +
0093: 184 + 1 -- (12, 13) -- Spaces -- " "
0094: 185 + 5 -- (12, 14) -- Identifier -- func2
0095: 190 + 1 -- (12, 19) -- Spaces -- " "
0096: 191 + 5 -- (12, 20) -- Identifier -- false
0097: 196 + 1 -- (12, 25) -- Spaces -- " "
0098: 197 + 3 -- (12, 26) -- Number -- 123
0099: 200 + 1 -- (12, 29) -- EndOfLine -- \n
0100: 201 + 4 -- (13, 1) -- Spaces -- "    "
0101: 205 + 6 -- (13, 5) -- Identifier -- return
0102: 211 + 1 -- (13, 11) -- Spaces -- " "
0103: 212 + 1 -- (13, 12) -- Identifier -- b
0104: 213 + 1 -- (13, 13) -- EndOfLine -- \n
0105: 214 + 1 -- (14, 1) -- BraceClose -- }
0106: 215 + 1 -- (14, 2) -- EndOfLine -- \n
0107: 216 + 1 -- (15, 1) -- Identifier -- a
0108: 217 + 1 -- (15, 2) -- Spaces -- " "
0109: 218 + 1 -- (15, 3) -- Colon -- :
0110: 219 + 1 -- (15, 4) -- Equals -- =
0111: 220 + 1 -- (15, 5) -- Spaces -- " "
0112: 221 + 2 -- (15, 6) -- Number -- 13
0113: 223 + 1 -- (15, 8) -- EndOfLine -- \n
0114: 224 + 1 -- (16, 1) -- Identifier -- a
0115: 225 + 1 -- (16, 2) -- Spaces -- " "
0116: 226 + 1 -- (16, 3) -- Equals -- =
0117: 227 + 1 -- (16, 4) -- Spaces -- " "
0118: 228 + 2 -- (16, 5) -- Number -- 39
0119: 230 + 1 -- (16, 7) -- EndOfLine -- \n
0120: 231 + 1 -- (17, 1) -- Identifier -- b
0121: 232 + 1 -- (17, 2) -- Spaces -- " "
0122: 233 + 1 -- (17, 3) -- Colon -- :
0123: 234 + 1 -- (17, 4) -- Equals -- =
0124: 235 + 1 -- (17, 5) -- Spaces -- " "
0125: 236 + 1 -- (17, 6) -- Identifier -- a
0126: 237 + 1 -- (17, 7) -- Spaces -- " "
0127: 238 + 1 -- (17, 8) -- Plus -- +
0128: 239 + 1 -- (17, 9) -- Spaces -- " "
0129: 240 + 5 -- (17, 10) -- Identifier -- func1
0130: 245 + 1 -- (17, 15) -- Spaces -- " "
0131: 246 + 1 -- (17, 16) -- Plus -- +
0132: 247 + 1 -- (17, 17) -- Spaces -- " "
0133: 248 + 1 -- (17, 18) -- Number -- 5
0134: 249 + 1 -- (17, 19) -- EndOfLine -- \n
0135: 250 + 1 -- (18, 1) -- Identifier -- b
0136: 251 + 1 -- (18, 2) -- Spaces -- " "
0137: 252 + 1 -- (18, 3) -- Equals -- =
0138: 253 + 1 -- (18, 4) -- Spaces -- " "
0139: 254 + 1 -- (18, 5) -- Identifier -- b
0140: 255 + 1 -- (18, 6) -- Spaces -- " "
0141: 256 + 1 -- (18, 7) -- Plus -- +
0142: 257 + 1 -- (18, 8) -- Spaces -- " "
0143: 258 + 1 -- (18, 9) -- ParenOpen -- (
0144: 259 + 1 -- (18, 10) -- Minus -- -
0145: 260 + 1 -- (18, 11) -- Number -- 1
0146: 261 + 1 -- (18, 12) -- ParenClose -- )
0147: 262 + 1 -- (18, 13) -- EndOfLine -- \n
0148: 263 + 5 -- (19, 1) -- Identifier -- print
0149: 268 + 1 -- (19, 6) -- Spaces -- " "
0150: 269 + 1 -- (19, 7) -- Identifier -- a
0151: 270 + 1 -- (19, 8) -- EndOfLine -- \n
0152: 271 + 5 -- (20, 1) -- Identifier -- print
0153: 276 + 1 -- (20, 6) -- Spaces -- " "
0154: 277 + 1 -- (20, 7) -- Identifier -- b
0155: 278 + 1 -- (20, 8) -- EndOfLine -- \n
0156: 279 + 6 -- (21, 1) -- Identifier -- format
0157: 285 + 1 -- (21, 7) -- Spaces -- " "
0158: 286 + 1 -- (21, 8) -- Colon -- :
0159: 287 + 1 -- (21, 9) -- Colon -- :
0160: 288 + 1 -- (21, 10) -- Spaces -- " "
0161: 289 + 3 -- (21, 11) -- LiteralString -- "C"
0162: 292 + 1 -- (21, 14) -- EndOfLine -- \n
0163: 293 + 5 -- (22, 1) -- Identifier -- print
0164: 298 + 1 -- (22, 6) -- Spaces -- " "
0165: 299 + 6 -- (22, 7) -- Identifier -- format
0166: 305 + 1 -- (22, 13) -- Period -- .
0167: 306 + 6 -- (22, 14) -- Identifier -- Length
0168: 312 + 1 -- (22, 20) -- EndOfLine -- \n
0169: 313 + 5 -- (23, 1) -- Identifier -- print
0170: 318 + 1 -- (23, 6) -- Spaces -- " "
0171: 319 + 1 -- (23, 7) -- ParenOpen -- (
0172: 320 + 1 -- (23, 8) -- Identifier -- b
0173: 321 + 1 -- (23, 9) -- Period -- .
0174: 322 + 8 -- (23, 10) -- Identifier -- ToString
0175: 330 + 1 -- (23, 18) -- Spaces -- " "
0176: 331 + 6 -- (23, 19) -- Identifier -- format
0177: 337 + 1 -- (23, 25) -- ParenClose -- )
0178: 338 + 1 -- (23, 26) -- Spaces -- " "
0179: 339 + 13 -- (23, 27) -- Comment -- // C=currency
0180: 352 + 1 -- (23, 40) -- EndOfLine -- \n
0181: 353 + 6 -- (24, 1) -- Identifier -- return
0182: 359 + 1 -- (24, 7) -- Spaces -- " "
0183: 360 + 15 -- (24, 8) -- Comment -- // early return
0184: 375 + 1 -- (24, 23) -- EndOfLine -- \n
0185: 376 + 5 -- (25, 1) -- Identifier -- print
0186: 381 + 1 -- (25, 6) -- Spaces -- " "
0187: 382 + 13 -- (25, 7) -- LiteralString -- "unreachable"
0188: 395 + 1 -- (25, 20) -- EndOfLine -- \n
0189: 396 + 0 -- (26, 1) -- EndOfFile -- <EOF>

Parse:
declare-static
  id
    identifier: func2
  value
    braces
      declare-static
        id
          identifier: cond
        type
          identifier: bool
        value
          parameter
      declare-static
        id
          identifier: num
        type
          identifier: int
        value
          parameter
      call
        target
          identifier: if
        arguments
          identifier: false
          braces
            call
              target
                identifier: return
              arguments
                0
      call
        target
          identifier: if
        arguments
          not
            identifier: cond
          braces
            call
              target
                identifier: return
              arguments
                identifier: num
      call
        target
          identifier: return
        arguments
          9999
declare-static
  id
    identifier: func1
  value
    braces
      declare-assign
        id
          identifier: a
        value
          2
      declare-assign
        id
          identifier: b
        value
          plus
            identifier: a
            call
              target
                identifier: func2
              arguments
                identifier: false
                123
      call
        target
          identifier: return
        arguments
          identifier: b
declare-assign
  id
    identifier: a
  value
    13
assign
  identifier: a
  39
declare-assign
  id
    identifier: b
  value
    plus
      plus
        identifier: a
        identifier: func1
      5
assign
  identifier: b
  plus
    identifier: b
    negation
      1
call
  target
    identifier: print
  arguments
    identifier: a
call
  target
    identifier: print
  arguments
    identifier: b
declare-static
  id
    identifier: format
  value
    "C"
call
  target
    identifier: print
  arguments
    member
      identifier: format
      identifier: Length
call
  target
    identifier: print
  arguments
    call
      target
        member
          identifier: b
          identifier: ToString
      arguments
        identifier: format
identifier: return
call
  target
    identifier: print
  arguments
    "unreachable"

Analysis Log:
=== Build: init ===
slot 0001 in 0000 :: File = FileSlotData { Main = 0 }
slot 0002 in 0001 :: Braces = BracesSlotData { Lines = System.Int32[] }
slot 0003 in 0000 :: Type = SomeTypeSlotData { Name = TYPE }
slot 0003 in 0000 <- Type : (0003) = SomeTypeSlotData { Name = TYPE }
slot 0004 in 0000 :: Type = DotnetTypeSlotData { Type = System.Int32 }
slot 0005 in 0000 :: Type = DotnetTypeSlotData { Type = System.Boolean }
slot 0006 in 0000 :: Type = DotnetTypeSlotData { Type = System.String }
slot 0001 in 0000 <- File = FileSlotData { Main = 2 }
slot 0007 in 0002 :: Declare = DeclareSlotData { Name = func2, IsStatic = True, Type = 0, Value = 0 }
slot 0002 in 0001 -> Braces = BracesSlotData { Lines = System.Int32[] }
slot 0008 in 0007 :: Braces = BracesSlotData { Lines = System.Int32[] }
slot 0009 in 0008 :: Declare = DeclareSlotData { Name = cond, IsStatic = True, Type = 0, Value = 0 }
slot 0008 in 0007 -> Braces = BracesSlotData { Lines = System.Int32[] }
slot 0010 in 0009 :: Identifier = IdentifierSlotData { Name = bool, Target = 0 }
slot 0009 in 0008 <- Declare = DeclareSlotData { Name = cond, IsStatic = True, Type = 10, Value = 0 }
slot 0011 in 0009 :: Parameter = ParameterSlotData { }
slot 0009 in 0008 <- Declare = DeclareSlotData { Name = cond, IsStatic = True, Type = 10, Value = 11 }
slot 0012 in 0008 :: Declare = DeclareSlotData { Name = num, IsStatic = True, Type = 0, Value = 0 }
slot 0008 in 0007 -> Braces = BracesSlotData { Lines = System.Int32[] }
slot 0013 in 0012 :: Identifier = IdentifierSlotData { Name = int, Target = 0 }
slot 0012 in 0008 <- Declare = DeclareSlotData { Name = num, IsStatic = True, Type = 13, Value = 0 }
slot 0014 in 0012 :: Parameter = ParameterSlotData { }
slot 0012 in 0008 <- Declare = DeclareSlotData { Name = num, IsStatic = True, Type = 13, Value = 14 }
slot 0015 in 0008 :: Call = CallSlotData { Target = 0, Args = System.Int32[], DotnetMethod =  }
slot 0016 in 0015 :: Identifier = IdentifierSlotData { Name = if, Target = 0 }
slot 0015 in 0008 <- Call = CallSlotData { Target = 16, Args = System.Int32[], DotnetMethod =  }
slot 0017 in 0015 :: Identifier = IdentifierSlotData { Name = false, Target = 0 }
slot 0018 in 0015 :: Braces = BracesSlotData { Lines = System.Int32[] }
slot 0019 in 0018 :: Call = CallSlotData { Target = 0, Args = System.Int32[], DotnetMethod =  }
slot 0020 in 0019 :: Identifier = IdentifierSlotData { Name = return, Target = 0 }
slot 0019 in 0018 <- Call = CallSlotData { Target = 20, Args = System.Int32[], DotnetMethod =  }
slot 0021 in 0019 :: Integer = IntegerSlotData { Value = 0 }
slot 0019 in 0018 <- Call = CallSlotData { Target = 20, Args = System.Int32[], DotnetMethod =  }
slot 0018 in 0015 <- Braces = BracesSlotData { Lines = System.Int32[] }
slot 0015 in 0008 <- Call = CallSlotData { Target = 16, Args = System.Int32[], DotnetMethod =  }
slot 0022 in 0008 :: Call = CallSlotData { Target = 0, Args = System.Int32[], DotnetMethod =  }
slot 0023 in 0022 :: Identifier = IdentifierSlotData { Name = if, Target = 0 }
slot 0022 in 0008 <- Call = CallSlotData { Target = 23, Args = System.Int32[], DotnetMethod =  }
slot 0024 in 0022 :: Identifier = IdentifierSlotData { Name = cond, Target = 0 }
slot 0025 in 0022 :: LogicalNegation = LogicalNegationSlotData { Value = 24 }
slot 0026 in 0022 :: Braces = BracesSlotData { Lines = System.Int32[] }
slot 0027 in 0026 :: Call = CallSlotData { Target = 0, Args = System.Int32[], DotnetMethod =  }
slot 0028 in 0027 :: Identifier = IdentifierSlotData { Name = return, Target = 0 }
slot 0027 in 0026 <- Call = CallSlotData { Target = 28, Args = System.Int32[], DotnetMethod =  }
slot 0029 in 0027 :: Identifier = IdentifierSlotData { Name = num, Target = 0 }
slot 0027 in 0026 <- Call = CallSlotData { Target = 28, Args = System.Int32[], DotnetMethod =  }
slot 0026 in 0022 <- Braces = BracesSlotData { Lines = System.Int32[] }
slot 0022 in 0008 <- Call = CallSlotData { Target = 23, Args = System.Int32[], DotnetMethod =  }
slot 0030 in 0008 :: Call = CallSlotData { Target = 0, Args = System.Int32[], DotnetMethod =  }
slot 0031 in 0030 :: Identifier = IdentifierSlotData { Name = return, Target = 0 }
slot 0030 in 0008 <- Call = CallSlotData { Target = 31, Args = System.Int32[], DotnetMethod =  }
slot 0032 in 0030 :: Integer = IntegerSlotData { Value = 9999 }
slot 0030 in 0008 <- Call = CallSlotData { Target = 31, Args = System.Int32[], DotnetMethod =  }
slot 0008 in 0007 <- Braces = BracesSlotData { Lines = System.Int32[] }
slot 0007 in 0002 <- Declare = DeclareSlotData { Name = func2, IsStatic = True, Type = 0, Value = 8 }
slot 0033 in 0002 :: Declare = DeclareSlotData { Name = func1, IsStatic = True, Type = 0, Value = 0 }
slot 0002 in 0001 -> Braces = BracesSlotData { Lines = System.Int32[] }
slot 0034 in 0033 :: Braces = BracesSlotData { Lines = System.Int32[] }
slot 0035 in 0034 :: Declare = DeclareSlotData { Name = a, IsStatic = False, Type = 0, Value = 0 }
slot 0034 in 0033 -> Braces = BracesSlotData { Lines = System.Int32[] }
slot 0036 in 0035 :: Integer = IntegerSlotData { Value = 2 }
slot 0035 in 0034 <- Declare = DeclareSlotData { Name = a, IsStatic = False, Type = 0, Value = 36 }
slot 0037 in 0034 :: Declare = DeclareSlotData { Name = b, IsStatic = False, Type = 0, Value = 0 }
slot 0034 in 0033 -> Braces = BracesSlotData { Lines = System.Int32[] }
slot 0038 in 0037 :: Add = AddSlotData { Left = 0, Right = 0 }
slot 0039 in 0038 :: Identifier = IdentifierSlotData { Name = a, Target = 0 }
slot 0040 in 0038 :: Call = CallSlotData { Target = 0, Args = System.Int32[], DotnetMethod =  }
slot 0041 in 0040 :: Identifier = IdentifierSlotData { Name = func2, Target = 0 }
slot 0040 in 0038 <- Call = CallSlotData { Target = 41, Args = System.Int32[], DotnetMethod =  }
slot 0042 in 0040 :: Identifier = IdentifierSlotData { Name = false, Target = 0 }
slot 0043 in 0040 :: Integer = IntegerSlotData { Value = 123 }
slot 0040 in 0038 <- Call = CallSlotData { Target = 41, Args = System.Int32[], DotnetMethod =  }
slot 0038 in 0037 <- Add = AddSlotData { Left = 39, Right = 40 }
slot 0037 in 0034 <- Declare = DeclareSlotData { Name = b, IsStatic = False, Type = 0, Value = 38 }
slot 0044 in 0034 :: Call = CallSlotData { Target = 0, Args = System.Int32[], DotnetMethod =  }
slot 0045 in 0044 :: Identifier = IdentifierSlotData { Name = return, Target = 0 }
slot 0044 in 0034 <- Call = CallSlotData { Target = 45, Args = System.Int32[], DotnetMethod =  }
slot 0046 in 0044 :: Identifier = IdentifierSlotData { Name = b, Target = 0 }
slot 0044 in 0034 <- Call = CallSlotData { Target = 45, Args = System.Int32[], DotnetMethod =  }
slot 0034 in 0033 <- Braces = BracesSlotData { Lines = System.Int32[] }
slot 0033 in 0002 <- Declare = DeclareSlotData { Name = func1, IsStatic = True, Type = 0, Value = 34 }
slot 0047 in 0002 :: Declare = DeclareSlotData { Name = a, IsStatic = False, Type = 0, Value = 0 }
slot 0002 in 0001 -> Braces = BracesSlotData { Lines = System.Int32[] }
slot 0048 in 0047 :: Integer = IntegerSlotData { Value = 13 }
slot 0047 in 0002 <- Declare = DeclareSlotData { Name = a, IsStatic = False, Type = 0, Value = 48 }
slot 0049 in 0002 :: Assign = AssignSlotData { Target = 0, Value = 0 }
slot 0050 in 0049 :: Identifier = IdentifierSlotData { Name = a, Target = 0 }
slot 0049 in 0002 <- Assign = AssignSlotData { Target = 50, Value = 0 }
slot 0051 in 0049 :: Integer = IntegerSlotData { Value = 39 }
slot 0049 in 0002 <- Assign = AssignSlotData { Target = 50, Value = 51 }
slot 0052 in 0002 :: Declare = DeclareSlotData { Name = b, IsStatic = False, Type = 0, Value = 0 }
slot 0002 in 0001 -> Braces = BracesSlotData { Lines = System.Int32[] }
slot 0053 in 0052 :: Add = AddSlotData { Left = 0, Right = 0 }
slot 0054 in 0053 :: Add = AddSlotData { Left = 0, Right = 0 }
slot 0055 in 0054 :: Identifier = IdentifierSlotData { Name = a, Target = 0 }
slot 0056 in 0054 :: Identifier = IdentifierSlotData { Name = func1, Target = 0 }
slot 0054 in 0053 <- Add = AddSlotData { Left = 55, Right = 56 }
slot 0057 in 0053 :: Integer = IntegerSlotData { Value = 5 }
slot 0053 in 0052 <- Add = AddSlotData { Left = 54, Right = 57 }
slot 0052 in 0002 <- Declare = DeclareSlotData { Name = b, IsStatic = False, Type = 0, Value = 53 }
slot 0058 in 0002 :: Assign = AssignSlotData { Target = 0, Value = 0 }
slot 0059 in 0058 :: Identifier = IdentifierSlotData { Name = b, Target = 0 }
slot 0058 in 0002 <- Assign = AssignSlotData { Target = 59, Value = 0 }
slot 0060 in 0058 :: Add = AddSlotData { Left = 0, Right = 0 }
slot 0061 in 0060 :: Identifier = IdentifierSlotData { Name = b, Target = 0 }
slot 0062 in 0060 :: Integer = IntegerSlotData { Value = 1 }
slot 0063 in 0060 :: Negation = NegationSlotData { Value = 62 }
slot 0060 in 0058 <- Add = AddSlotData { Left = 61, Right = 63 }
slot 0058 in 0002 <- Assign = AssignSlotData { Target = 59, Value = 60 }
slot 0064 in 0002 :: Call = CallSlotData { Target = 0, Args = System.Int32[], DotnetMethod =  }
slot 0065 in 0064 :: Identifier = IdentifierSlotData { Name = print, Target = 0 }
slot 0064 in 0002 <- Call = CallSlotData { Target = 65, Args = System.Int32[], DotnetMethod =  }
slot 0066 in 0064 :: Identifier = IdentifierSlotData { Name = a, Target = 0 }
slot 0064 in 0002 <- Call = CallSlotData { Target = 65, Args = System.Int32[], DotnetMethod =  }
slot 0067 in 0002 :: Call = CallSlotData { Target = 0, Args = System.Int32[], DotnetMethod =  }
slot 0068 in 0067 :: Identifier = IdentifierSlotData { Name = print, Target = 0 }
slot 0067 in 0002 <- Call = CallSlotData { Target = 68, Args = System.Int32[], DotnetMethod =  }
slot 0069 in 0067 :: Identifier = IdentifierSlotData { Name = b, Target = 0 }
slot 0067 in 0002 <- Call = CallSlotData { Target = 68, Args = System.Int32[], DotnetMethod =  }
slot 0070 in 0002 :: Declare = DeclareSlotData { Name = format, IsStatic = True, Type = 0, Value = 0 }
slot 0002 in 0001 -> Braces = BracesSlotData { Lines = System.Int32[] }
slot 0071 in 0070 :: String = StringSlotData { Value = C }
slot 0070 in 0002 <- Declare = DeclareSlotData { Name = format, IsStatic = True, Type = 0, Value = 71 }
slot 0072 in 0002 :: Call = CallSlotData { Target = 0, Args = System.Int32[], DotnetMethod =  }
slot 0073 in 0072 :: Identifier = IdentifierSlotData { Name = print, Target = 0 }
slot 0072 in 0002 <- Call = CallSlotData { Target = 73, Args = System.Int32[], DotnetMethod =  }
slot 0074 in 0072 :: Member = MemberSlotData { Target = 0, Member = 0 }
slot 0075 in 0074 :: Identifier = IdentifierSlotData { Name = format, Target = 0 }
slot 0074 in 0072 <- Member = MemberSlotData { Target = 75, Member = 0 }
slot 0076 in 0074 :: Identifier = IdentifierSlotData { Name = Length, Target = 0 }
slot 0074 in 0072 <- Member = MemberSlotData { Target = 75, Member = 76 }
slot 0072 in 0002 <- Call = CallSlotData { Target = 73, Args = System.Int32[], DotnetMethod =  }
slot 0077 in 0002 :: Call = CallSlotData { Target = 0, Args = System.Int32[], DotnetMethod =  }
slot 0078 in 0077 :: Identifier = IdentifierSlotData { Name = print, Target = 0 }
slot 0077 in 0002 <- Call = CallSlotData { Target = 78, Args = System.Int32[], DotnetMethod =  }
slot 0079 in 0077 :: Call = CallSlotData { Target = 0, Args = System.Int32[], DotnetMethod =  }
slot 0080 in 0079 :: Member = MemberSlotData { Target = 0, Member = 0 }
slot 0081 in 0080 :: Identifier = IdentifierSlotData { Name = b, Target = 0 }
slot 0080 in 0079 <- Member = MemberSlotData { Target = 81, Member = 0 }
slot 0082 in 0080 :: Identifier = IdentifierSlotData { Name = ToString, Target = 0 }
slot 0080 in 0079 <- Member = MemberSlotData { Target = 81, Member = 82 }
slot 0079 in 0077 <- Call = CallSlotData { Target = 80, Args = System.Int32[], DotnetMethod =  }
slot 0083 in 0079 :: Identifier = IdentifierSlotData { Name = format, Target = 0 }
slot 0079 in 0077 <- Call = CallSlotData { Target = 80, Args = System.Int32[], DotnetMethod =  }
slot 0077 in 0002 <- Call = CallSlotData { Target = 78, Args = System.Int32[], DotnetMethod =  }
slot 0084 in 0002 :: Identifier = IdentifierSlotData { Name = return, Target = 0 }
slot 0085 in 0002 :: Call = CallSlotData { Target = 0, Args = System.Int32[], DotnetMethod =  }
slot 0086 in 0085 :: Identifier = IdentifierSlotData { Name = print, Target = 0 }
slot 0085 in 0002 <- Call = CallSlotData { Target = 86, Args = System.Int32[], DotnetMethod =  }
slot 0087 in 0085 :: String = StringSlotData { Value = unreachable }
slot 0085 in 0002 <- Call = CallSlotData { Target = 86, Args = System.Int32[], DotnetMethod =  }
slot 0002 in 0001 <- Braces = BracesSlotData { Lines = System.Int32[] }
=== Build: return ===
slot 0088 in 0000 :: Type = DotnetTypeSlotData { Type = System.Void }
slot 0002 in 0001 <- Braces : (0088) = BracesSlotData { Lines = System.Int32[] }
slot 0008 in 0007 <- Braces : (0088) = BracesSlotData { Lines = System.Int32[] }
slot 0018 in 0015 <- Braces : (0088) = BracesSlotData { Lines = System.Int32[] }
slot 0020 in 0019 -> Identifier = IdentifierSlotData { Name = return, Target = 0 }
slot 0019 in 0018 << Return = ReturnSlotData { Value = 21, Function = 0 }
slot 0020 in 0019 << Unknown = InvalidSlotData { }
slot 0019 in 0018 -- call -> return
slot 0026 in 0022 <- Braces : (0088) = BracesSlotData { Lines = System.Int32[] }
slot 0028 in 0027 -> Identifier = IdentifierSlotData { Name = return, Target = 0 }
slot 0027 in 0026 << Return = ReturnSlotData { Value = 29, Function = 0 }
slot 0028 in 0027 << Unknown = InvalidSlotData { }
slot 0027 in 0026 -- call -> return
slot 0031 in 0030 -> Identifier = IdentifierSlotData { Name = return, Target = 0 }
slot 0030 in 0008 << Return = ReturnSlotData { Value = 32, Function = 0 }
slot 0031 in 0030 << Unknown = InvalidSlotData { }
slot 0030 in 0008 -- call -> return
slot 0034 in 0033 <- Braces : (0088) = BracesSlotData { Lines = System.Int32[] }
slot 0045 in 0044 -> Identifier = IdentifierSlotData { Name = return, Target = 0 }
slot 0044 in 0034 << Return = ReturnSlotData { Value = 46, Function = 0 }
slot 0045 in 0044 << Unknown = InvalidSlotData { }
slot 0044 in 0034 -- call -> return
slot 0065 in 0064 -> Identifier = IdentifierSlotData { Name = print, Target = 0 }
slot 0068 in 0067 -> Identifier = IdentifierSlotData { Name = print, Target = 0 }
slot 0073 in 0072 -> Identifier = IdentifierSlotData { Name = print, Target = 0 }
slot 0078 in 0077 -> Identifier = IdentifierSlotData { Name = print, Target = 0 }
slot 0080 in 0079 -> Member = MemberSlotData { Target = 81, Member = 82 }
slot 0089 in 0084 :: Void = VoidSlotData { }
slot 0089 in 0084 <- Void : (0088) = VoidSlotData { }
slot 0084 in 0002 << Return = ReturnSlotData { Value = 89, Function = 0 }
slot 0084 in 0002 <- Return : (0088) = ReturnSlotData { Value = 89, Function = 0 }
slot 0086 in 0085 -> Identifier = IdentifierSlotData { Name = print, Target = 0 }
slot 0019 <- returns to 0018
slot 0019 in 0018 <- Return = ReturnSlotData { Value = 21, Function = 18 }
slot 0018 in 0015 <- Braces : (0000) = BracesSlotData { Lines = System.Int32[] }
slot 0027 <- returns to 0026
slot 0027 in 0026 <- Return = ReturnSlotData { Value = 29, Function = 26 }
slot 0026 in 0022 <- Braces : (0000) = BracesSlotData { Lines = System.Int32[] }
slot 0030 <- returns to 0008
slot 0030 in 0008 <- Return = ReturnSlotData { Value = 32, Function = 8 }
slot 0008 in 0007 <- Braces : (0000) = BracesSlotData { Lines = System.Int32[] }
slot 0044 <- returns to 0034
slot 0044 in 0034 <- Return = ReturnSlotData { Value = 46, Function = 34 }
slot 0034 in 0033 <- Braces : (0000) = BracesSlotData { Lines = System.Int32[] }
slot 0084 <- returns to 0002
slot 0084 in 0002 <- Return = ReturnSlotData { Value = 89, Function = 2 }
slot 0002 in 0001 <- Braces : (0000) = BracesSlotData { Lines = System.Int32[] }
=== Build: resolve identifiers ===
identifier: 0010 = IdentifierSlotData { Name = bool, Target = 0 }
  0009 = Declare
      0007 = Declare
        0002 FOUND: BracesSlotData { Lines = System.Int32[] } = 5
slot 0010 in 0009 <- Identifier = IdentifierSlotData { Name = bool, Target = 5 }
identifier: 0013 = IdentifierSlotData { Name = int, Target = 0 }
  0012 = Declare
      0007 = Declare
        0002 FOUND: BracesSlotData { Lines = System.Int32[] } = 4
slot 0013 in 0012 <- Identifier = IdentifierSlotData { Name = int, Target = 4 }
identifier: 0016 = IdentifierSlotData { Name = if, Target = 0 }
  0015 = Call
      0007 = Declare
          0001 = File
slot 0015 in 0008 << If = IfSlotData { Condition = 17, Body = 18 }
slot 0016 in 0015 << Unknown = InvalidSlotData { }
identifier: 0017 = IdentifierSlotData { Name = false, Target = 0 }
  0015 = If
      0007 = Declare
          0001 = File
slot 0017 in 0015 << Boolean = BooleanSlotData { Value = False }
slot 0017 in 0015 <- Boolean : (0005) = BooleanSlotData { Value = False }
identifier: 0023 = IdentifierSlotData { Name = if, Target = 0 }
  0022 = Call
      0007 = Declare
          0001 = File
slot 0022 in 0008 << If = IfSlotData { Condition = 25, Body = 26 }
slot 0023 in 0022 << Unknown = InvalidSlotData { }
identifier: 0024 = IdentifierSlotData { Name = cond, Target = 0 }
  0022 = If
    0008 FOUND: BracesSlotData { Lines = System.Int32[] } = 9
slot 0024 in 0022 <- Identifier = IdentifierSlotData { Name = cond, Target = 9 }
identifier: 0029 = IdentifierSlotData { Name = num, Target = 0 }
  0027 = Return
      0022 = If
        0008 FOUND: BracesSlotData { Lines = System.Int32[] } = 12
slot 0029 in 0027 <- Identifier = IdentifierSlotData { Name = num, Target = 12 }
identifier: 0039 = IdentifierSlotData { Name = a, Target = 0 }
  0038 = Add
    0037 = Declare
      0034 FOUND: BracesSlotData { Lines = System.Int32[] } = 35
slot 0039 in 0038 <- Identifier = IdentifierSlotData { Name = a, Target = 35 }
identifier: 0041 = IdentifierSlotData { Name = func2, Target = 0 }
  0040 = Call
    0038 = Add
      0037 = Declare
          0033 = Declare
            0002 FOUND: BracesSlotData { Lines = System.Int32[] } = 7
slot 0041 in 0040 <- Identifier = IdentifierSlotData { Name = func2, Target = 7 }
identifier: 0042 = IdentifierSlotData { Name = false, Target = 0 }
  0040 = Call
    0038 = Add
      0037 = Declare
          0033 = Declare
              0001 = File
slot 0042 in 0040 << Boolean = BooleanSlotData { Value = False }
slot 0042 in 0040 <- Boolean : (0005) = BooleanSlotData { Value = False }
identifier: 0046 = IdentifierSlotData { Name = b, Target = 0 }
  0044 = Return
    0034 FOUND: BracesSlotData { Lines = System.Int32[] } = 37
slot 0046 in 0044 <- Identifier = IdentifierSlotData { Name = b, Target = 37 }
identifier: 0050 = IdentifierSlotData { Name = a, Target = 0 }
  0049 = Assign
    0002 FOUND: BracesSlotData { Lines = System.Int32[] } = 47
slot 0050 in 0049 <- Identifier = IdentifierSlotData { Name = a, Target = 47 }
identifier: 0055 = IdentifierSlotData { Name = a, Target = 0 }
  0054 = Add
    0053 = Add
      0052 = Declare
        0002 FOUND: BracesSlotData { Lines = System.Int32[] } = 47
slot 0055 in 0054 <- Identifier = IdentifierSlotData { Name = a, Target = 47 }
identifier: 0056 = IdentifierSlotData { Name = func1, Target = 0 }
  0054 = Add
    0053 = Add
      0052 = Declare
        0002 FOUND: BracesSlotData { Lines = System.Int32[] } = 33
slot 0056 in 0054 <- Identifier = IdentifierSlotData { Name = func1, Target = 33 }
identifier: 0059 = IdentifierSlotData { Name = b, Target = 0 }
  0058 = Assign
    0002 FOUND: BracesSlotData { Lines = System.Int32[] } = 52
slot 0059 in 0058 <- Identifier = IdentifierSlotData { Name = b, Target = 52 }
identifier: 0061 = IdentifierSlotData { Name = b, Target = 0 }
  0060 = Add
    0058 = Assign
      0002 FOUND: BracesSlotData { Lines = System.Int32[] } = 52
slot 0061 in 0060 <- Identifier = IdentifierSlotData { Name = b, Target = 52 }
identifier: 0065 = IdentifierSlotData { Name = print, Target = 0 }
  0064 = Call
      0001 = File
slot 0065 in 0064 << Intrinsic = IntrinsicSlotData { Name = print }
slot 0090 in 0000 :: Type = FuncTypeSlotData { ReturnType = 6 }
slot 0065 in 0064 <- Intrinsic : (0090) = IntrinsicSlotData { Name = print }
identifier: 0066 = IdentifierSlotData { Name = a, Target = 0 }
  0064 = Call
    0002 FOUND: BracesSlotData { Lines = System.Int32[] } = 47
slot 0066 in 0064 <- Identifier = IdentifierSlotData { Name = a, Target = 47 }
identifier: 0068 = IdentifierSlotData { Name = print, Target = 0 }
  0067 = Call
      0001 = File
slot 0068 in 0067 << Intrinsic = IntrinsicSlotData { Name = print }
slot 0068 in 0067 <- Intrinsic : (0090) = IntrinsicSlotData { Name = print }
identifier: 0069 = IdentifierSlotData { Name = b, Target = 0 }
  0067 = Call
    0002 FOUND: BracesSlotData { Lines = System.Int32[] } = 52
slot 0069 in 0067 <- Identifier = IdentifierSlotData { Name = b, Target = 52 }
identifier: 0073 = IdentifierSlotData { Name = print, Target = 0 }
  0072 = Call
      0001 = File
slot 0073 in 0072 << Intrinsic = IntrinsicSlotData { Name = print }
slot 0073 in 0072 <- Intrinsic : (0090) = IntrinsicSlotData { Name = print }
identifier: 0075 = IdentifierSlotData { Name = format, Target = 0 }
  0074 = Member
    0072 = Call
      0002 FOUND: BracesSlotData { Lines = System.Int32[] } = 70
slot 0075 in 0074 <- Identifier = IdentifierSlotData { Name = format, Target = 70 }
identifier: 0076 = IdentifierSlotData { Name = Length, Target = 0 }
  0074 = Member
    0072 = Call
        0001 = File
          0000 = ROOT
identifier: 0078 = IdentifierSlotData { Name = print, Target = 0 }
  0077 = Call
      0001 = File
slot 0078 in 0077 << Intrinsic = IntrinsicSlotData { Name = print }
slot 0078 in 0077 <- Intrinsic : (0090) = IntrinsicSlotData { Name = print }
identifier: 0081 = IdentifierSlotData { Name = b, Target = 0 }
  0080 = Member
    0079 = Call
      0077 = Call
        0002 FOUND: BracesSlotData { Lines = System.Int32[] } = 52
slot 0081 in 0080 <- Identifier = IdentifierSlotData { Name = b, Target = 52 }
identifier: 0082 = IdentifierSlotData { Name = ToString, Target = 0 }
  0080 = Member
    0079 = Call
      0077 = Call
          0001 = File
            0000 = ROOT
identifier: 0083 = IdentifierSlotData { Name = format, Target = 0 }
  0079 = Call
    0077 = Call
      0002 FOUND: BracesSlotData { Lines = System.Int32[] } = 70
slot 0083 in 0079 <- Identifier = IdentifierSlotData { Name = format, Target = 70 }
identifier: 0086 = IdentifierSlotData { Name = print, Target = 0 }
  0085 = Call
      0001 = File
slot 0086 in 0085 << Intrinsic = IntrinsicSlotData { Name = print }
slot 0086 in 0085 <- Intrinsic : (0090) = IntrinsicSlotData { Name = print }
=== Build: types ===
slot 0003 in 0000 <- Type : (0003) = SomeTypeSlotData { Name = TYPE }
enqueue 0003
slot 0004 in 0000 <- Type : (0003) = DotnetTypeSlotData { Type = System.Int32 }
enqueue 0004
slot 0005 in 0000 <- Type : (0003) = DotnetTypeSlotData { Type = System.Boolean }
enqueue 0005
slot 0006 in 0000 <- Type : (0003) = DotnetTypeSlotData { Type = System.String }
enqueue 0006
slot 0011 in 0009 <- Parameter : (0000) = ParameterSlotData { }
enqueue 0011
slot 0014 in 0012 <- Parameter : (0000) = ParameterSlotData { }
enqueue 0014
slot 0021 in 0019 <- Integer : (0004) = IntegerSlotData { Value = 0 }
enqueue 0021
slot 0032 in 0030 <- Integer : (0004) = IntegerSlotData { Value = 9999 }
enqueue 0032
slot 0036 in 0035 <- Integer : (0004) = IntegerSlotData { Value = 2 }
enqueue 0036
slot 0043 in 0040 <- Integer : (0004) = IntegerSlotData { Value = 123 }
enqueue 0043
slot 0048 in 0047 <- Integer : (0004) = IntegerSlotData { Value = 13 }
enqueue 0048
slot 0051 in 0049 <- Integer : (0004) = IntegerSlotData { Value = 39 }
enqueue 0051
slot 0057 in 0053 <- Integer : (0004) = IntegerSlotData { Value = 5 }
enqueue 0057
slot 0062 in 0060 <- Integer : (0004) = IntegerSlotData { Value = 1 }
enqueue 0062
enqueue 0065
intrinsic: 0065 = Slot { Parent = 64, CodeType = Intrinsic, Data = IntrinsicSlotData { Name = print }, TypeSlot = 90 }
enqueue 0068
intrinsic: 0068 = Slot { Parent = 67, CodeType = Intrinsic, Data = IntrinsicSlotData { Name = print }, TypeSlot = 90 }
slot 0071 in 0070 <- String : (0006) = StringSlotData { Value = C }
enqueue 0071
enqueue 0073
intrinsic: 0073 = Slot { Parent = 72, CodeType = Intrinsic, Data = IntrinsicSlotData { Name = print }, TypeSlot = 90 }
enqueue 0078
intrinsic: 0078 = Slot { Parent = 77, CodeType = Intrinsic, Data = IntrinsicSlotData { Name = print }, TypeSlot = 90 }
enqueue 0086
intrinsic: 0086 = Slot { Parent = 85, CodeType = Intrinsic, Data = IntrinsicSlotData { Name = print }, TypeSlot = 90 }
slot 0087 in 0085 <- String : (0006) = StringSlotData { Value = unreachable }
enqueue 0087
slot 0088 in 0000 <- Type : (0003) = DotnetTypeSlotData { Type = System.Void }
enqueue 0088
enqueue 0089
slot 0090 in 0000 <- Type : (0003) = FuncTypeSlotData { ReturnType = 6 }
enqueue 0090
dequeue: 0003
dequeue: 0004
slot 0013 in 0012 <- Identifier : (0003) = IdentifierSlotData { Name = int, Target = 4 }
dequeue: 0005
slot 0010 in 0009 <- Identifier : (0003) = IdentifierSlotData { Name = bool, Target = 5 }
dequeue: 0006
dequeue: 0011
dequeue: 0014
dequeue: 0021
slot 0019 return: type <- 0004 via 0021
slot 0019 in 0018 <- Return : (0004) = ReturnSlotData { Value = 21, Function = 18 }
dequeue: 0032
slot 0030 return: type <- 0004 via 0032
slot 0030 in 0008 <- Return : (0004) = ReturnSlotData { Value = 32, Function = 8 }
dequeue: 0036
slot 0035 in 0034 <- Declare : (0004) = DeclareSlotData { Name = a, IsStatic = False, Type = 0, Value = 36 }
slot 0035 declare: NEW TYPE <- 4
dequeue: 0043
dequeue: 0048
slot 0047 in 0002 <- Declare : (0004) = DeclareSlotData { Name = a, IsStatic = False, Type = 0, Value = 48 }
slot 0047 declare: NEW TYPE <- 4
dequeue: 0051
slot 0049 assign: type <- Slot { Parent = 0, CodeType = Type, Data = DotnetTypeSlotData { Type = System.Int32 }, TypeSlot = 3 } 0004 via 0051
slot 0049 in 0002 <- Assign : (0004) = AssignSlotData { Target = 50, Value = 51 }
dequeue: 0057
dequeue: 0062
slot 0063 negation: type <- Slot { Parent = 0, CodeType = Type, Data = DotnetTypeSlotData { Type = System.Int32 }, TypeSlot = 3 } 0004 via 0062
slot 0063 in 0060 <- Negation : (0004) = NegationSlotData { Value = 62 }
dequeue: 0065
dequeue: 0068
dequeue: 0071
slot 0070 in 0002 <- Declare : (0006) = DeclareSlotData { Name = format, IsStatic = True, Type = 0, Value = 71 }
slot 0070 declare: NEW TYPE <- 6
dequeue: 0073
dequeue: 0078
dequeue: 0086
slot 0085 in 0002 <- Call : (0006) = CallSlotData { Target = 86, Args = System.Int32[], DotnetMethod =  }
dequeue: 0087
dequeue: 0088
dequeue: 0089
dequeue: 0090
dequeue: 0013
slot 0012 in 0008 <- Declare : (0004) = DeclareSlotData { Name = num, IsStatic = True, Type = 13, Value = 14 }
dequeue: 0010
slot 0009 in 0008 <- Declare : (0005) = DeclareSlotData { Name = cond, IsStatic = True, Type = 10, Value = 11 }
dequeue: 0019
slot 0091 in 0000 :: Type = FuncTypeSlotData { ReturnType = 4 }
slot 0018 braces: found return 0019 (0091)
slot 0018 in 0015 <- Braces : (0091) = BracesSlotData { Lines = System.Int32[] }
dequeue: 0030
slot 0008 braces: found return 0030 (0091)
slot 0008 in 0007 <- Braces : (0091) = BracesSlotData { Lines = System.Int32[] }
dequeue: 0035
slot 0039 in 0038 <- Identifier : (0004) = IdentifierSlotData { Name = a, Target = 35 }
dequeue: 0047
slot 0050 in 0049 <- Identifier : (0004) = IdentifierSlotData { Name = a, Target = 47 }
slot 0055 in 0054 <- Identifier : (0004) = IdentifierSlotData { Name = a, Target = 47 }
slot 0066 in 0064 <- Identifier : (0004) = IdentifierSlotData { Name = a, Target = 47 }
dequeue: 0049
dequeue: 0063
dequeue: 0070
slot 0075 in 0074 <- Identifier : (0006) = IdentifierSlotData { Name = format, Target = 70 }
slot 0083 in 0079 <- Identifier : (0006) = IdentifierSlotData { Name = format, Target = 70 }
dequeue: 0085
dequeue: 0012
slot 0029 in 0027 <- Identifier : (0004) = IdentifierSlotData { Name = num, Target = 12 }
dequeue: 0009
slot 0024 in 0022 <- Identifier : (0005) = IdentifierSlotData { Name = cond, Target = 9 }
dequeue: 0018
slot 0015 if: type <- 0091 via 0017
slot 0015 in 0008 <- If : (0091) = IfSlotData { Condition = 17, Body = 18 }
dequeue: 0008
slot 0007 in 0002 <- Declare : (0091) = DeclareSlotData { Name = func2, IsStatic = True, Type = 0, Value = 8 }
slot 0007 declare: NEW TYPE <- 91
dequeue: 0039
dequeue: 0050
dequeue: 0055
dequeue: 0066
slot 0064 in 0002 <- Call : (0006) = CallSlotData { Target = 65, Args = System.Int32[], DotnetMethod =  }
dequeue: 0075
slot 0092 in 0000 :: Type = DotnetMemberTypeSlotData { TargetType = 6, MemberName = Length, MemberType = Property, Members = System.Reflection.MemberInfo[] }
slot 0074 in 0072 <- Member : (0092) = MemberSlotData { Target = 75, Member = 76 }
slot 0076 in 0074 <- Identifier : (0092) = IdentifierSlotData { Name = Length, Target = 0 }
dequeue: 0083
dequeue: 0029
slot 0027 return: type <- 0004 via 0029
slot 0027 in 0026 <- Return : (0004) = ReturnSlotData { Value = 29, Function = 26 }
dequeue: 0024
slot 0025 not: type <- Slot { Parent = 0, CodeType = Type, Data = DotnetTypeSlotData { Type = System.Boolean }, TypeSlot = 3 } 0005 via 0024
slot 0025 in 0022 <- LogicalNegation : (0005) = LogicalNegationSlotData { Value = 24 }
dequeue: 0015
dequeue: 0007
slot 0041 in 0040 <- Identifier : (0091) = IdentifierSlotData { Name = func2, Target = 7 }
dequeue: 0064
dequeue: 0074
slot 0072 in 0002 <- Call : (0006) = CallSlotData { Target = 73, Args = System.Int32[], DotnetMethod =  }
dequeue: 0076
dequeue: 0027
slot 0026 braces: found return 0027 (0091)
slot 0026 in 0022 <- Braces : (0091) = BracesSlotData { Lines = System.Int32[] }
dequeue: 0025
slot 0022 if: type <- 0005 via 0025
slot 0022 in 0008 <- If : (0005) = IfSlotData { Condition = 25, Body = 26 }
dequeue: 0041
slot 0040 in 0038 <- Call : (0004) = CallSlotData { Target = 41, Args = System.Int32[], DotnetMethod =  }
dequeue: 0072
dequeue: 0026
dequeue: 0022
dequeue: 0040
slot 0038 in 0037 <- Add : (0004) = AddSlotData { Left = 39, Right = 40 }
dequeue: 0038
slot 0037 in 0034 <- Declare : (0004) = DeclareSlotData { Name = b, IsStatic = False, Type = 0, Value = 38 }
slot 0037 declare: NEW TYPE <- 4
dequeue: 0037
slot 0046 in 0044 <- Identifier : (0004) = IdentifierSlotData { Name = b, Target = 37 }
dequeue: 0046
slot 0044 return: type <- 0004 via 0046
slot 0044 in 0034 <- Return : (0004) = ReturnSlotData { Value = 46, Function = 34 }
dequeue: 0044
slot 0034 braces: found return 0044 (0091)
slot 0034 in 0033 <- Braces : (0091) = BracesSlotData { Lines = System.Int32[] }
dequeue: 0034
slot 0033 in 0002 <- Declare : (0091) = DeclareSlotData { Name = func1, IsStatic = True, Type = 0, Value = 34 }
slot 0033 declare: NEW TYPE <- 91
dequeue: 0033
slot 0093 in 0056 :: Identifier = IdentifierSlotData { Name = func1, Target = 33 }
slot 0093 in 0056 <- Identifier : (0091) = IdentifierSlotData { Name = func1, Target = 33 }
slot 0056 in 0054 << Call = CallSlotData { Target = 93, Args = System.Int32[], DotnetMethod =  }
dequeue: 0093
slot 0056 in 0054 <- Call : (0004) = CallSlotData { Target = 93, Args = System.Int32[], DotnetMethod =  }
dequeue: 0056
slot 0054 in 0053 <- Add : (0004) = AddSlotData { Left = 55, Right = 56 }
dequeue: 0056
dequeue: 0054
slot 0053 in 0052 <- Add : (0004) = AddSlotData { Left = 54, Right = 57 }
dequeue: 0053
slot 0052 in 0002 <- Declare : (0004) = DeclareSlotData { Name = b, IsStatic = False, Type = 0, Value = 53 }
slot 0052 declare: NEW TYPE <- 4
dequeue: 0052
slot 0059 in 0058 <- Identifier : (0004) = IdentifierSlotData { Name = b, Target = 52 }
slot 0061 in 0060 <- Identifier : (0004) = IdentifierSlotData { Name = b, Target = 52 }
slot 0069 in 0067 <- Identifier : (0004) = IdentifierSlotData { Name = b, Target = 52 }
slot 0081 in 0080 <- Identifier : (0004) = IdentifierSlotData { Name = b, Target = 52 }
dequeue: 0059
dequeue: 0061
slot 0060 in 0058 <- Add : (0004) = AddSlotData { Left = 61, Right = 63 }
dequeue: 0069
slot 0067 in 0002 <- Call : (0006) = CallSlotData { Target = 68, Args = System.Int32[], DotnetMethod =  }
dequeue: 0081
slot 0094 in 0000 :: Type = DotnetMemberTypeSlotData { TargetType = 4, MemberName = ToString, MemberType = Method, Members = System.Reflection.MemberInfo[] }
slot 0080 in 0079 <- Member : (0094) = MemberSlotData { Target = 81, Member = 82 }
slot 0082 in 0080 <- Identifier : (0094) = IdentifierSlotData { Name = ToString, Target = 0 }
dequeue: 0060
slot 0058 assign: type <- Slot { Parent = 0, CodeType = Type, Data = DotnetTypeSlotData { Type = System.Int32 }, TypeSlot = 3 } 0004 via 0060
slot 0058 in 0002 <- Assign : (0004) = AssignSlotData { Target = 59, Value = 60 }
dequeue: 0067
dequeue: 0080
slot 0079 in 0077 <- Call = CallSlotData { Target = 80, Args = System.Int32[], DotnetMethod = System.String ToString(System.String) }
slot 0079 in 0077 <- Call : (0006) = CallSlotData { Target = 80, Args = System.Int32[], DotnetMethod = System.String ToString(System.String) }
dequeue: 0082
dequeue: 0058
dequeue: 0079
slot 0077 in 0002 <- Call : (0006) = CallSlotData { Target = 78, Args = System.Int32[], DotnetMethod =  }
dequeue: 0077
done after 81 iterations
=== Tree ===
0001: file (unknown)
0002:   braces (unknown)
0007:     static func2 (func -> dotnet -> System.Int32)
            value
0008:         braces (func -> dotnet -> System.Int32)
0009:           static cond (dotnet -> System.Boolean)
                  type
0010:               id: name = bool (some -> TYPE) -> 0005
                  value
0011:               parameter (unknown)
0012:           static num (dotnet -> System.Int32)
                  type
0013:               id: name = int (some -> TYPE) -> 0004
                  value
0014:               parameter (unknown)
0015:           if (func -> dotnet -> System.Int32)
0017:             boolean=False (dotnet -> System.Boolean)
0018:             braces (func -> dotnet -> System.Int32)
0019:               return (dotnet -> System.Int32) -> 0018
0021:                 integer=0 (dotnet -> System.Int32)
0022:           if (dotnet -> System.Boolean)
0025:             not (dotnet -> System.Boolean)
0024:               id: name = cond (dotnet -> System.Boolean) -> 0009
0026:             braces (func -> dotnet -> System.Int32)
0027:               return (dotnet -> System.Int32) -> 0026
0029:                 id: name = num (dotnet -> System.Int32) -> 0012
0030:           return (dotnet -> System.Int32) -> 0008
0032:             integer=9999 (dotnet -> System.Int32)
0033:     static func1 (func -> dotnet -> System.Int32)
            value
0034:         braces (func -> dotnet -> System.Int32)
0035:           declare a (dotnet -> System.Int32)
                  value
0036:               integer=2 (dotnet -> System.Int32)
0037:           declare b (dotnet -> System.Int32)
                  value
0038:               add (dotnet -> System.Int32)
0039:                 id: name = a (dotnet -> System.Int32) -> 0035
0040:                 call (dotnet -> System.Int32)
0041:                   id: name = func2 (func -> dotnet -> System.Int32) -> 0007
0042:                   boolean=False (dotnet -> System.Boolean)
0043:                   integer=123 (dotnet -> System.Int32)
0044:           return (dotnet -> System.Int32) -> 0034
0046:             id: name = b (dotnet -> System.Int32) -> 0037
0047:     declare a (dotnet -> System.Int32)
            value
0048:         integer=13 (dotnet -> System.Int32)
0049:     assign (dotnet -> System.Int32)
0050:       id: name = a (dotnet -> System.Int32) -> 0047
0051:       integer=39 (dotnet -> System.Int32)
0052:     declare b (dotnet -> System.Int32)
            value
0053:         add (dotnet -> System.Int32)
0054:           add (dotnet -> System.Int32)
0055:             id: name = a (dotnet -> System.Int32) -> 0047
0056:             call (dotnet -> System.Int32)
0093:               id: name = func1 (func -> dotnet -> System.Int32) -> 0033
0057:           integer=5 (dotnet -> System.Int32)
0058:     assign (dotnet -> System.Int32)
0059:       id: name = b (dotnet -> System.Int32) -> 0052
0060:       add (dotnet -> System.Int32)
0061:         id: name = b (dotnet -> System.Int32) -> 0052
0063:         negate (dotnet -> System.Int32)
0062:           integer=1 (dotnet -> System.Int32)
0064:     call (dotnet -> System.String)
0065:       intrinsic: name = print (func -> dotnet -> System.String)
0066:       id: name = a (dotnet -> System.Int32) -> 0047
0067:     call (dotnet -> System.String)
0068:       intrinsic: name = print (func -> dotnet -> System.String)
0069:       id: name = b (dotnet -> System.Int32) -> 0052
0070:     static format (dotnet -> System.String)
            value
0071:         string="C" (dotnet -> System.String)
0072:     call (dotnet -> System.String)
0073:       intrinsic: name = print (func -> dotnet -> System.String)
0074:       member (Length : property : dotnet -> System.String)
0075:         id: name = format (dotnet -> System.String) -> 0070
0076:         id: name = Length (Length : property : dotnet -> System.String)
0077:     call (dotnet -> System.String)
0078:       intrinsic: name = print (func -> dotnet -> System.String)
0079:       call-dotnet { System.String ToString(System.String) } (dotnet -> System.String)
0080:         member (ToString : method : dotnet -> System.Int32)
0081:           id: name = b (dotnet -> System.Int32) -> 0052
0082:           id: name = ToString (ToString : method : dotnet -> System.Int32)
0083:         id: name = format (dotnet -> System.String) -> 0070
0084:     return (dotnet -> System.Void) -> 0002
0089:       void (dotnet -> System.Void)
0085:     call (dotnet -> System.String)
0086:       intrinsic: name = print (func -> dotnet -> System.String)
0087:       string="unreachable" (dotnet -> System.String)

Analyze Types:
0003 0000: some -> TYPE
0004 0000: dotnet -> System.Int32
0005 0000: dotnet -> System.Boolean
0006 0000: dotnet -> System.String
0088 0000: dotnet -> System.Void
0090 0000: func -> dotnet -> System.String
0091 0000: func -> dotnet -> System.Int32
0092 0000: Length : property : dotnet -> System.String
0094 0000: ToString : method : dotnet -> System.Int32

Output:
39
168
1
$168.00

Stats:
-   Start: 0.0s
-    Read: 0.0s
-     Lex: 0.0s
-   Parse: 0.0s
- Analyze: 0.0s
-    Eval: 0.0s
-   Print: 0.0s
-  Output: 0.0s

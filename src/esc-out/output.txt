
Lex:
0000: 0 + 5 -- (1, 1) -- Identifier -- func2
0001: 5 + 1 -- (1, 6) -- Spaces -- " "
0002: 6 + 1 -- (1, 7) -- Colon -- :
0003: 7 + 1 -- (1, 8) -- Equals -- =
0004: 8 + 1 -- (1, 9) -- Spaces -- " "
0005: 9 + 1 -- (1, 10) -- BraceOpen -- {
0006: 10 + 1 -- (1, 11) -- EndOfLine -- \n
0007: 11 + 4 -- (2, 1) -- Spaces -- "    "
0008: 15 + 2 -- (2, 5) -- Identifier -- if
0009: 17 + 1 -- (2, 7) -- Spaces -- " "
0010: 18 + 5 -- (2, 8) -- Identifier -- false
0011: 23 + 1 -- (2, 13) -- Spaces -- " "
0012: 24 + 1 -- (2, 14) -- BraceOpen -- {
0013: 25 + 1 -- (2, 15) -- EndOfLine -- \n
0014: 26 + 8 -- (3, 1) -- Spaces -- "        "
0015: 34 + 6 -- (3, 9) -- Identifier -- return
0016: 40 + 1 -- (3, 15) -- Spaces -- " "
0017: 41 + 1 -- (3, 16) -- Number -- 0
0018: 42 + 1 -- (3, 17) -- EndOfLine -- \n
0019: 43 + 4 -- (4, 1) -- Spaces -- "    "
0020: 47 + 1 -- (4, 5) -- BraceClose -- }
0021: 48 + 1 -- (4, 6) -- EndOfLine -- \n
0022: 49 + 4 -- (5, 1) -- Spaces -- "    "
0023: 53 + 2 -- (5, 5) -- Identifier -- if
0024: 55 + 1 -- (5, 7) -- Spaces -- " "
0025: 56 + 4 -- (5, 8) -- Identifier -- true
0026: 60 + 1 -- (5, 12) -- Spaces -- " "
0027: 61 + 1 -- (5, 13) -- BraceOpen -- {
0028: 62 + 1 -- (5, 14) -- EndOfLine -- \n
0029: 63 + 8 -- (6, 1) -- Spaces -- "        "
0030: 71 + 6 -- (6, 9) -- Identifier -- return
0031: 77 + 1 -- (6, 15) -- Spaces -- " "
0032: 78 + 3 -- (6, 16) -- Number -- 100
0033: 81 + 1 -- (6, 19) -- EndOfLine -- \n
0034: 82 + 4 -- (7, 1) -- Spaces -- "    "
0035: 86 + 1 -- (7, 5) -- BraceClose -- }
0036: 87 + 1 -- (7, 6) -- EndOfLine -- \n
0037: 88 + 4 -- (8, 1) -- Spaces -- "    "
0038: 92 + 6 -- (8, 5) -- Identifier -- return
0039: 98 + 1 -- (8, 11) -- Spaces -- " "
0040: 99 + 4 -- (8, 12) -- Number -- 9999
0041: 103 + 1 -- (8, 16) -- Spaces -- " "
0042: 104 + 14 -- (8, 17) -- Comment -- // unreachable
0043: 118 + 1 -- (8, 31) -- EndOfLine -- \n
0044: 119 + 1 -- (9, 1) -- BraceClose -- }
0045: 120 + 1 -- (9, 2) -- EndOfLine -- \n
0046: 121 + 4 -- (10, 1) -- Identifier -- func
0047: 125 + 1 -- (10, 5) -- Spaces -- " "
0048: 126 + 1 -- (10, 6) -- Colon -- :
0049: 127 + 1 -- (10, 7) -- Equals -- =
0050: 128 + 1 -- (10, 8) -- Spaces -- " "
0051: 129 + 1 -- (10, 9) -- BraceOpen -- {
0052: 130 + 1 -- (10, 10) -- EndOfLine -- \n
0053: 131 + 4 -- (11, 1) -- Spaces -- "    "
0054: 135 + 1 -- (11, 5) -- Identifier -- a
0055: 136 + 1 -- (11, 6) -- Spaces -- " "
0056: 137 + 1 -- (11, 7) -- Colon -- :
0057: 138 + 1 -- (11, 8) -- Equals -- =
0058: 139 + 1 -- (11, 9) -- Spaces -- " "
0059: 140 + 1 -- (11, 10) -- Number -- 2
0060: 141 + 1 -- (11, 11) -- EndOfLine -- \n
0061: 142 + 4 -- (12, 1) -- Spaces -- "    "
0062: 146 + 1 -- (12, 5) -- Identifier -- b
0063: 147 + 1 -- (12, 6) -- Spaces -- " "
0064: 148 + 1 -- (12, 7) -- Colon -- :
0065: 149 + 1 -- (12, 8) -- Equals -- =
0066: 150 + 1 -- (12, 9) -- Spaces -- " "
0067: 151 + 1 -- (12, 10) -- Identifier -- a
0068: 152 + 1 -- (12, 11) -- Spaces -- " "
0069: 153 + 1 -- (12, 12) -- Plus -- +
0070: 154 + 1 -- (12, 13) -- Spaces -- " "
0071: 155 + 5 -- (12, 14) -- Identifier -- func2
0072: 160 + 1 -- (12, 19) -- EndOfLine -- \n
0073: 161 + 4 -- (13, 1) -- Spaces -- "    "
0074: 165 + 6 -- (13, 5) -- Identifier -- return
0075: 171 + 1 -- (13, 11) -- Spaces -- " "
0076: 172 + 1 -- (13, 12) -- Identifier -- b
0077: 173 + 1 -- (13, 13) -- EndOfLine -- \n
0078: 174 + 1 -- (14, 1) -- BraceClose -- }
0079: 175 + 1 -- (14, 2) -- EndOfLine -- \n
0080: 176 + 1 -- (15, 1) -- Identifier -- a
0081: 177 + 1 -- (15, 2) -- Spaces -- " "
0082: 178 + 1 -- (15, 3) -- Colon -- :
0083: 179 + 1 -- (15, 4) -- Equals -- =
0084: 180 + 1 -- (15, 5) -- Spaces -- " "
0085: 181 + 2 -- (15, 6) -- Number -- 13
0086: 183 + 1 -- (15, 8) -- EndOfLine -- \n
0087: 184 + 1 -- (16, 1) -- Identifier -- a
0088: 185 + 1 -- (16, 2) -- Spaces -- " "
0089: 186 + 1 -- (16, 3) -- Equals -- =
0090: 187 + 1 -- (16, 4) -- Spaces -- " "
0091: 188 + 2 -- (16, 5) -- Number -- 39
0092: 190 + 1 -- (16, 7) -- EndOfLine -- \n
0093: 191 + 1 -- (17, 1) -- Identifier -- b
0094: 192 + 1 -- (17, 2) -- Spaces -- " "
0095: 193 + 1 -- (17, 3) -- Colon -- :
0096: 194 + 1 -- (17, 4) -- Equals -- =
0097: 195 + 1 -- (17, 5) -- Spaces -- " "
0098: 196 + 1 -- (17, 6) -- Identifier -- a
0099: 197 + 1 -- (17, 7) -- Spaces -- " "
0100: 198 + 1 -- (17, 8) -- Plus -- +
0101: 199 + 1 -- (17, 9) -- Spaces -- " "
0102: 200 + 4 -- (17, 10) -- Identifier -- func
0103: 204 + 1 -- (17, 14) -- Spaces -- " "
0104: 205 + 1 -- (17, 15) -- Plus -- +
0105: 206 + 1 -- (17, 16) -- Spaces -- " "
0106: 207 + 1 -- (17, 17) -- Number -- 5
0107: 208 + 1 -- (17, 18) -- EndOfLine -- \n
0108: 209 + 5 -- (18, 1) -- Identifier -- print
0109: 214 + 1 -- (18, 6) -- Spaces -- " "
0110: 215 + 1 -- (18, 7) -- Identifier -- a
0111: 216 + 1 -- (18, 8) -- EndOfLine -- \n
0112: 217 + 5 -- (19, 1) -- Identifier -- print
0113: 222 + 1 -- (19, 6) -- Spaces -- " "
0114: 223 + 1 -- (19, 7) -- Identifier -- b
0115: 224 + 1 -- (19, 8) -- EndOfLine -- \n
0116: 225 + 5 -- (20, 1) -- Identifier -- print
0117: 230 + 1 -- (20, 6) -- Spaces -- " "
0118: 231 + 1 -- (20, 7) -- ParenOpen -- (
0119: 232 + 1 -- (20, 8) -- Identifier -- b
0120: 233 + 1 -- (20, 9) -- Period -- .
0121: 234 + 8 -- (20, 10) -- Identifier -- ToString
0122: 242 + 1 -- (20, 18) -- Spaces -- " "
0123: 243 + 3 -- (20, 19) -- LiteralString -- "C"
0124: 246 + 1 -- (20, 22) -- ParenClose -- )
0125: 247 + 1 -- (20, 23) -- Spaces -- " "
0126: 248 + 13 -- (20, 24) -- Comment -- // C=currency
0127: 261 + 1 -- (20, 37) -- EndOfLine -- \n
0128: 262 + 0 -- (21, 1) -- EndOfFile -- <EOF>

Parse:
line
  declare-assign
    id
      identifier: func2
    value
      braces
        line
          call
            target
              identifier: if
            arguments
              identifier: false
              braces
                line
                  call
                    target
                      identifier: return
                    arguments
                      0
        line
          call
            target
              identifier: if
            arguments
              identifier: true
              braces
                line
                  call
                    target
                      identifier: return
                    arguments
                      100
        line
          call
            target
              identifier: return
            arguments
              9999
line
  declare-assign
    id
      identifier: func
    value
      braces
        line
          declare-assign
            id
              identifier: a
            value
              2
        line
          declare-assign
            id
              identifier: b
            value
              plus
                identifier: a
                identifier: func2
        line
          call
            target
              identifier: return
            arguments
              identifier: b
line
  declare-assign
    id
      identifier: a
    value
      13
line
  assign
    identifier: a
    39
line
  declare-assign
    id
      identifier: b
    value
      plus
        plus
          identifier: a
          identifier: func
        5
line
  call
    target
      identifier: print
    arguments
      identifier: a
line
  call
    target
      identifier: print
    arguments
      identifier: b
line
  call
    target
      identifier: print
    arguments
      call
        target
          member
            identifier: b
            identifier: ToString
        arguments
          "C"

Analyze:
main procedure
    scope
    declare: func2 = (FunctionScopeExpression)
      func scope
        scope
          if
            condition
              bool: False
            block
              func scope
                scope
                  return: IntLiteralExpression { Type = System.Int32, Value = 0 } (IntLiteralExpression)
          if
            condition
              bool: True
            block
              func scope
                scope
                  return: IntLiteralExpression { Type = System.Int32, Value = 100 } (IntLiteralExpression)
          return: IntLiteralExpression { Type = System.Int32, Value = 9999 } (IntLiteralExpression)
    declare: func = (FunctionScopeExpression)
      func scope
        scope
          declare: a = (IntLiteralExpression)
            int: 2
          declare: b = (AddExpression)
            add
              identifier: a (System.Int32)
              identifier: func2 (System.Int32)
          return: IdentifierExpression { Type = System.Int32, Identifier = b } (IdentifierExpression)
    declare: a = (IntLiteralExpression)
      int: 13
    expression
      assign
        identifier: a (System.Int32)
        int: 39
    declare: b = (AddExpression)
      add
        add
          identifier: a (System.Int32)
          identifier: func (System.Int32)
        int: 5
    print:
      identifier: a (System.Int32)
    print:
      identifier: b (System.Int32)
    print:
      call
        method info: System.String ToString(System.String)
        type: System.String
        return type: System.String
        target:
          identifier: b (System.Int32)
        args: 1
          string: C

Output:
39
146
$146.00

Stats:
-    Read: 0.00s
-     Lex: 0.00s
-   Parse: 0.00s
- Analyze: 0.00s
-    Eval: 0.00s
-   Print: 0.00s

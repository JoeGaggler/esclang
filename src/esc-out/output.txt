
Lex:
0000: 0 + 5 -- (1, 1) -- Identifier -- func2
0001: 5 + 1 -- (1, 6) -- Spaces -- " "
0002: 6 + 1 -- (1, 7) -- Colon -- :
0003: 7 + 1 -- (1, 8) -- Colon -- :
0004: 8 + 1 -- (1, 9) -- Spaces -- " "
0005: 9 + 1 -- (1, 10) -- BraceOpen -- {
0006: 10 + 1 -- (1, 11) -- EndOfLine -- \n
0007: 11 + 4 -- (2, 1) -- Spaces -- "    "
0008: 15 + 4 -- (2, 5) -- Identifier -- cond
0009: 19 + 1 -- (2, 9) -- Spaces -- " "
0010: 20 + 1 -- (2, 10) -- Colon -- :
0011: 21 + 1 -- (2, 11) -- Spaces -- " "
0012: 22 + 4 -- (2, 12) -- Identifier -- bool
0013: 26 + 1 -- (2, 16) -- Spaces -- " "
0014: 27 + 1 -- (2, 17) -- Colon -- :
0015: 28 + 1 -- (2, 18) -- Spaces -- " "
0016: 29 + 1 -- (2, 19) -- LessThan -- <
0017: 30 + 1 -- (2, 20) -- GreaterThan -- >
0018: 31 + 1 -- (2, 21) -- EndOfLine -- \n
0019: 32 + 4 -- (3, 1) -- Spaces -- "    "
0020: 36 + 3 -- (3, 5) -- Identifier -- num
0021: 39 + 1 -- (3, 8) -- Spaces -- " "
0022: 40 + 1 -- (3, 9) -- Colon -- :
0023: 41 + 1 -- (3, 10) -- Spaces -- " "
0024: 42 + 3 -- (3, 11) -- Identifier -- int
0025: 45 + 1 -- (3, 14) -- Spaces -- " "
0026: 46 + 1 -- (3, 15) -- Colon -- :
0027: 47 + 1 -- (3, 16) -- Spaces -- " "
0028: 48 + 1 -- (3, 17) -- LessThan -- <
0029: 49 + 1 -- (3, 18) -- GreaterThan -- >
0030: 50 + 1 -- (3, 19) -- EndOfLine -- \n
0031: 51 + 4 -- (4, 1) -- Spaces -- "    "
0032: 55 + 2 -- (4, 5) -- Identifier -- if
0033: 57 + 1 -- (4, 7) -- Spaces -- " "
0034: 58 + 5 -- (4, 8) -- Identifier -- false
0035: 63 + 1 -- (4, 13) -- Spaces -- " "
0036: 64 + 1 -- (4, 14) -- BraceOpen -- {
0037: 65 + 1 -- (4, 15) -- EndOfLine -- \n
0038: 66 + 8 -- (5, 1) -- Spaces -- "        "
0039: 74 + 6 -- (5, 9) -- Identifier -- return
0040: 80 + 1 -- (5, 15) -- Spaces -- " "
0041: 81 + 1 -- (5, 16) -- Number -- 0
0042: 82 + 1 -- (5, 17) -- EndOfLine -- \n
0043: 83 + 4 -- (6, 1) -- Spaces -- "    "
0044: 87 + 1 -- (6, 5) -- BraceClose -- }
0045: 88 + 1 -- (6, 6) -- EndOfLine -- \n
0046: 89 + 4 -- (7, 1) -- Spaces -- "    "
0047: 93 + 2 -- (7, 5) -- Identifier -- if
0048: 95 + 1 -- (7, 7) -- Spaces -- " "
0049: 96 + 1 -- (7, 8) -- Exclamation -- !
0050: 97 + 4 -- (7, 9) -- Identifier -- cond
0051: 101 + 1 -- (7, 13) -- Spaces -- " "
0052: 102 + 1 -- (7, 14) -- BraceOpen -- {
0053: 103 + 1 -- (7, 15) -- Spaces -- " "
0054: 104 + 6 -- (7, 16) -- Identifier -- return
0055: 110 + 1 -- (7, 22) -- Spaces -- " "
0056: 111 + 3 -- (7, 23) -- Identifier -- num
0057: 114 + 1 -- (7, 26) -- Spaces -- " "
0058: 115 + 1 -- (7, 27) -- BraceClose -- }
0059: 116 + 1 -- (7, 28) -- EndOfLine -- \n
0060: 117 + 4 -- (8, 1) -- Spaces -- "    "
0061: 121 + 6 -- (8, 5) -- Identifier -- return
0062: 127 + 1 -- (8, 11) -- Spaces -- " "
0063: 128 + 4 -- (8, 12) -- Number -- 9999
0064: 132 + 1 -- (8, 16) -- Spaces -- " "
0065: 133 + 14 -- (8, 17) -- Comment -- // unreachable
0066: 147 + 1 -- (8, 31) -- EndOfLine -- \n
0067: 148 + 1 -- (9, 1) -- BraceClose -- }
0068: 149 + 1 -- (9, 2) -- EndOfLine -- \n
0069: 150 + 5 -- (10, 1) -- Identifier -- func1
0070: 155 + 1 -- (10, 6) -- Spaces -- " "
0071: 156 + 1 -- (10, 7) -- Colon -- :
0072: 157 + 1 -- (10, 8) -- Colon -- :
0073: 158 + 1 -- (10, 9) -- Spaces -- " "
0074: 159 + 1 -- (10, 10) -- BraceOpen -- {
0075: 160 + 1 -- (10, 11) -- EndOfLine -- \n
0076: 161 + 4 -- (11, 1) -- Spaces -- "    "
0077: 165 + 1 -- (11, 5) -- Identifier -- a
0078: 166 + 1 -- (11, 6) -- Spaces -- " "
0079: 167 + 1 -- (11, 7) -- Colon -- :
0080: 168 + 1 -- (11, 8) -- Equals -- =
0081: 169 + 1 -- (11, 9) -- Spaces -- " "
0082: 170 + 1 -- (11, 10) -- Number -- 2
0083: 171 + 1 -- (11, 11) -- EndOfLine -- \n
0084: 172 + 4 -- (12, 1) -- Spaces -- "    "
0085: 176 + 1 -- (12, 5) -- Identifier -- b
0086: 177 + 1 -- (12, 6) -- Spaces -- " "
0087: 178 + 1 -- (12, 7) -- Colon -- :
0088: 179 + 1 -- (12, 8) -- Equals -- =
0089: 180 + 1 -- (12, 9) -- Spaces -- " "
0090: 181 + 1 -- (12, 10) -- Identifier -- a
0091: 182 + 1 -- (12, 11) -- Spaces -- " "
0092: 183 + 1 -- (12, 12) -- Plus -- +
0093: 184 + 1 -- (12, 13) -- Spaces -- " "
0094: 185 + 5 -- (12, 14) -- Identifier -- func2
0095: 190 + 1 -- (12, 19) -- Spaces -- " "
0096: 191 + 5 -- (12, 20) -- Identifier -- false
0097: 196 + 1 -- (12, 25) -- Spaces -- " "
0098: 197 + 3 -- (12, 26) -- Number -- 123
0099: 200 + 1 -- (12, 29) -- EndOfLine -- \n
0100: 201 + 4 -- (13, 1) -- Spaces -- "    "
0101: 205 + 6 -- (13, 5) -- Identifier -- return
0102: 211 + 1 -- (13, 11) -- Spaces -- " "
0103: 212 + 1 -- (13, 12) -- Identifier -- b
0104: 213 + 1 -- (13, 13) -- EndOfLine -- \n
0105: 214 + 1 -- (14, 1) -- BraceClose -- }
0106: 215 + 1 -- (14, 2) -- EndOfLine -- \n
0107: 216 + 1 -- (15, 1) -- Identifier -- a
0108: 217 + 1 -- (15, 2) -- Spaces -- " "
0109: 218 + 1 -- (15, 3) -- Colon -- :
0110: 219 + 1 -- (15, 4) -- Equals -- =
0111: 220 + 1 -- (15, 5) -- Spaces -- " "
0112: 221 + 2 -- (15, 6) -- Number -- 13
0113: 223 + 1 -- (15, 8) -- EndOfLine -- \n
0114: 224 + 1 -- (16, 1) -- Identifier -- a
0115: 225 + 1 -- (16, 2) -- Spaces -- " "
0116: 226 + 1 -- (16, 3) -- Equals -- =
0117: 227 + 1 -- (16, 4) -- Spaces -- " "
0118: 228 + 2 -- (16, 5) -- Number -- 39
0119: 230 + 1 -- (16, 7) -- EndOfLine -- \n
0120: 231 + 1 -- (17, 1) -- Identifier -- b
0121: 232 + 1 -- (17, 2) -- Spaces -- " "
0122: 233 + 1 -- (17, 3) -- Colon -- :
0123: 234 + 1 -- (17, 4) -- Equals -- =
0124: 235 + 1 -- (17, 5) -- Spaces -- " "
0125: 236 + 1 -- (17, 6) -- Identifier -- a
0126: 237 + 1 -- (17, 7) -- Spaces -- " "
0127: 238 + 1 -- (17, 8) -- Plus -- +
0128: 239 + 1 -- (17, 9) -- Spaces -- " "
0129: 240 + 5 -- (17, 10) -- Identifier -- func1
0130: 245 + 1 -- (17, 15) -- Spaces -- " "
0131: 246 + 1 -- (17, 16) -- Plus -- +
0132: 247 + 1 -- (17, 17) -- Spaces -- " "
0133: 248 + 1 -- (17, 18) -- Number -- 5
0134: 249 + 1 -- (17, 19) -- EndOfLine -- \n
0135: 250 + 1 -- (18, 1) -- Identifier -- b
0136: 251 + 1 -- (18, 2) -- Spaces -- " "
0137: 252 + 1 -- (18, 3) -- Equals -- =
0138: 253 + 1 -- (18, 4) -- Spaces -- " "
0139: 254 + 1 -- (18, 5) -- Identifier -- b
0140: 255 + 1 -- (18, 6) -- Spaces -- " "
0141: 256 + 1 -- (18, 7) -- Plus -- +
0142: 257 + 1 -- (18, 8) -- Spaces -- " "
0143: 258 + 1 -- (18, 9) -- ParenOpen -- (
0144: 259 + 1 -- (18, 10) -- Minus -- -
0145: 260 + 1 -- (18, 11) -- Number -- 1
0146: 261 + 1 -- (18, 12) -- ParenClose -- )
0147: 262 + 1 -- (18, 13) -- EndOfLine -- \n
0148: 263 + 5 -- (19, 1) -- Identifier -- print
0149: 268 + 1 -- (19, 6) -- Spaces -- " "
0150: 269 + 1 -- (19, 7) -- Identifier -- a
0151: 270 + 1 -- (19, 8) -- EndOfLine -- \n
0152: 271 + 5 -- (20, 1) -- Identifier -- print
0153: 276 + 1 -- (20, 6) -- Spaces -- " "
0154: 277 + 1 -- (20, 7) -- Identifier -- b
0155: 278 + 1 -- (20, 8) -- EndOfLine -- \n
0156: 279 + 6 -- (21, 1) -- Identifier -- format
0157: 285 + 1 -- (21, 7) -- Spaces -- " "
0158: 286 + 1 -- (21, 8) -- Colon -- :
0159: 287 + 1 -- (21, 9) -- Colon -- :
0160: 288 + 1 -- (21, 10) -- Spaces -- " "
0161: 289 + 3 -- (21, 11) -- LiteralString -- "C"
0162: 292 + 1 -- (21, 14) -- EndOfLine -- \n
0163: 293 + 5 -- (22, 1) -- Identifier -- print
0164: 298 + 1 -- (22, 6) -- Spaces -- " "
0165: 299 + 6 -- (22, 7) -- Identifier -- format
0166: 305 + 1 -- (22, 13) -- Period -- .
0167: 306 + 6 -- (22, 14) -- Identifier -- Length
0168: 312 + 1 -- (22, 20) -- EndOfLine -- \n
0169: 313 + 5 -- (23, 1) -- Identifier -- print
0170: 318 + 1 -- (23, 6) -- Spaces -- " "
0171: 319 + 1 -- (23, 7) -- ParenOpen -- (
0172: 320 + 1 -- (23, 8) -- Identifier -- b
0173: 321 + 1 -- (23, 9) -- Period -- .
0174: 322 + 8 -- (23, 10) -- Identifier -- ToString
0175: 330 + 1 -- (23, 18) -- Spaces -- " "
0176: 331 + 6 -- (23, 19) -- Identifier -- format
0177: 337 + 1 -- (23, 25) -- ParenClose -- )
0178: 338 + 1 -- (23, 26) -- Spaces -- " "
0179: 339 + 13 -- (23, 27) -- Comment -- // C=currency
0180: 352 + 1 -- (23, 40) -- EndOfLine -- \n
0181: 353 + 6 -- (24, 1) -- Identifier -- return
0182: 359 + 1 -- (24, 7) -- Spaces -- " "
0183: 360 + 15 -- (24, 8) -- Comment -- // early return
0184: 375 + 1 -- (24, 23) -- EndOfLine -- \n
0185: 376 + 5 -- (25, 1) -- Identifier -- print
0186: 381 + 1 -- (25, 6) -- Spaces -- " "
0187: 382 + 13 -- (25, 7) -- LiteralString -- "unreachable"
0188: 395 + 1 -- (25, 20) -- EndOfLine -- \n
0189: 396 + 0 -- (26, 1) -- EndOfFile -- <EOF>

Parse:
declare-static
  id
    identifier: func2
  value
    braces
      declare-static
        id
          identifier: cond
        type
          identifier: bool
        value
          parameter
      declare-static
        id
          identifier: num
        type
          identifier: int
        value
          parameter
      call
        target
          identifier: if
        arguments
          identifier: false
          braces
            call
              target
                identifier: return
              arguments
                0
      call
        target
          identifier: if
        arguments
          not
            identifier: cond
          braces
            call
              target
                identifier: return
              arguments
                identifier: num
      call
        target
          identifier: return
        arguments
          9999
declare-static
  id
    identifier: func1
  value
    braces
      declare-assign
        id
          identifier: a
        value
          2
      declare-assign
        id
          identifier: b
        value
          plus
            identifier: a
            call
              target
                identifier: func2
              arguments
                identifier: false
                123
      call
        target
          identifier: return
        arguments
          identifier: b
declare-assign
  id
    identifier: a
  value
    13
assign
  identifier: a
  39
declare-assign
  id
    identifier: b
  value
    plus
      plus
        identifier: a
        identifier: func1
      5
assign
  identifier: b
  plus
    identifier: b
    negation
      1
call
  target
    identifier: print
  arguments
    identifier: a
call
  target
    identifier: print
  arguments
    identifier: b
declare-static
  id
    identifier: format
  value
    "C"
call
  target
    identifier: print
  arguments
    member
      identifier: format
      identifier: Length
call
  target
    identifier: print
  arguments
    call
      target
        member
          identifier: b
          identifier: ToString
      arguments
        identifier: format
identifier: return
call
  target
    identifier: print
  arguments
    "unreachable"

Analysis Log:
=== Build: init ===
slot 0001 in 0000 :: File = FileCodeData { Main = 0 }
slot 0002 in 0001 :: Braces = BracesCodeData { Lines = System.Int32[] }
slot 0003 in 0002 :: Type = TypeCodeData { Name = TYPE }
slot 0003 in 0002 <- Type : (0, 0003) = TypeCodeData { Name = TYPE }
slot 0004 in 0002 :: Type = TypeCodeData { Name = DYNAMIC }
slot 0004 in 0002 <- Type : (0, 0003) = TypeCodeData { Name = DYNAMIC }
slot 0005 in 0002 :: Type = TypeCodeData { Name = FUNC }
slot 0005 in 0002 <- Type : (0, 0003) = TypeCodeData { Name = FUNC }
slot 0006 in 0002 :: Type = TypeCodeData { Name = DOTNET }
slot 0006 in 0002 <- Type : (0, 0003) = TypeCodeData { Name = DOTNET }
slot 0007 in 0002 :: Type = DotnetTypeCodeData { Name = VOID, Type = System.Void }
slot 0007 in 0002 <- Type : (0, 0003) = DotnetTypeCodeData { Name = VOID, Type = System.Void }
slot 0008 in 0002 :: Type = DotnetTypeCodeData { Name = INT, Type = System.Int32 }
slot 0008 in 0002 <- Type : (0, 0003) = DotnetTypeCodeData { Name = INT, Type = System.Int32 }
slot 0009 in 0002 :: Type = DotnetTypeCodeData { Name = BOOL, Type = System.Boolean }
slot 0009 in 0002 <- Type : (0, 0003) = DotnetTypeCodeData { Name = BOOL, Type = System.Boolean }
slot 0010 in 0002 :: Type = DotnetTypeCodeData { Name = STRING, Type = System.String }
slot 0010 in 0002 <- Type : (0, 0003) = DotnetTypeCodeData { Name = STRING, Type = System.String }
slot 0001 in 0000 <- File = FileCodeData { Main = 2 }
slot 0011 in 0002 :: Declare = DeclareCodeData { Name = func2, IsStatic = True, Type = 0, Value = 0 }
slot 0002 in 0001 -> Braces = BracesCodeData { Lines = System.Int32[] }
slot 0012 in 0011 :: Braces = BracesCodeData { Lines = System.Int32[] }
slot 0013 in 0012 :: Declare = DeclareCodeData { Name = cond, IsStatic = True, Type = 0, Value = 0 }
slot 0012 in 0011 -> Braces = BracesCodeData { Lines = System.Int32[] }
slot 0014 in 0013 :: Identifier = IdentifierCodeData { Name = bool, Target = 0 }
slot 0013 in 0012 <- Declare = DeclareCodeData { Name = cond, IsStatic = True, Type = 14, Value = 0 }
slot 0015 in 0013 :: Parameter = ParameterCodeData { }
slot 0013 in 0012 <- Declare = DeclareCodeData { Name = cond, IsStatic = True, Type = 14, Value = 15 }
slot 0016 in 0012 :: Declare = DeclareCodeData { Name = num, IsStatic = True, Type = 0, Value = 0 }
slot 0012 in 0011 -> Braces = BracesCodeData { Lines = System.Int32[] }
slot 0017 in 0016 :: Identifier = IdentifierCodeData { Name = int, Target = 0 }
slot 0016 in 0012 <- Declare = DeclareCodeData { Name = num, IsStatic = True, Type = 17, Value = 0 }
slot 0018 in 0016 :: Parameter = ParameterCodeData { }
slot 0016 in 0012 <- Declare = DeclareCodeData { Name = num, IsStatic = True, Type = 17, Value = 18 }
slot 0019 in 0012 :: Call = CallCodeData { Target = 0, Args = System.Int32[], DotnetMethod =  }
slot 0020 in 0019 :: Identifier = IdentifierCodeData { Name = if, Target = 0 }
slot 0019 in 0012 <- Call = CallCodeData { Target = 20, Args = System.Int32[], DotnetMethod =  }
slot 0021 in 0019 :: Identifier = IdentifierCodeData { Name = false, Target = 0 }
slot 0022 in 0019 :: Braces = BracesCodeData { Lines = System.Int32[] }
slot 0023 in 0022 :: Call = CallCodeData { Target = 0, Args = System.Int32[], DotnetMethod =  }
slot 0024 in 0023 :: Identifier = IdentifierCodeData { Name = return, Target = 0 }
slot 0023 in 0022 <- Call = CallCodeData { Target = 24, Args = System.Int32[], DotnetMethod =  }
slot 0025 in 0023 :: Integer = IntegerCodeData { Value = 0 }
slot 0023 in 0022 <- Call = CallCodeData { Target = 24, Args = System.Int32[], DotnetMethod =  }
slot 0022 in 0019 <- Braces = BracesCodeData { Lines = System.Int32[] }
slot 0019 in 0012 <- Call = CallCodeData { Target = 20, Args = System.Int32[], DotnetMethod =  }
slot 0026 in 0012 :: Call = CallCodeData { Target = 0, Args = System.Int32[], DotnetMethod =  }
slot 0027 in 0026 :: Identifier = IdentifierCodeData { Name = if, Target = 0 }
slot 0026 in 0012 <- Call = CallCodeData { Target = 27, Args = System.Int32[], DotnetMethod =  }
slot 0028 in 0026 :: Identifier = IdentifierCodeData { Name = cond, Target = 0 }
slot 0029 in 0026 :: LogicalNegation = LogicalNegationCodeData { Value = 28 }
slot 0030 in 0026 :: Braces = BracesCodeData { Lines = System.Int32[] }
slot 0031 in 0030 :: Call = CallCodeData { Target = 0, Args = System.Int32[], DotnetMethod =  }
slot 0032 in 0031 :: Identifier = IdentifierCodeData { Name = return, Target = 0 }
slot 0031 in 0030 <- Call = CallCodeData { Target = 32, Args = System.Int32[], DotnetMethod =  }
slot 0033 in 0031 :: Identifier = IdentifierCodeData { Name = num, Target = 0 }
slot 0031 in 0030 <- Call = CallCodeData { Target = 32, Args = System.Int32[], DotnetMethod =  }
slot 0030 in 0026 <- Braces = BracesCodeData { Lines = System.Int32[] }
slot 0026 in 0012 <- Call = CallCodeData { Target = 27, Args = System.Int32[], DotnetMethod =  }
slot 0034 in 0012 :: Call = CallCodeData { Target = 0, Args = System.Int32[], DotnetMethod =  }
slot 0035 in 0034 :: Identifier = IdentifierCodeData { Name = return, Target = 0 }
slot 0034 in 0012 <- Call = CallCodeData { Target = 35, Args = System.Int32[], DotnetMethod =  }
slot 0036 in 0034 :: Integer = IntegerCodeData { Value = 9999 }
slot 0034 in 0012 <- Call = CallCodeData { Target = 35, Args = System.Int32[], DotnetMethod =  }
slot 0012 in 0011 <- Braces = BracesCodeData { Lines = System.Int32[] }
slot 0011 in 0002 <- Declare = DeclareCodeData { Name = func2, IsStatic = True, Type = 0, Value = 12 }
slot 0037 in 0002 :: Declare = DeclareCodeData { Name = func1, IsStatic = True, Type = 0, Value = 0 }
slot 0002 in 0001 -> Braces = BracesCodeData { Lines = System.Int32[] }
slot 0038 in 0037 :: Braces = BracesCodeData { Lines = System.Int32[] }
slot 0039 in 0038 :: Declare = DeclareCodeData { Name = a, IsStatic = False, Type = 0, Value = 0 }
slot 0038 in 0037 -> Braces = BracesCodeData { Lines = System.Int32[] }
slot 0040 in 0039 :: Integer = IntegerCodeData { Value = 2 }
slot 0039 in 0038 <- Declare = DeclareCodeData { Name = a, IsStatic = False, Type = 0, Value = 40 }
slot 0041 in 0038 :: Declare = DeclareCodeData { Name = b, IsStatic = False, Type = 0, Value = 0 }
slot 0038 in 0037 -> Braces = BracesCodeData { Lines = System.Int32[] }
slot 0042 in 0041 :: Add = AddOpCodeData { Left = 0, Right = 0 }
slot 0043 in 0042 :: Identifier = IdentifierCodeData { Name = a, Target = 0 }
slot 0044 in 0042 :: Call = CallCodeData { Target = 0, Args = System.Int32[], DotnetMethod =  }
slot 0045 in 0044 :: Identifier = IdentifierCodeData { Name = func2, Target = 0 }
slot 0044 in 0042 <- Call = CallCodeData { Target = 45, Args = System.Int32[], DotnetMethod =  }
slot 0046 in 0044 :: Identifier = IdentifierCodeData { Name = false, Target = 0 }
slot 0047 in 0044 :: Integer = IntegerCodeData { Value = 123 }
slot 0044 in 0042 <- Call = CallCodeData { Target = 45, Args = System.Int32[], DotnetMethod =  }
slot 0042 in 0041 <- Add = AddOpCodeData { Left = 43, Right = 44 }
slot 0041 in 0038 <- Declare = DeclareCodeData { Name = b, IsStatic = False, Type = 0, Value = 42 }
slot 0048 in 0038 :: Call = CallCodeData { Target = 0, Args = System.Int32[], DotnetMethod =  }
slot 0049 in 0048 :: Identifier = IdentifierCodeData { Name = return, Target = 0 }
slot 0048 in 0038 <- Call = CallCodeData { Target = 49, Args = System.Int32[], DotnetMethod =  }
slot 0050 in 0048 :: Identifier = IdentifierCodeData { Name = b, Target = 0 }
slot 0048 in 0038 <- Call = CallCodeData { Target = 49, Args = System.Int32[], DotnetMethod =  }
slot 0038 in 0037 <- Braces = BracesCodeData { Lines = System.Int32[] }
slot 0037 in 0002 <- Declare = DeclareCodeData { Name = func1, IsStatic = True, Type = 0, Value = 38 }
slot 0051 in 0002 :: Declare = DeclareCodeData { Name = a, IsStatic = False, Type = 0, Value = 0 }
slot 0002 in 0001 -> Braces = BracesCodeData { Lines = System.Int32[] }
slot 0052 in 0051 :: Integer = IntegerCodeData { Value = 13 }
slot 0051 in 0002 <- Declare = DeclareCodeData { Name = a, IsStatic = False, Type = 0, Value = 52 }
slot 0053 in 0002 :: Assign = AssignCodeData { Target = 0, Value = 0 }
slot 0054 in 0053 :: Identifier = IdentifierCodeData { Name = a, Target = 0 }
slot 0053 in 0002 <- Assign = AssignCodeData { Target = 54, Value = 0 }
slot 0055 in 0053 :: Integer = IntegerCodeData { Value = 39 }
slot 0053 in 0002 <- Assign = AssignCodeData { Target = 54, Value = 55 }
slot 0056 in 0002 :: Declare = DeclareCodeData { Name = b, IsStatic = False, Type = 0, Value = 0 }
slot 0002 in 0001 -> Braces = BracesCodeData { Lines = System.Int32[] }
slot 0057 in 0056 :: Add = AddOpCodeData { Left = 0, Right = 0 }
slot 0058 in 0057 :: Add = AddOpCodeData { Left = 0, Right = 0 }
slot 0059 in 0058 :: Identifier = IdentifierCodeData { Name = a, Target = 0 }
slot 0060 in 0058 :: Identifier = IdentifierCodeData { Name = func1, Target = 0 }
slot 0058 in 0057 <- Add = AddOpCodeData { Left = 59, Right = 60 }
slot 0061 in 0057 :: Integer = IntegerCodeData { Value = 5 }
slot 0057 in 0056 <- Add = AddOpCodeData { Left = 58, Right = 61 }
slot 0056 in 0002 <- Declare = DeclareCodeData { Name = b, IsStatic = False, Type = 0, Value = 57 }
slot 0062 in 0002 :: Assign = AssignCodeData { Target = 0, Value = 0 }
slot 0063 in 0062 :: Identifier = IdentifierCodeData { Name = b, Target = 0 }
slot 0062 in 0002 <- Assign = AssignCodeData { Target = 63, Value = 0 }
slot 0064 in 0062 :: Add = AddOpCodeData { Left = 0, Right = 0 }
slot 0065 in 0064 :: Identifier = IdentifierCodeData { Name = b, Target = 0 }
slot 0066 in 0064 :: Integer = IntegerCodeData { Value = 1 }
slot 0067 in 0064 :: Negation = NegationCodeData { Value = 66 }
slot 0064 in 0062 <- Add = AddOpCodeData { Left = 65, Right = 67 }
slot 0062 in 0002 <- Assign = AssignCodeData { Target = 63, Value = 64 }
slot 0068 in 0002 :: Call = CallCodeData { Target = 0, Args = System.Int32[], DotnetMethod =  }
slot 0069 in 0068 :: Identifier = IdentifierCodeData { Name = print, Target = 0 }
slot 0068 in 0002 <- Call = CallCodeData { Target = 69, Args = System.Int32[], DotnetMethod =  }
slot 0070 in 0068 :: Identifier = IdentifierCodeData { Name = a, Target = 0 }
slot 0068 in 0002 <- Call = CallCodeData { Target = 69, Args = System.Int32[], DotnetMethod =  }
slot 0071 in 0002 :: Call = CallCodeData { Target = 0, Args = System.Int32[], DotnetMethod =  }
slot 0072 in 0071 :: Identifier = IdentifierCodeData { Name = print, Target = 0 }
slot 0071 in 0002 <- Call = CallCodeData { Target = 72, Args = System.Int32[], DotnetMethod =  }
slot 0073 in 0071 :: Identifier = IdentifierCodeData { Name = b, Target = 0 }
slot 0071 in 0002 <- Call = CallCodeData { Target = 72, Args = System.Int32[], DotnetMethod =  }
slot 0074 in 0002 :: Declare = DeclareCodeData { Name = format, IsStatic = True, Type = 0, Value = 0 }
slot 0002 in 0001 -> Braces = BracesCodeData { Lines = System.Int32[] }
slot 0075 in 0074 :: String = StringCodeData { Value = C }
slot 0074 in 0002 <- Declare = DeclareCodeData { Name = format, IsStatic = True, Type = 0, Value = 75 }
slot 0076 in 0002 :: Call = CallCodeData { Target = 0, Args = System.Int32[], DotnetMethod =  }
slot 0077 in 0076 :: Identifier = IdentifierCodeData { Name = print, Target = 0 }
slot 0076 in 0002 <- Call = CallCodeData { Target = 77, Args = System.Int32[], DotnetMethod =  }
slot 0078 in 0076 :: Member = MemberCodeData { Target = 0, Member = 0 }
slot 0079 in 0078 :: Identifier = IdentifierCodeData { Name = format, Target = 0 }
slot 0078 in 0076 <- Member = MemberCodeData { Target = 79, Member = 0 }
slot 0080 in 0078 :: Identifier = IdentifierCodeData { Name = Length, Target = 0 }
slot 0078 in 0076 <- Member = MemberCodeData { Target = 79, Member = 80 }
slot 0076 in 0002 <- Call = CallCodeData { Target = 77, Args = System.Int32[], DotnetMethod =  }
slot 0081 in 0002 :: Call = CallCodeData { Target = 0, Args = System.Int32[], DotnetMethod =  }
slot 0082 in 0081 :: Identifier = IdentifierCodeData { Name = print, Target = 0 }
slot 0081 in 0002 <- Call = CallCodeData { Target = 82, Args = System.Int32[], DotnetMethod =  }
slot 0083 in 0081 :: Call = CallCodeData { Target = 0, Args = System.Int32[], DotnetMethod =  }
slot 0084 in 0083 :: Member = MemberCodeData { Target = 0, Member = 0 }
slot 0085 in 0084 :: Identifier = IdentifierCodeData { Name = b, Target = 0 }
slot 0084 in 0083 <- Member = MemberCodeData { Target = 85, Member = 0 }
slot 0086 in 0084 :: Identifier = IdentifierCodeData { Name = ToString, Target = 0 }
slot 0084 in 0083 <- Member = MemberCodeData { Target = 85, Member = 86 }
slot 0083 in 0081 <- Call = CallCodeData { Target = 84, Args = System.Int32[], DotnetMethod =  }
slot 0087 in 0083 :: Identifier = IdentifierCodeData { Name = format, Target = 0 }
slot 0083 in 0081 <- Call = CallCodeData { Target = 84, Args = System.Int32[], DotnetMethod =  }
slot 0081 in 0002 <- Call = CallCodeData { Target = 82, Args = System.Int32[], DotnetMethod =  }
slot 0088 in 0002 :: Identifier = IdentifierCodeData { Name = return, Target = 0 }
slot 0089 in 0002 :: Call = CallCodeData { Target = 0, Args = System.Int32[], DotnetMethod =  }
slot 0090 in 0089 :: Identifier = IdentifierCodeData { Name = print, Target = 0 }
slot 0089 in 0002 <- Call = CallCodeData { Target = 90, Args = System.Int32[], DotnetMethod =  }
slot 0091 in 0089 :: String = StringCodeData { Value = unreachable }
slot 0089 in 0002 <- Call = CallCodeData { Target = 90, Args = System.Int32[], DotnetMethod =  }
slot 0002 in 0001 <- Braces = BracesCodeData { Lines = System.Int32[] }
=== Build: return ===
add type 1 = VoidTypeData { }
add type 2 = FunctionTypeData { ReturnType = 1, ReturnType2 = 7 }
slot 0002 in 0001 <- Braces : (2, 0007) = BracesCodeData { Lines = System.Int32[] }
slot 0012 in 0011 <- Braces : (2, 0007) = BracesCodeData { Lines = System.Int32[] }
slot 0022 in 0019 <- Braces : (2, 0007) = BracesCodeData { Lines = System.Int32[] }
slot 0024 in 0023 -> Identifier = IdentifierCodeData { Name = return, Target = 0 }
slot 0023 in 0022 << Return = ReturnCodeData { Value = 25, Function = 0 }
slot 0024 in 0023 << Unknown = InvalidCodeData { }
slot 0023 in 0022 -- call -> return
slot 0030 in 0026 <- Braces : (2, 0007) = BracesCodeData { Lines = System.Int32[] }
slot 0032 in 0031 -> Identifier = IdentifierCodeData { Name = return, Target = 0 }
slot 0031 in 0030 << Return = ReturnCodeData { Value = 33, Function = 0 }
slot 0032 in 0031 << Unknown = InvalidCodeData { }
slot 0031 in 0030 -- call -> return
slot 0035 in 0034 -> Identifier = IdentifierCodeData { Name = return, Target = 0 }
slot 0034 in 0012 << Return = ReturnCodeData { Value = 36, Function = 0 }
slot 0035 in 0034 << Unknown = InvalidCodeData { }
slot 0034 in 0012 -- call -> return
slot 0038 in 0037 <- Braces : (2, 0007) = BracesCodeData { Lines = System.Int32[] }
slot 0049 in 0048 -> Identifier = IdentifierCodeData { Name = return, Target = 0 }
slot 0048 in 0038 << Return = ReturnCodeData { Value = 50, Function = 0 }
slot 0049 in 0048 << Unknown = InvalidCodeData { }
slot 0048 in 0038 -- call -> return
slot 0069 in 0068 -> Identifier = IdentifierCodeData { Name = print, Target = 0 }
slot 0072 in 0071 -> Identifier = IdentifierCodeData { Name = print, Target = 0 }
slot 0077 in 0076 -> Identifier = IdentifierCodeData { Name = print, Target = 0 }
slot 0082 in 0081 -> Identifier = IdentifierCodeData { Name = print, Target = 0 }
slot 0084 in 0083 -> Member = MemberCodeData { Target = 85, Member = 86 }
slot 0092 in 0088 :: Void = VoidCodeData { }
slot 0092 in 0088 <- Void : (1, 0007) = VoidCodeData { }
slot 0088 in 0002 << Return = ReturnCodeData { Value = 92, Function = 0 }
slot 0088 in 0002 <- Return : (1, 0007) = ReturnCodeData { Value = 92, Function = 0 }
slot 0090 in 0089 -> Identifier = IdentifierCodeData { Name = print, Target = 0 }
slot 0023 <- returns to 0022
slot 0023 in 0022 <- Return = ReturnCodeData { Value = 25, Function = 22 }
slot 0022 in 0019 <- Braces : (0, 0000) = BracesCodeData { Lines = System.Int32[] }
slot 0031 <- returns to 0030
slot 0031 in 0030 <- Return = ReturnCodeData { Value = 33, Function = 30 }
slot 0030 in 0026 <- Braces : (0, 0000) = BracesCodeData { Lines = System.Int32[] }
slot 0034 <- returns to 0012
slot 0034 in 0012 <- Return = ReturnCodeData { Value = 36, Function = 12 }
slot 0012 in 0011 <- Braces : (0, 0000) = BracesCodeData { Lines = System.Int32[] }
slot 0048 <- returns to 0038
slot 0048 in 0038 <- Return = ReturnCodeData { Value = 50, Function = 38 }
slot 0038 in 0037 <- Braces : (0, 0000) = BracesCodeData { Lines = System.Int32[] }
slot 0088 <- returns to 0002
slot 0088 in 0002 <- Return = ReturnCodeData { Value = 92, Function = 2 }
slot 0002 in 0001 <- Braces : (0, 0000) = BracesCodeData { Lines = System.Int32[] }
=== Build: resolve identifiers ===
identifier: 0014 = IdentifierCodeData { Name = bool, Target = 0 }
  0013 = Declare
      0011 = Declare
        0002 FOUND: BracesCodeData { Lines = System.Int32[] } = 9
slot 0014 in 0013 <- Identifier = IdentifierCodeData { Name = bool, Target = 9 }
identifier: 0017 = IdentifierCodeData { Name = int, Target = 0 }
  0016 = Declare
      0011 = Declare
        0002 FOUND: BracesCodeData { Lines = System.Int32[] } = 8
slot 0017 in 0016 <- Identifier = IdentifierCodeData { Name = int, Target = 8 }
identifier: 0020 = IdentifierCodeData { Name = if, Target = 0 }
  0019 = Call
      0011 = Declare
          0001 = File
slot 0019 in 0012 << If = IfSlotCodeData { Condition = 21, Body = 22 }
slot 0020 in 0019 << Unknown = InvalidCodeData { }
identifier: 0021 = IdentifierCodeData { Name = false, Target = 0 }
  0019 = If
      0011 = Declare
          0001 = File
slot 0021 in 0019 << Boolean = BooleanCodeData { Value = False }
add type 3 = DotnetTypeData { Type = System.Boolean }
slot 0021 in 0019 <- Boolean : (3, 0009) = BooleanCodeData { Value = False }
identifier: 0027 = IdentifierCodeData { Name = if, Target = 0 }
  0026 = Call
      0011 = Declare
          0001 = File
slot 0026 in 0012 << If = IfSlotCodeData { Condition = 29, Body = 30 }
slot 0027 in 0026 << Unknown = InvalidCodeData { }
identifier: 0028 = IdentifierCodeData { Name = cond, Target = 0 }
  0026 = If
    0012 FOUND: BracesCodeData { Lines = System.Int32[] } = 13
slot 0028 in 0026 <- Identifier = IdentifierCodeData { Name = cond, Target = 13 }
identifier: 0033 = IdentifierCodeData { Name = num, Target = 0 }
  0031 = Return
      0026 = If
        0012 FOUND: BracesCodeData { Lines = System.Int32[] } = 16
slot 0033 in 0031 <- Identifier = IdentifierCodeData { Name = num, Target = 16 }
identifier: 0043 = IdentifierCodeData { Name = a, Target = 0 }
  0042 = Add
    0041 = Declare
      0038 FOUND: BracesCodeData { Lines = System.Int32[] } = 39
slot 0043 in 0042 <- Identifier = IdentifierCodeData { Name = a, Target = 39 }
identifier: 0045 = IdentifierCodeData { Name = func2, Target = 0 }
  0044 = Call
    0042 = Add
      0041 = Declare
          0037 = Declare
            0002 FOUND: BracesCodeData { Lines = System.Int32[] } = 11
slot 0045 in 0044 <- Identifier = IdentifierCodeData { Name = func2, Target = 11 }
identifier: 0046 = IdentifierCodeData { Name = false, Target = 0 }
  0044 = Call
    0042 = Add
      0041 = Declare
          0037 = Declare
              0001 = File
slot 0046 in 0044 << Boolean = BooleanCodeData { Value = False }
slot 0046 in 0044 <- Boolean : (3, 0009) = BooleanCodeData { Value = False }
identifier: 0050 = IdentifierCodeData { Name = b, Target = 0 }
  0048 = Return
    0038 FOUND: BracesCodeData { Lines = System.Int32[] } = 41
slot 0050 in 0048 <- Identifier = IdentifierCodeData { Name = b, Target = 41 }
identifier: 0054 = IdentifierCodeData { Name = a, Target = 0 }
  0053 = Assign
    0002 FOUND: BracesCodeData { Lines = System.Int32[] } = 51
slot 0054 in 0053 <- Identifier = IdentifierCodeData { Name = a, Target = 51 }
identifier: 0059 = IdentifierCodeData { Name = a, Target = 0 }
  0058 = Add
    0057 = Add
      0056 = Declare
        0002 FOUND: BracesCodeData { Lines = System.Int32[] } = 51
slot 0059 in 0058 <- Identifier = IdentifierCodeData { Name = a, Target = 51 }
identifier: 0060 = IdentifierCodeData { Name = func1, Target = 0 }
  0058 = Add
    0057 = Add
      0056 = Declare
        0002 FOUND: BracesCodeData { Lines = System.Int32[] } = 37
slot 0060 in 0058 <- Identifier = IdentifierCodeData { Name = func1, Target = 37 }
identifier: 0063 = IdentifierCodeData { Name = b, Target = 0 }
  0062 = Assign
    0002 FOUND: BracesCodeData { Lines = System.Int32[] } = 56
slot 0063 in 0062 <- Identifier = IdentifierCodeData { Name = b, Target = 56 }
identifier: 0065 = IdentifierCodeData { Name = b, Target = 0 }
  0064 = Add
    0062 = Assign
      0002 FOUND: BracesCodeData { Lines = System.Int32[] } = 56
slot 0065 in 0064 <- Identifier = IdentifierCodeData { Name = b, Target = 56 }
identifier: 0069 = IdentifierCodeData { Name = print, Target = 0 }
  0068 = Call
      0001 = File
slot 0069 in 0068 << Intrinsic = IntrinsicCodeData { Name = print }
slot 0093 in 0002 :: Type = TypeCodeData { Name = STRING }
slot 0094 in 0002 :: Type = FuncTypeCodeData { Name = print func, ReturnType = 93 }
slot 0069 in 0068 <- Intrinsic : (0, 0094) = IntrinsicCodeData { Name = print }
identifier: 0070 = IdentifierCodeData { Name = a, Target = 0 }
  0068 = Call
    0002 FOUND: BracesCodeData { Lines = System.Int32[] } = 51
slot 0070 in 0068 <- Identifier = IdentifierCodeData { Name = a, Target = 51 }
identifier: 0072 = IdentifierCodeData { Name = print, Target = 0 }
  0071 = Call
      0001 = File
slot 0072 in 0071 << Intrinsic = IntrinsicCodeData { Name = print }
slot 0072 in 0071 <- Intrinsic : (0, 0094) = IntrinsicCodeData { Name = print }
identifier: 0073 = IdentifierCodeData { Name = b, Target = 0 }
  0071 = Call
    0002 FOUND: BracesCodeData { Lines = System.Int32[] } = 56
slot 0073 in 0071 <- Identifier = IdentifierCodeData { Name = b, Target = 56 }
identifier: 0077 = IdentifierCodeData { Name = print, Target = 0 }
  0076 = Call
      0001 = File
slot 0077 in 0076 << Intrinsic = IntrinsicCodeData { Name = print }
slot 0077 in 0076 <- Intrinsic : (0, 0094) = IntrinsicCodeData { Name = print }
identifier: 0079 = IdentifierCodeData { Name = format, Target = 0 }
  0078 = Member
    0076 = Call
      0002 FOUND: BracesCodeData { Lines = System.Int32[] } = 74
slot 0079 in 0078 <- Identifier = IdentifierCodeData { Name = format, Target = 74 }
identifier: 0080 = IdentifierCodeData { Name = Length, Target = 0 }
  0078 = Member
    0076 = Call
        0001 = File
          0000 = ROOT
identifier: 0082 = IdentifierCodeData { Name = print, Target = 0 }
  0081 = Call
      0001 = File
slot 0082 in 0081 << Intrinsic = IntrinsicCodeData { Name = print }
slot 0082 in 0081 <- Intrinsic : (0, 0094) = IntrinsicCodeData { Name = print }
identifier: 0085 = IdentifierCodeData { Name = b, Target = 0 }
  0084 = Member
    0083 = Call
      0081 = Call
        0002 FOUND: BracesCodeData { Lines = System.Int32[] } = 56
slot 0085 in 0084 <- Identifier = IdentifierCodeData { Name = b, Target = 56 }
identifier: 0086 = IdentifierCodeData { Name = ToString, Target = 0 }
  0084 = Member
    0083 = Call
      0081 = Call
          0001 = File
            0000 = ROOT
identifier: 0087 = IdentifierCodeData { Name = format, Target = 0 }
  0083 = Call
    0081 = Call
      0002 FOUND: BracesCodeData { Lines = System.Int32[] } = 74
slot 0087 in 0083 <- Identifier = IdentifierCodeData { Name = format, Target = 74 }
identifier: 0090 = IdentifierCodeData { Name = print, Target = 0 }
  0089 = Call
      0001 = File
slot 0090 in 0089 << Intrinsic = IntrinsicCodeData { Name = print }
slot 0090 in 0089 <- Intrinsic : (0, 0094) = IntrinsicCodeData { Name = print }
=== Build: types ===
slot 0003 in 0002 <- Type : (0, 0003) = TypeCodeData { Name = TYPE }
enqueue 0003
slot 0004 in 0002 <- Type : (0, 0003) = TypeCodeData { Name = DYNAMIC }
enqueue 0004
slot 0005 in 0002 <- Type : (0, 0003) = TypeCodeData { Name = FUNC }
enqueue 0005
slot 0006 in 0002 <- Type : (0, 0003) = TypeCodeData { Name = DOTNET }
enqueue 0006
slot 0007 in 0002 <- Type : (0, 0003) = DotnetTypeCodeData { Name = VOID, Type = System.Void }
enqueue 0007
slot 0008 in 0002 <- Type : (0, 0003) = DotnetTypeCodeData { Name = INT, Type = System.Int32 }
enqueue 0008
slot 0009 in 0002 <- Type : (0, 0003) = DotnetTypeCodeData { Name = BOOL, Type = System.Boolean }
enqueue 0009
slot 0010 in 0002 <- Type : (0, 0003) = DotnetTypeCodeData { Name = STRING, Type = System.String }
enqueue 0010
slot 0015 in 0013 <- Parameter : (0, 0004) = ParameterCodeData { }
enqueue 0015
slot 0018 in 0016 <- Parameter : (0, 0004) = ParameterCodeData { }
enqueue 0018
add type 4 = DotnetTypeData { Type = System.Int32 }
slot 0025 in 0023 <- Integer : (4, 0008) = IntegerCodeData { Value = 0 }
enqueue 0025
slot 0036 in 0034 <- Integer : (4, 0008) = IntegerCodeData { Value = 9999 }
enqueue 0036
slot 0040 in 0039 <- Integer : (4, 0008) = IntegerCodeData { Value = 2 }
enqueue 0040
slot 0047 in 0044 <- Integer : (4, 0008) = IntegerCodeData { Value = 123 }
enqueue 0047
slot 0052 in 0051 <- Integer : (4, 0008) = IntegerCodeData { Value = 13 }
enqueue 0052
slot 0055 in 0053 <- Integer : (4, 0008) = IntegerCodeData { Value = 39 }
enqueue 0055
slot 0061 in 0057 <- Integer : (4, 0008) = IntegerCodeData { Value = 5 }
enqueue 0061
slot 0066 in 0064 <- Integer : (4, 0008) = IntegerCodeData { Value = 1 }
enqueue 0066
enqueue 0069
intrinsic: 0069 = CodeSlot { Parent = 68, CodeType = Intrinsic, Data = IntrinsicCodeData { Name = print }, TypeSlot = 0, TypeSlot2 = 94 }
enqueue 0072
intrinsic: 0072 = CodeSlot { Parent = 71, CodeType = Intrinsic, Data = IntrinsicCodeData { Name = print }, TypeSlot = 0, TypeSlot2 = 94 }
add type 5 = DotnetTypeData { Type = System.String }
slot 0075 in 0074 <- String : (5, 0010) = StringCodeData { Value = C }
enqueue 0075
enqueue 0077
intrinsic: 0077 = CodeSlot { Parent = 76, CodeType = Intrinsic, Data = IntrinsicCodeData { Name = print }, TypeSlot = 0, TypeSlot2 = 94 }
enqueue 0082
intrinsic: 0082 = CodeSlot { Parent = 81, CodeType = Intrinsic, Data = IntrinsicCodeData { Name = print }, TypeSlot = 0, TypeSlot2 = 94 }
enqueue 0090
intrinsic: 0090 = CodeSlot { Parent = 89, CodeType = Intrinsic, Data = IntrinsicCodeData { Name = print }, TypeSlot = 0, TypeSlot2 = 94 }
slot 0091 in 0089 <- String : (5, 0010) = StringCodeData { Value = unreachable }
enqueue 0091
enqueue 0092
slot 0093 in 0002 <- Type : (0, 0003) = TypeCodeData { Name = STRING }
enqueue 0093
slot 0094 in 0002 <- Type : (0, 0003) = FuncTypeCodeData { Name = print func, ReturnType = 93 }
enqueue 0094
dequeue: 0003
dequeue: 0004
dequeue: 0005
dequeue: 0006
dequeue: 0007
dequeue: 0008
slot 0017 in 0016 <- Identifier : (0, 0003) = IdentifierCodeData { Name = int, Target = 8 }
dequeue: 0009
slot 0014 in 0013 <- Identifier : (0, 0003) = IdentifierCodeData { Name = bool, Target = 9 }
dequeue: 0010
dequeue: 0015
dequeue: 0018
dequeue: 0025
slot 0023 return: type <- DotnetTypeData { Type = System.Int32 } 4 via 0025 0008x
slot 0023 in 0022 <- Return : (4, 0008) = ReturnCodeData { Value = 25, Function = 22 }
dequeue: 0036
slot 0034 return: type <- DotnetTypeData { Type = System.Int32 } 4 via 0036 0008x
slot 0034 in 0012 <- Return : (4, 0008) = ReturnCodeData { Value = 36, Function = 12 }
dequeue: 0040
slot 0039 in 0038 <- Declare : (0, 0008) = DeclareCodeData { Name = a, IsStatic = False, Type = 0, Value = 40 }
slot 0039 declare: NEW TYPE <- 8
dequeue: 0047
dequeue: 0052
slot 0051 in 0002 <- Declare : (0, 0008) = DeclareCodeData { Name = a, IsStatic = False, Type = 0, Value = 52 }
slot 0051 declare: NEW TYPE <- 8
dequeue: 0055
slot 0053 assign: type <- CodeSlot { Parent = 2, CodeType = Type, Data = DotnetTypeCodeData { Name = INT, Type = System.Int32 }, TypeSlot = 0, TypeSlot2 = 3 } 4 via 0055
slot 0053 in 0002 <- Assign : (0, 0008) = AssignCodeData { Target = 54, Value = 55 }
dequeue: 0061
dequeue: 0066
slot 0067 negation: type <- CodeSlot { Parent = 2, CodeType = Type, Data = DotnetTypeCodeData { Name = INT, Type = System.Int32 }, TypeSlot = 0, TypeSlot2 = 3 } 4 via 0066
slot 0067 in 0064 <- Negation : (0, 0008) = NegationCodeData { Value = 66 }
dequeue: 0069
dequeue: 0072
dequeue: 0075
slot 0074 in 0002 <- Declare : (0, 0010) = DeclareCodeData { Name = format, IsStatic = True, Type = 0, Value = 75 }
slot 0074 declare: NEW TYPE <- 10
dequeue: 0077
dequeue: 0082
dequeue: 0090
DOTNET_SLOT3: 89 -< CodeSlot { Parent = 2, CodeType = Type, Data = FuncTypeCodeData { Name = print func, ReturnType = 93 }, TypeSlot = 0, TypeSlot2 = 3 }
DOTNET_SLOT2: 89 -< CodeSlot { Parent = 89, CodeType = Intrinsic, Data = IntrinsicCodeData { Name = print }, TypeSlot = 0, TypeSlot2 = 94 } -< 93
slot 0089 in 0002 <- Call : (0, 0093) = CallCodeData { Target = 90, Args = System.Int32[], DotnetMethod =  }
dequeue: 0091
dequeue: 0092
dequeue: 0093
dequeue: 0094
dequeue: 0017
slot 0016 in 0012 <- Declare : (0, 0008) = DeclareCodeData { Name = num, IsStatic = True, Type = 17, Value = 18 }
dequeue: 0014
slot 0013 in 0012 <- Declare : (0, 0009) = DeclareCodeData { Name = cond, IsStatic = True, Type = 14, Value = 15 }
dequeue: 0023
add type 6 = FunctionTypeData { ReturnType = 4, ReturnType2 = 8 }
slot 0095 in 0002 :: Type = FuncTypeCodeData { Name = FUNC -> 8, ReturnType = 8 }
slot 0095 in 0002 <- Type : (0, 0003) = FuncTypeCodeData { Name = FUNC -> 8, ReturnType = 8 }
slot 0022 braces: found return 0023 (6, 0095)
slot 0022 in 0019 <- Braces : (6, 0095) = BracesCodeData { Lines = System.Int32[] }
dequeue: 0034
slot 0012 braces: found return 0034 (6, 0095)
slot 0012 in 0011 <- Braces : (6, 0095) = BracesCodeData { Lines = System.Int32[] }
dequeue: 0039
slot 0043 in 0042 <- Identifier : (0, 0008) = IdentifierCodeData { Name = a, Target = 39 }
dequeue: 0051
slot 0054 in 0053 <- Identifier : (0, 0008) = IdentifierCodeData { Name = a, Target = 51 }
slot 0059 in 0058 <- Identifier : (0, 0008) = IdentifierCodeData { Name = a, Target = 51 }
slot 0070 in 0068 <- Identifier : (0, 0008) = IdentifierCodeData { Name = a, Target = 51 }
dequeue: 0053
dequeue: 0067
dequeue: 0074
slot 0079 in 0078 <- Identifier : (0, 0010) = IdentifierCodeData { Name = format, Target = 74 }
slot 0087 in 0083 <- Identifier : (0, 0010) = IdentifierCodeData { Name = format, Target = 74 }
dequeue: 0089
dequeue: 0016
slot 0033 in 0031 <- Identifier : (0, 0008) = IdentifierCodeData { Name = num, Target = 16 }
dequeue: 0013
slot 0028 in 0026 <- Identifier : (0, 0009) = IdentifierCodeData { Name = cond, Target = 13 }
dequeue: 0022
slot 0019 if: type <- FunctionTypeData { ReturnType = 4, ReturnType2 = 8 } via 0021
slot 0019 in 0012 <- If : (6, -0013) = IfSlotCodeData { Condition = 21, Body = 22 }
dequeue: 0012
slot 0011 in 0002 <- Declare : (0, 0095) = DeclareCodeData { Name = func2, IsStatic = True, Type = 0, Value = 12 }
slot 0011 declare: NEW TYPE <- 95
dequeue: 0043
dequeue: 0054
dequeue: 0059
dequeue: 0070
DOTNET_SLOT3: 68 -< CodeSlot { Parent = 2, CodeType = Type, Data = FuncTypeCodeData { Name = print func, ReturnType = 93 }, TypeSlot = 0, TypeSlot2 = 3 }
DOTNET_SLOT2: 68 -< CodeSlot { Parent = 68, CodeType = Identifier, Data = IdentifierCodeData { Name = a, Target = 51 }, TypeSlot = 0, TypeSlot2 = 8 } -< 93
slot 0068 in 0002 <- Call : (0, 0093) = CallCodeData { Target = 69, Args = System.Int32[], DotnetMethod =  }
dequeue: 0079
slot 0096 in 0002 :: Type = DotnetMemberTypeCodeData { Name = TODO_NAME_MEMBER_THING, TargetType = 0, MemberName = Length, MemberType = Property, Members = System.Reflection.MemberInfo[] }
slot 0078 in 0076 <- Member : (0, 0096) = MemberCodeData { Target = 79, Member = 80 }
slot 0080 in 0078 <- Identifier : (0, 0096) = IdentifierCodeData { Name = Length, Target = 0 }
dequeue: 0087
dequeue: 0033
slot 0031 return: type <- UnknownTypeData { } 0 via 0033 0008x
slot 0031 in 0030 <- Return : (0, 0008) = ReturnCodeData { Value = 33, Function = 30 }
dequeue: 0028
slot 0029 not: type <- UnknownTypeData { } 0 via 0028
slot 0029 in 0026 <- LogicalNegation : (0, -0013) = LogicalNegationCodeData { Value = 28 }
dequeue: 0019
dequeue: 0011
slot 0045 in 0044 <- Identifier : (0, 0095) = IdentifierCodeData { Name = func2, Target = 11 }
dequeue: 0068
dequeue: 0078
DOTNET_SLOT3: 76 -< CodeSlot { Parent = 2, CodeType = Type, Data = FuncTypeCodeData { Name = print func, ReturnType = 93 }, TypeSlot = 0, TypeSlot2 = 3 }
DOTNET_SLOT2: 76 -< CodeSlot { Parent = 76, CodeType = Member, Data = MemberCodeData { Target = 79, Member = 80 }, TypeSlot = 0, TypeSlot2 = 96 } -< 93
slot 0076 in 0002 <- Call : (0, 0093) = CallCodeData { Target = 77, Args = System.Int32[], DotnetMethod =  }
dequeue: 0080
dequeue: 0031
add type 7 = FunctionTypeData { ReturnType = 0, ReturnType2 = 8 }
slot 0030 braces: found return 0031 (7, 0095)
slot 0030 in 0026 <- Braces : (7, 0095) = BracesCodeData { Lines = System.Int32[] }
dequeue: 0029
dequeue: 0045
DOTNET_SLOT3: 44 -< CodeSlot { Parent = 2, CodeType = Type, Data = FuncTypeCodeData { Name = FUNC -> 8, ReturnType = 8 }, TypeSlot = 0, TypeSlot2 = 3 }
DOTNET_SLOT2: 44 -< CodeSlot { Parent = 44, CodeType = Identifier, Data = IdentifierCodeData { Name = func2, Target = 11 }, TypeSlot = 0, TypeSlot2 = 95 } -< 8
slot 0044 in 0042 <- Call : (0, 0008) = CallCodeData { Target = 45, Args = System.Int32[], DotnetMethod =  }
dequeue: 0076
dequeue: 0030
dequeue: 0044
slot 0042 in 0041 <- Add : (0, 0008) = AddOpCodeData { Left = 43, Right = 44 }
dequeue: 0042
slot 0041 in 0038 <- Declare : (0, 0008) = DeclareCodeData { Name = b, IsStatic = False, Type = 0, Value = 42 }
slot 0041 declare: NEW TYPE <- 8
dequeue: 0041
slot 0050 in 0048 <- Identifier : (0, 0008) = IdentifierCodeData { Name = b, Target = 41 }
dequeue: 0050
slot 0048 return: type <- UnknownTypeData { } 0 via 0050 0008x
slot 0048 in 0038 <- Return : (0, 0008) = ReturnCodeData { Value = 50, Function = 38 }
dequeue: 0048
slot 0038 braces: found return 0048 (7, 0095)
slot 0038 in 0037 <- Braces : (7, 0095) = BracesCodeData { Lines = System.Int32[] }
dequeue: 0038
slot 0037 in 0002 <- Declare : (0, 0095) = DeclareCodeData { Name = func1, IsStatic = True, Type = 0, Value = 38 }
slot 0037 declare: NEW TYPE <- 95
dequeue: 0037
slot 0097 in 0060 :: Identifier = IdentifierCodeData { Name = func1, Target = 37 }
slot 0097 in 0060 <- Identifier : (0, 0095) = IdentifierCodeData { Name = func1, Target = 37 }
slot 0060 in 0058 << Call = CallCodeData { Target = 97, Args = System.Int32[], DotnetMethod =  }
dequeue: 0097
DOTNET_SLOT3: 60 -< CodeSlot { Parent = 2, CodeType = Type, Data = FuncTypeCodeData { Name = FUNC -> 8, ReturnType = 8 }, TypeSlot = 0, TypeSlot2 = 3 }
DOTNET_SLOT2: 60 -< CodeSlot { Parent = 60, CodeType = Identifier, Data = IdentifierCodeData { Name = func1, Target = 37 }, TypeSlot = 0, TypeSlot2 = 95 } -< 8
slot 0060 in 0058 <- Call : (0, 0008) = CallCodeData { Target = 97, Args = System.Int32[], DotnetMethod =  }
dequeue: 0060
slot 0058 in 0057 <- Add : (0, 0008) = AddOpCodeData { Left = 59, Right = 60 }
dequeue: 0060
dequeue: 0058
slot 0057 in 0056 <- Add : (0, 0008) = AddOpCodeData { Left = 58, Right = 61 }
dequeue: 0057
slot 0056 in 0002 <- Declare : (0, 0008) = DeclareCodeData { Name = b, IsStatic = False, Type = 0, Value = 57 }
slot 0056 declare: NEW TYPE <- 8
dequeue: 0056
slot 0063 in 0062 <- Identifier : (0, 0008) = IdentifierCodeData { Name = b, Target = 56 }
slot 0065 in 0064 <- Identifier : (0, 0008) = IdentifierCodeData { Name = b, Target = 56 }
slot 0073 in 0071 <- Identifier : (0, 0008) = IdentifierCodeData { Name = b, Target = 56 }
slot 0085 in 0084 <- Identifier : (0, 0008) = IdentifierCodeData { Name = b, Target = 56 }
dequeue: 0063
dequeue: 0065
slot 0064 in 0062 <- Add : (0, 0008) = AddOpCodeData { Left = 65, Right = 67 }
dequeue: 0073
DOTNET_SLOT3: 71 -< CodeSlot { Parent = 2, CodeType = Type, Data = FuncTypeCodeData { Name = print func, ReturnType = 93 }, TypeSlot = 0, TypeSlot2 = 3 }
DOTNET_SLOT2: 71 -< CodeSlot { Parent = 71, CodeType = Identifier, Data = IdentifierCodeData { Name = b, Target = 56 }, TypeSlot = 0, TypeSlot2 = 8 } -< 93
slot 0071 in 0002 <- Call : (0, 0093) = CallCodeData { Target = 72, Args = System.Int32[], DotnetMethod =  }
dequeue: 0085
slot 0098 in 0002 :: Type = DotnetMemberTypeCodeData { Name = TODO_NAME_MEMBER_THING, TargetType = 0, MemberName = ToString, MemberType = Method, Members = System.Reflection.MemberInfo[] }
slot 0084 in 0083 <- Member : (0, 0098) = MemberCodeData { Target = 85, Member = 86 }
slot 0086 in 0084 <- Identifier : (0, 0098) = IdentifierCodeData { Name = ToString, Target = 0 }
dequeue: 0064
slot 0062 assign: type <- CodeSlot { Parent = 2, CodeType = Type, Data = DotnetTypeCodeData { Name = INT, Type = System.Int32 }, TypeSlot = 0, TypeSlot2 = 3 } 0 via 0064
slot 0062 in 0002 <- Assign : (0, 0008) = AssignCodeData { Target = 63, Value = 64 }
dequeue: 0071
dequeue: 0084
DOTNET_SLOT3: 83 -< CodeSlot { Parent = 2, CodeType = Type, Data = DotnetMemberTypeCodeData { Name = TODO_NAME_MEMBER_THING, TargetType = 0, MemberName = ToString, MemberType = Method, Members = System.Reflection.MemberInfo[] }, TypeSlot = 0, TypeSlot2 = 0 }
DOTNET_SLOT1
slot 0083 in 0081 <- Call = CallCodeData { Target = 84, Args = System.Int32[], DotnetMethod = System.String ToString(System.String) }
slot 0083 in 0081 <- Call : (0, 0006) = CallCodeData { Target = 84, Args = System.Int32[], DotnetMethod = System.String ToString(System.String) }
dequeue: 0086
dequeue: 0062
dequeue: 0083
DOTNET_SLOT3: 81 -< CodeSlot { Parent = 2, CodeType = Type, Data = FuncTypeCodeData { Name = print func, ReturnType = 93 }, TypeSlot = 0, TypeSlot2 = 3 }
DOTNET_SLOT2: 81 -< CodeSlot { Parent = 81, CodeType = Call, Data = CallCodeData { Target = 84, Args = System.Int32[], DotnetMethod = System.String ToString(System.String) }, TypeSlot = 0, TypeSlot2 = 6 } -< 93
slot 0081 in 0002 <- Call : (0, 0093) = CallCodeData { Target = 82, Args = System.Int32[], DotnetMethod =  }
dequeue: 0081
done after 84 iterations
=== Tree ===
0001: file (NEWTYPE: 0000 -> ?!?!?!?!?)
0002:   braces (NEWTYPE: 0000 -> ?!?!?!?!?)
0011:     static func2 (NEWTYPE: 0095 -> FUNC -> 8)
            value
0012:         braces (NEWTYPE: 0095 -> FUNC -> 8)
0013:           static cond (NEWTYPE: 0009 -> BOOL)
                  type
0014:               id: name = bool (NEWTYPE: 0003 -> TYPE) -> 0009
                  value
0015:               parameter (NEWTYPE: 0004 -> DYNAMIC)
0016:           static num (NEWTYPE: 0008 -> INT)
                  type
0017:               id: name = int (NEWTYPE: 0003 -> TYPE) -> 0008
                  value
0018:               parameter (NEWTYPE: 0004 -> DYNAMIC)
0019:           if (function -> dotnet -> System.Int32)
0021:             boolean=False (NEWTYPE: 0009 -> BOOL)
0022:             braces (NEWTYPE: 0095 -> FUNC -> 8)
0023:               return (NEWTYPE: 0008 -> INT) -> 0022
0025:                 integer=0 (NEWTYPE: 0008 -> INT)
0026:           if (NEWTYPE: 0000 -> ?!?!?!?!?)
0029:             not (unknown)
0028:               id: name = cond (NEWTYPE: 0009 -> BOOL) -> 0013
0030:             braces (NEWTYPE: 0095 -> FUNC -> 8)
0031:               return (NEWTYPE: 0008 -> INT) -> 0030
0033:                 id: name = num (NEWTYPE: 0008 -> INT) -> 0016
0034:           return (NEWTYPE: 0008 -> INT) -> 0012
0036:             integer=9999 (NEWTYPE: 0008 -> INT)
0037:     static func1 (NEWTYPE: 0095 -> FUNC -> 8)
            value
0038:         braces (NEWTYPE: 0095 -> FUNC -> 8)
0039:           declare a (NEWTYPE: 0008 -> INT)
                  value
0040:               integer=2 (NEWTYPE: 0008 -> INT)
0041:           declare b (NEWTYPE: 0008 -> INT)
                  value
0042:               add (NEWTYPE: 0008 -> INT)
0043:                 id: name = a (NEWTYPE: 0008 -> INT) -> 0039
0044:                 call (NEWTYPE: 0008 -> INT)
0045:                   id: name = func2 (NEWTYPE: 0095 -> FUNC -> 8) -> 0011
0046:                   boolean=False (NEWTYPE: 0009 -> BOOL)
0047:                   integer=123 (NEWTYPE: 0008 -> INT)
0048:           return (NEWTYPE: 0008 -> INT) -> 0038
0050:             id: name = b (NEWTYPE: 0008 -> INT) -> 0041
0051:     declare a (NEWTYPE: 0008 -> INT)
            value
0052:         integer=13 (NEWTYPE: 0008 -> INT)
0053:     assign (NEWTYPE: 0008 -> INT)
0054:       id: name = a (NEWTYPE: 0008 -> INT) -> 0051
0055:       integer=39 (NEWTYPE: 0008 -> INT)
0056:     declare b (NEWTYPE: 0008 -> INT)
            value
0057:         add (NEWTYPE: 0008 -> INT)
0058:           add (NEWTYPE: 0008 -> INT)
0059:             id: name = a (NEWTYPE: 0008 -> INT) -> 0051
0060:             call (NEWTYPE: 0008 -> INT)
0097:               id: name = func1 (NEWTYPE: 0095 -> FUNC -> 8) -> 0037
0061:           integer=5 (NEWTYPE: 0008 -> INT)
0062:     assign (NEWTYPE: 0008 -> INT)
0063:       id: name = b (NEWTYPE: 0008 -> INT) -> 0056
0064:       add (NEWTYPE: 0008 -> INT)
0065:         id: name = b (NEWTYPE: 0008 -> INT) -> 0056
0067:         negate (NEWTYPE: 0008 -> INT)
0066:           integer=1 (NEWTYPE: 0008 -> INT)
0068:     call (NEWTYPE: 0093 -> STRING)
0069:       intrinsic: name = print (NEWTYPE: 0094 -> print func)
0070:       id: name = a (NEWTYPE: 0008 -> INT) -> 0051
0071:     call (NEWTYPE: 0093 -> STRING)
0072:       intrinsic: name = print (NEWTYPE: 0094 -> print func)
0073:       id: name = b (NEWTYPE: 0008 -> INT) -> 0056
0074:     static format (NEWTYPE: 0010 -> STRING)
            value
0075:         string="C" (NEWTYPE: 0010 -> STRING)
0076:     call (NEWTYPE: 0093 -> STRING)
0077:       intrinsic: name = print (NEWTYPE: 0094 -> print func)
0078:       member (NEWTYPE: 0096 -> TODO_NAME_MEMBER_THING)
0079:         id: name = format (NEWTYPE: 0010 -> STRING) -> 0074
0080:         id: name = Length (NEWTYPE: 0096 -> TODO_NAME_MEMBER_THING)
0081:     call (NEWTYPE: 0093 -> STRING)
0082:       intrinsic: name = print (NEWTYPE: 0094 -> print func)
0083:       call-dotnet { System.String ToString(System.String) } (NEWTYPE: 0006 -> DOTNET)
0084:         member (NEWTYPE: 0098 -> TODO_NAME_MEMBER_THING)
0085:           id: name = b (NEWTYPE: 0008 -> INT) -> 0056
0086:           id: name = ToString (NEWTYPE: 0098 -> TODO_NAME_MEMBER_THING)
0087:         id: name = format (NEWTYPE: 0010 -> STRING) -> 0074
0088:     return (NEWTYPE: 0007 -> VOID) -> 0002
0092:       void (NEWTYPE: 0007 -> VOID)
0089:     call (NEWTYPE: 0093 -> STRING)
0090:       intrinsic: name = print (NEWTYPE: 0094 -> print func)
0091:       string="unreachable" (NEWTYPE: 0010 -> STRING)

Analyze Types:
0000 :: unknown
0001 :: void
0002 :: function -> void
0003 :: dotnet -> System.Boolean
0004 :: dotnet -> System.Int32
0005 :: dotnet -> System.String
0006 :: function -> dotnet -> System.Int32
0007 :: function -> unknown

Analyze Types2:
0003 0002: CodeSlot { Parent = 2, CodeType = Type, Data = TypeCodeData { Name = TYPE }, TypeSlot = 0, TypeSlot2 = 3 }
0004 0002: CodeSlot { Parent = 2, CodeType = Type, Data = TypeCodeData { Name = DYNAMIC }, TypeSlot = 0, TypeSlot2 = 3 }
0005 0002: CodeSlot { Parent = 2, CodeType = Type, Data = TypeCodeData { Name = FUNC }, TypeSlot = 0, TypeSlot2 = 3 }
0006 0002: CodeSlot { Parent = 2, CodeType = Type, Data = TypeCodeData { Name = DOTNET }, TypeSlot = 0, TypeSlot2 = 3 }
0007 0002: CodeSlot { Parent = 2, CodeType = Type, Data = DotnetTypeCodeData { Name = VOID, Type = System.Void }, TypeSlot = 0, TypeSlot2 = 3 }
0008 0002: CodeSlot { Parent = 2, CodeType = Type, Data = DotnetTypeCodeData { Name = INT, Type = System.Int32 }, TypeSlot = 0, TypeSlot2 = 3 }
0009 0002: CodeSlot { Parent = 2, CodeType = Type, Data = DotnetTypeCodeData { Name = BOOL, Type = System.Boolean }, TypeSlot = 0, TypeSlot2 = 3 }
0010 0002: CodeSlot { Parent = 2, CodeType = Type, Data = DotnetTypeCodeData { Name = STRING, Type = System.String }, TypeSlot = 0, TypeSlot2 = 3 }
0093 0002: CodeSlot { Parent = 2, CodeType = Type, Data = TypeCodeData { Name = STRING }, TypeSlot = 0, TypeSlot2 = 3 }
0094 0002: CodeSlot { Parent = 2, CodeType = Type, Data = FuncTypeCodeData { Name = print func, ReturnType = 93 }, TypeSlot = 0, TypeSlot2 = 3 }
0095 0002: CodeSlot { Parent = 2, CodeType = Type, Data = FuncTypeCodeData { Name = FUNC -> 8, ReturnType = 8 }, TypeSlot = 0, TypeSlot2 = 3 }
0096 0002: CodeSlot { Parent = 2, CodeType = Type, Data = DotnetMemberTypeCodeData { Name = TODO_NAME_MEMBER_THING, TargetType = 0, MemberName = Length, MemberType = Property, Members = System.Reflection.MemberInfo[] }, TypeSlot = 0, TypeSlot2 = 0 }
0098 0002: CodeSlot { Parent = 2, CodeType = Type, Data = DotnetMemberTypeCodeData { Name = TODO_NAME_MEMBER_THING, TargetType = 0, MemberName = ToString, MemberType = Method, Members = System.Reflection.MemberInfo[] }, TypeSlot = 0, TypeSlot2 = 0 }

Output:
39
168
1
$168.00

Stats:
-   Start: 0.0s
-    Read: 0.0s
-     Lex: 0.0s
-   Parse: 0.0s
- Analyze: 0.0s
-    Eval: 0.0s
-   Print: 0.0s
-  Output: 0.0s

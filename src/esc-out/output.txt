
Lex:
0000: 0 + 5 -- (1, 1) -- Identifier -- func2
0001: 5 + 1 -- (1, 6) -- Spaces -- " "
0002: 6 + 1 -- (1, 7) -- Colon -- :
0003: 7 + 1 -- (1, 8) -- Equals -- =
0004: 8 + 1 -- (1, 9) -- Spaces -- " "
0005: 9 + 1 -- (1, 10) -- BraceOpen -- {
0006: 10 + 1 -- (1, 11) -- EndOfLine -- \n
0007: 11 + 4 -- (2, 1) -- Spaces -- "    "
0008: 15 + 2 -- (2, 5) -- Identifier -- if
0009: 17 + 1 -- (2, 7) -- Spaces -- " "
0010: 18 + 5 -- (2, 8) -- Identifier -- false
0011: 23 + 1 -- (2, 13) -- Spaces -- " "
0012: 24 + 1 -- (2, 14) -- BraceOpen -- {
0013: 25 + 1 -- (2, 15) -- EndOfLine -- \n
0014: 26 + 8 -- (3, 1) -- Spaces -- "        "
0015: 34 + 6 -- (3, 9) -- Identifier -- return
0016: 40 + 1 -- (3, 15) -- Spaces -- " "
0017: 41 + 1 -- (3, 16) -- Number -- 0
0018: 42 + 1 -- (3, 17) -- EndOfLine -- \n
0019: 43 + 4 -- (4, 1) -- Spaces -- "    "
0020: 47 + 1 -- (4, 5) -- BraceClose -- }
0021: 48 + 1 -- (4, 6) -- EndOfLine -- \n
0022: 49 + 4 -- (5, 1) -- Spaces -- "    "
0023: 53 + 4 -- (5, 5) -- Identifier -- cond
0024: 57 + 1 -- (5, 9) -- Spaces -- " "
0025: 58 + 1 -- (5, 10) -- Colon -- :
0026: 59 + 1 -- (5, 11) -- Colon -- :
0027: 60 + 1 -- (5, 12) -- Spaces -- " "
0028: 61 + 1 -- (5, 13) -- Exclamation -- !
0029: 62 + 5 -- (5, 14) -- Identifier -- false
0030: 67 + 1 -- (5, 19) -- EndOfLine -- \n
0031: 68 + 4 -- (6, 1) -- Spaces -- "    "
0032: 72 + 2 -- (6, 5) -- Identifier -- if
0033: 74 + 1 -- (6, 7) -- Spaces -- " "
0034: 75 + 4 -- (6, 8) -- Identifier -- cond
0035: 79 + 1 -- (6, 12) -- Spaces -- " "
0036: 80 + 1 -- (6, 13) -- BraceOpen -- {
0037: 81 + 1 -- (6, 14) -- EndOfLine -- \n
0038: 82 + 8 -- (7, 1) -- Spaces -- "        "
0039: 90 + 6 -- (7, 9) -- Identifier -- return
0040: 96 + 1 -- (7, 15) -- Spaces -- " "
0041: 97 + 3 -- (7, 16) -- Number -- 100
0042: 100 + 1 -- (7, 19) -- EndOfLine -- \n
0043: 101 + 4 -- (8, 1) -- Spaces -- "    "
0044: 105 + 1 -- (8, 5) -- BraceClose -- }
0045: 106 + 1 -- (8, 6) -- EndOfLine -- \n
0046: 107 + 4 -- (9, 1) -- Spaces -- "    "
0047: 111 + 6 -- (9, 5) -- Identifier -- return
0048: 117 + 1 -- (9, 11) -- Spaces -- " "
0049: 118 + 4 -- (9, 12) -- Number -- 9999
0050: 122 + 1 -- (9, 16) -- Spaces -- " "
0051: 123 + 14 -- (9, 17) -- Comment -- // unreachable
0052: 137 + 1 -- (9, 31) -- EndOfLine -- \n
0053: 138 + 1 -- (10, 1) -- BraceClose -- }
0054: 139 + 1 -- (10, 2) -- EndOfLine -- \n
0055: 140 + 4 -- (11, 1) -- Identifier -- func
0056: 144 + 1 -- (11, 5) -- Spaces -- " "
0057: 145 + 1 -- (11, 6) -- Colon -- :
0058: 146 + 1 -- (11, 7) -- Equals -- =
0059: 147 + 1 -- (11, 8) -- Spaces -- " "
0060: 148 + 1 -- (11, 9) -- BraceOpen -- {
0061: 149 + 1 -- (11, 10) -- EndOfLine -- \n
0062: 150 + 4 -- (12, 1) -- Spaces -- "    "
0063: 154 + 1 -- (12, 5) -- Identifier -- a
0064: 155 + 1 -- (12, 6) -- Spaces -- " "
0065: 156 + 1 -- (12, 7) -- Colon -- :
0066: 157 + 1 -- (12, 8) -- Equals -- =
0067: 158 + 1 -- (12, 9) -- Spaces -- " "
0068: 159 + 1 -- (12, 10) -- Number -- 2
0069: 160 + 1 -- (12, 11) -- EndOfLine -- \n
0070: 161 + 4 -- (13, 1) -- Spaces -- "    "
0071: 165 + 1 -- (13, 5) -- Identifier -- b
0072: 166 + 1 -- (13, 6) -- Spaces -- " "
0073: 167 + 1 -- (13, 7) -- Colon -- :
0074: 168 + 1 -- (13, 8) -- Equals -- =
0075: 169 + 1 -- (13, 9) -- Spaces -- " "
0076: 170 + 1 -- (13, 10) -- Identifier -- a
0077: 171 + 1 -- (13, 11) -- Spaces -- " "
0078: 172 + 1 -- (13, 12) -- Plus -- +
0079: 173 + 1 -- (13, 13) -- Spaces -- " "
0080: 174 + 5 -- (13, 14) -- Identifier -- func2
0081: 179 + 1 -- (13, 19) -- EndOfLine -- \n
0082: 180 + 4 -- (14, 1) -- Spaces -- "    "
0083: 184 + 6 -- (14, 5) -- Identifier -- return
0084: 190 + 1 -- (14, 11) -- Spaces -- " "
0085: 191 + 1 -- (14, 12) -- Identifier -- b
0086: 192 + 1 -- (14, 13) -- EndOfLine -- \n
0087: 193 + 1 -- (15, 1) -- BraceClose -- }
0088: 194 + 1 -- (15, 2) -- EndOfLine -- \n
0089: 195 + 1 -- (16, 1) -- Identifier -- a
0090: 196 + 1 -- (16, 2) -- Spaces -- " "
0091: 197 + 1 -- (16, 3) -- Colon -- :
0092: 198 + 1 -- (16, 4) -- Equals -- =
0093: 199 + 1 -- (16, 5) -- Spaces -- " "
0094: 200 + 2 -- (16, 6) -- Number -- 13
0095: 202 + 1 -- (16, 8) -- EndOfLine -- \n
0096: 203 + 1 -- (17, 1) -- Identifier -- a
0097: 204 + 1 -- (17, 2) -- Spaces -- " "
0098: 205 + 1 -- (17, 3) -- Equals -- =
0099: 206 + 1 -- (17, 4) -- Spaces -- " "
0100: 207 + 2 -- (17, 5) -- Number -- 39
0101: 209 + 1 -- (17, 7) -- EndOfLine -- \n
0102: 210 + 1 -- (18, 1) -- Identifier -- b
0103: 211 + 1 -- (18, 2) -- Spaces -- " "
0104: 212 + 1 -- (18, 3) -- Colon -- :
0105: 213 + 1 -- (18, 4) -- Equals -- =
0106: 214 + 1 -- (18, 5) -- Spaces -- " "
0107: 215 + 1 -- (18, 6) -- Identifier -- a
0108: 216 + 1 -- (18, 7) -- Spaces -- " "
0109: 217 + 1 -- (18, 8) -- Plus -- +
0110: 218 + 1 -- (18, 9) -- Spaces -- " "
0111: 219 + 4 -- (18, 10) -- Identifier -- func
0112: 223 + 1 -- (18, 14) -- Spaces -- " "
0113: 224 + 1 -- (18, 15) -- Plus -- +
0114: 225 + 1 -- (18, 16) -- Spaces -- " "
0115: 226 + 1 -- (18, 17) -- Number -- 5
0116: 227 + 1 -- (18, 18) -- EndOfLine -- \n
0117: 228 + 5 -- (19, 1) -- Identifier -- print
0118: 233 + 1 -- (19, 6) -- Spaces -- " "
0119: 234 + 1 -- (19, 7) -- Identifier -- a
0120: 235 + 1 -- (19, 8) -- EndOfLine -- \n
0121: 236 + 5 -- (20, 1) -- Identifier -- print
0122: 241 + 1 -- (20, 6) -- Spaces -- " "
0123: 242 + 1 -- (20, 7) -- Identifier -- b
0124: 243 + 1 -- (20, 8) -- EndOfLine -- \n
0125: 244 + 5 -- (21, 1) -- Identifier -- print
0126: 249 + 1 -- (21, 6) -- Spaces -- " "
0127: 250 + 1 -- (21, 7) -- ParenOpen -- (
0128: 251 + 1 -- (21, 8) -- Identifier -- b
0129: 252 + 1 -- (21, 9) -- Period -- .
0130: 253 + 8 -- (21, 10) -- Identifier -- ToString
0131: 261 + 1 -- (21, 18) -- Spaces -- " "
0132: 262 + 3 -- (21, 19) -- LiteralString -- "C"
0133: 265 + 1 -- (21, 22) -- ParenClose -- )
0134: 266 + 1 -- (21, 23) -- Spaces -- " "
0135: 267 + 13 -- (21, 24) -- Comment -- // C=currency
0136: 280 + 1 -- (21, 37) -- EndOfLine -- \n
0137: 281 + 0 -- (22, 1) -- EndOfFile -- <EOF>

Parse:
line
  declare-assign
    id
      identifier: func2
    value
      braces
        line
          call
            target
              identifier: if
            arguments
              identifier: false
              braces
                line
                  call
                    target
                      identifier: return
                    arguments
                      0
        line
          declare-static
            id
              identifier: cond
            value
              not
                identifier: false
        line
          call
            target
              identifier: if
            arguments
              identifier: cond
              braces
                line
                  call
                    target
                      identifier: return
                    arguments
                      100
        line
          call
            target
              identifier: return
            arguments
              9999
line
  declare-assign
    id
      identifier: func
    value
      braces
        line
          declare-assign
            id
              identifier: a
            value
              2
        line
          declare-assign
            id
              identifier: b
            value
              plus
                identifier: a
                identifier: func2
        line
          call
            target
              identifier: return
            arguments
              identifier: b
line
  declare-assign
    id
      identifier: a
    value
      13
line
  assign
    identifier: a
    39
line
  declare-assign
    id
      identifier: b
    value
      plus
        plus
          identifier: a
          identifier: func
        5
line
  call
    target
      identifier: print
    arguments
      identifier: a
line
  call
    target
      identifier: print
    arguments
      identifier: b
line
  call
    target
      identifier: print
    arguments
      call
        target
          member
            identifier: b
            identifier: ToString
        arguments
          "C"

Analyze:
main procedure
    scope
    declare: func2 = (FunctionScopeExpression)
      func scope
        scope
          if
            condition
              bool: False
            block
              func scope
                scope
                  return: IntLiteralExpression { Type = System.Int32, Value = 0 } (IntLiteralExpression)
          declare: cond = (LogicalNegationExpression)
            not
              bool: False
          if
            condition
              identifier: cond (System.Boolean)
            block
              func scope
                scope
                  return: IntLiteralExpression { Type = System.Int32, Value = 100 } (IntLiteralExpression)
          return: IntLiteralExpression { Type = System.Int32, Value = 9999 } (IntLiteralExpression)
    declare: func = (FunctionScopeExpression)
      func scope
        scope
          declare: a = (IntLiteralExpression)
            int: 2
          declare: b = (AddExpression)
            add
              identifier: a (System.Int32)
              identifier: func2 (System.Int32)
          return: IdentifierExpression { Type = System.Int32, Identifier = b } (IdentifierExpression)
    declare: a = (IntLiteralExpression)
      int: 13
    expression
      assign
        identifier: a (System.Int32)
        int: 39
    declare: b = (AddExpression)
      add
        add
          identifier: a (System.Int32)
          identifier: func (System.Int32)
        int: 5
    print:
      identifier: a (System.Int32)
    print:
      identifier: b (System.Int32)
    print:
      call
        method info: System.String ToString(System.String)
        type: System.String
        return type: System.String
        target:
          identifier: b (System.Int32)
        args: 1
          string: C

Output:
39
146
$146.00

Stats:
-    Read: 0.00s
-     Lex: 0.00s
-   Parse: 0.00s
- Analyze: 0.00s
-    Eval: 0.00s
-   Print: 0.00s

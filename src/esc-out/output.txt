
Lex:
0000: 0 + 5 -- (1, 1) -- Identifier -- func1
0001: 5 + 1 -- (1, 6) -- Spaces -- " "
0002: 6 + 1 -- (1, 7) -- Colon -- :
0003: 7 + 1 -- (1, 8) -- Colon -- :
0004: 8 + 1 -- (1, 9) -- Spaces -- " "
0005: 9 + 1 -- (1, 10) -- BraceOpen -- {
0006: 10 + 1 -- (1, 11) -- EndOfLine -- \n
0007: 11 + 4 -- (2, 1) -- Spaces -- "    "
0008: 15 + 1 -- (2, 5) -- Identifier -- a
0009: 16 + 1 -- (2, 6) -- Spaces -- " "
0010: 17 + 1 -- (2, 7) -- Colon -- :
0011: 18 + 1 -- (2, 8) -- Equals -- =
0012: 19 + 1 -- (2, 9) -- Spaces -- " "
0013: 20 + 1 -- (2, 10) -- Number -- 2
0014: 21 + 1 -- (2, 11) -- EndOfLine -- \n
0015: 22 + 4 -- (3, 1) -- Spaces -- "    "
0016: 26 + 6 -- (3, 5) -- Identifier -- return
0017: 32 + 1 -- (3, 11) -- Spaces -- " "
0018: 33 + 1 -- (3, 12) -- Identifier -- a
0019: 34 + 1 -- (3, 13) -- EndOfLine -- \n
0020: 35 + 1 -- (4, 1) -- BraceClose -- }
0021: 36 + 1 -- (4, 2) -- EndOfLine -- \n
0022: 37 + 1 -- (5, 1) -- Identifier -- a
0023: 38 + 1 -- (5, 2) -- Spaces -- " "
0024: 39 + 1 -- (5, 3) -- Colon -- :
0025: 40 + 1 -- (5, 4) -- Equals -- =
0026: 41 + 1 -- (5, 5) -- Spaces -- " "
0027: 42 + 2 -- (5, 6) -- Number -- 13
0028: 44 + 1 -- (5, 8) -- EndOfLine -- \n
0029: 45 + 1 -- (6, 1) -- Identifier -- b
0030: 46 + 1 -- (6, 2) -- Spaces -- " "
0031: 47 + 1 -- (6, 3) -- Colon -- :
0032: 48 + 1 -- (6, 4) -- Equals -- =
0033: 49 + 1 -- (6, 5) -- Spaces -- " "
0034: 50 + 1 -- (6, 6) -- Identifier -- a
0035: 51 + 1 -- (6, 7) -- Spaces -- " "
0036: 52 + 1 -- (6, 8) -- Plus -- +
0037: 53 + 1 -- (6, 9) -- Spaces -- " "
0038: 54 + 5 -- (6, 10) -- Identifier -- func1
0039: 59 + 1 -- (6, 15) -- EndOfLine -- \n
0040: 60 + 5 -- (7, 1) -- Identifier -- print
0041: 65 + 1 -- (7, 6) -- Spaces -- " "
0042: 66 + 1 -- (7, 7) -- Identifier -- a
0043: 67 + 1 -- (7, 8) -- EndOfLine -- \n
0044: 68 + 5 -- (8, 1) -- Identifier -- print
0045: 73 + 1 -- (8, 6) -- Spaces -- " "
0046: 74 + 1 -- (8, 7) -- Identifier -- b
0047: 75 + 1 -- (8, 8) -- EndOfLine -- \n
0048: 76 + 0 -- (9, 1) -- EndOfFile -- <EOF>

Parse:
declare-static
  id
    identifier: func1
  value
    braces
      declare-assign
        id
          identifier: a
        value
          2
      call
        target
          identifier: return
        arguments
          identifier: a
declare-assign
  id
    identifier: a
  value
    13
declare-assign
  id
    identifier: b
  value
    plus
      identifier: a
      identifier: func1
call
  target
    identifier: print
  arguments
    identifier: a
call
  target
    identifier: print
  arguments
    identifier: b

Analysis Log:
=== Table ===
slot 0001 in 0000 :: File = FileSlotData { Main = 0 }
slot 0002 in 0001 :: Braces = BracesSlotData { Lines = System.Int32[] }
slot 0001 in 0000 <- File = FileSlotData { Main = 2 }
slot 0003 in 0002 :: Declare = DeclareSlotData { Name = func1, IsStatic = True, Value = 0 }
slot 0002 in 0001 -> Braces = BracesSlotData { Lines = System.Int32[] }
slot 0004 in 0003 :: Braces = BracesSlotData { Lines = System.Int32[] }
slot 0005 in 0004 :: Declare = DeclareSlotData { Name = a, IsStatic = False, Value = 0 }
slot 0004 in 0003 -> Braces = BracesSlotData { Lines = System.Int32[] }
slot 0006 in 0005 :: Integer = IntegerSlotData { Value = 2 }
slot 0005 in 0004 <- Declare = DeclareSlotData { Name = a, IsStatic = False, Value = 6 }
slot 0007 in 0004 :: Call = CallSlotData { Target = 0, Args = System.Int32[] }
slot 0008 in 0007 :: Identifier = IdentifierSlotData { Name = return }
slot 0007 in 0004 <- Call = CallSlotData { Target = 8, Args = System.Int32[] }
slot 0009 in 0007 :: Identifier = IdentifierSlotData { Name = a }
slot 0007 in 0004 <- Call = CallSlotData { Target = 8, Args = System.Int32[] }
slot 0003 in 0002 <- Declare = DeclareSlotData { Name = func1, IsStatic = True, Value = 4 }
slot 0010 in 0002 :: Declare = DeclareSlotData { Name = a, IsStatic = False, Value = 0 }
slot 0002 in 0001 -> Braces = BracesSlotData { Lines = System.Int32[] }
slot 0011 in 0010 :: Integer = IntegerSlotData { Value = 13 }
slot 0010 in 0002 <- Declare = DeclareSlotData { Name = a, IsStatic = False, Value = 11 }
slot 0012 in 0002 :: Declare = DeclareSlotData { Name = b, IsStatic = False, Value = 0 }
slot 0002 in 0001 -> Braces = BracesSlotData { Lines = System.Int32[] }
slot 0013 in 0012 :: Add = AddOpSlotData { Left = 0, Right = 0 }
slot 0014 in 0013 :: Identifier = IdentifierSlotData { Name = a }
slot 0015 in 0013 :: Identifier = IdentifierSlotData { Name = func1 }
slot 0013 in 0012 <- Add = AddOpSlotData { Left = 14, Right = 15 }
slot 0012 in 0002 <- Declare = DeclareSlotData { Name = b, IsStatic = False, Value = 13 }
slot 0016 in 0002 :: Call = CallSlotData { Target = 0, Args = System.Int32[] }
slot 0017 in 0016 :: Identifier = IdentifierSlotData { Name = print }
slot 0016 in 0002 <- Call = CallSlotData { Target = 17, Args = System.Int32[] }
slot 0018 in 0016 :: Identifier = IdentifierSlotData { Name = a }
slot 0016 in 0002 <- Call = CallSlotData { Target = 17, Args = System.Int32[] }
slot 0019 in 0002 :: Call = CallSlotData { Target = 0, Args = System.Int32[] }
slot 0020 in 0019 :: Identifier = IdentifierSlotData { Name = print }
slot 0019 in 0002 <- Call = CallSlotData { Target = 20, Args = System.Int32[] }
slot 0021 in 0019 :: Identifier = IdentifierSlotData { Name = b }
slot 0019 in 0002 <- Call = CallSlotData { Target = 20, Args = System.Int32[] }
slot 0002 in 0001 <- Braces = BracesSlotData { Lines = System.Int32[] }

Analyze:
main procedure
  scope

Output:

Stats:
-    Read: 0.00s
-     Lex: 0.00s
-   Parse: 0.00s
- Analyze: 0.00s
-    Eval: 0.00s
-   Print: 0.00s

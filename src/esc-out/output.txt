
Lex:
0000: 0 + 4 -- (1, 1) -- Identifier -- func
0001: 4 + 1 -- (1, 5) -- Spaces -- " "
0002: 5 + 1 -- (1, 6) -- Colon -- :
0003: 6 + 1 -- (1, 7) -- Colon -- :
0004: 7 + 1 -- (1, 8) -- Spaces -- " "
0005: 8 + 1 -- (1, 9) -- BraceOpen -- {
0006: 9 + 1 -- (1, 10) -- EndOfLine -- \n
0007: 10 + 4 -- (2, 1) -- Spaces -- "    "
0008: 14 + 4 -- (2, 5) -- Identifier -- cond
0009: 18 + 1 -- (2, 9) -- Spaces -- " "
0010: 19 + 1 -- (2, 10) -- Colon -- :
0011: 20 + 1 -- (2, 11) -- Spaces -- " "
0012: 21 + 4 -- (2, 12) -- Identifier -- bool
0013: 25 + 1 -- (2, 16) -- Spaces -- " "
0014: 26 + 1 -- (2, 17) -- Colon -- :
0015: 27 + 1 -- (2, 18) -- Spaces -- " "
0016: 28 + 1 -- (2, 19) -- LessThan -- <
0017: 29 + 1 -- (2, 20) -- GreaterThan -- >
0018: 30 + 1 -- (2, 21) -- EndOfLine -- \n
0019: 31 + 4 -- (3, 1) -- Spaces -- "    "
0020: 35 + 2 -- (3, 5) -- Identifier -- if
0021: 37 + 1 -- (3, 7) -- Spaces -- " "
0022: 38 + 1 -- (3, 8) -- Exclamation -- !
0023: 39 + 4 -- (3, 9) -- Identifier -- cond
0024: 43 + 1 -- (3, 13) -- Spaces -- " "
0025: 44 + 1 -- (3, 14) -- BraceOpen -- {
0026: 45 + 1 -- (3, 15) -- EndOfLine -- \n
0027: 46 + 8 -- (4, 1) -- Spaces -- "        "
0028: 54 + 6 -- (4, 9) -- Identifier -- return
0029: 60 + 1 -- (4, 15) -- Spaces -- " "
0030: 61 + 1 -- (4, 16) -- ParenOpen -- (
0031: 62 + 4 -- (4, 17) -- Identifier -- func
0032: 66 + 1 -- (4, 21) -- Spaces -- " "
0033: 67 + 4 -- (4, 22) -- Identifier -- true
0034: 71 + 1 -- (4, 26) -- ParenClose -- )
0035: 72 + 1 -- (4, 27) -- Spaces -- " "
0036: 73 + 40 -- (4, 28) -- Comment -- // TODO: make parens optional for return
0037: 113 + 1 -- (4, 68) -- EndOfLine -- \n
0038: 114 + 4 -- (5, 1) -- Spaces -- "    "
0039: 118 + 1 -- (5, 5) -- BraceClose -- }
0040: 119 + 1 -- (5, 6) -- EndOfLine -- \n
0041: 120 + 4 -- (6, 1) -- Spaces -- "    "
0042: 124 + 6 -- (6, 5) -- Identifier -- return
0043: 130 + 1 -- (6, 11) -- Spaces -- " "
0044: 131 + 3 -- (6, 12) -- Number -- 100
0045: 134 + 1 -- (6, 15) -- EndOfLine -- \n
0046: 135 + 1 -- (7, 1) -- BraceClose -- }
0047: 136 + 1 -- (7, 2) -- EndOfLine -- \n
0048: 137 + 1 -- (8, 1) -- Identifier -- a
0049: 138 + 1 -- (8, 2) -- Spaces -- " "
0050: 139 + 1 -- (8, 3) -- Colon -- :
0051: 140 + 1 -- (8, 4) -- Equals -- =
0052: 141 + 1 -- (8, 5) -- Spaces -- " "
0053: 142 + 2 -- (8, 6) -- Number -- 10
0054: 144 + 1 -- (8, 8) -- EndOfLine -- \n
0055: 145 + 1 -- (9, 1) -- Identifier -- b
0056: 146 + 1 -- (9, 2) -- Spaces -- " "
0057: 147 + 1 -- (9, 3) -- Colon -- :
0058: 148 + 1 -- (9, 4) -- Equals -- =
0059: 149 + 1 -- (9, 5) -- Spaces -- " "
0060: 150 + 1 -- (9, 6) -- Identifier -- a
0061: 151 + 1 -- (9, 7) -- Spaces -- " "
0062: 152 + 1 -- (9, 8) -- Plus -- +
0063: 153 + 1 -- (9, 9) -- Spaces -- " "
0064: 154 + 4 -- (9, 10) -- Identifier -- func
0065: 158 + 1 -- (9, 14) -- Spaces -- " "
0066: 159 + 5 -- (9, 15) -- Identifier -- false
0067: 164 + 1 -- (9, 20) -- Spaces -- " "
0068: 165 + 1 -- (9, 21) -- Plus -- +
0069: 166 + 1 -- (9, 22) -- Spaces -- " "
0070: 167 + 1 -- (9, 23) -- Number -- 1
0071: 168 + 1 -- (9, 24) -- EndOfLine -- \n
0072: 169 + 5 -- (10, 1) -- Identifier -- print
0073: 174 + 1 -- (10, 6) -- Spaces -- " "
0074: 175 + 1 -- (10, 7) -- Identifier -- b
0075: 176 + 1 -- (10, 8) -- EndOfLine -- \n
0076: 177 + 6 -- (11, 1) -- Identifier -- return
0077: 183 + 1 -- (11, 7) -- Spaces -- " "
0078: 184 + 1 -- (11, 8) -- Identifier -- b
0079: 185 + 1 -- (11, 9) -- EndOfLine -- \n
0080: 186 + 0 -- (12, 1) -- EndOfFile -- <EOF>

Parse:
declare-static
  id
    identifier: func
  value
    braces
      declare-static
        id
          identifier: cond
        type
          identifier: bool
        value
          parameter
      call
        target
          identifier: if
        arguments
          not
            identifier: cond
          braces
            call
              target
                identifier: return
              arguments
                call
                  target
                    identifier: func
                  arguments
                    identifier: true
      call
        target
          identifier: return
        arguments
          100
declare-assign
  id
    identifier: a
  value
    10
declare-assign
  id
    identifier: b
  value
    plus
      plus
        identifier: a
        call
          target
            identifier: func
          arguments
            identifier: false
      1
call
  target
    identifier: print
  arguments
    identifier: b
call
  target
    identifier: return
  arguments
    identifier: b

Analysis Log:
=== Build: init ===
slot 0001 in 0000 :: File = FileSlotData { Main = 0 }
slot 0002 in 0001 :: Braces = BracesSlotData { Lines = System.Int32[] }
slot 0001 in 0000 <- File = FileSlotData { Main = 2 }
slot 0003 in 0002 :: Declare = DeclareSlotData { Name = func, IsStatic = True, Type = 0, Value = 0 }
slot 0002 in 0001 -> Braces = BracesSlotData { Lines = System.Int32[] }
slot 0004 in 0003 :: Braces = BracesSlotData { Lines = System.Int32[] }
slot 0005 in 0004 :: Declare = DeclareSlotData { Name = cond, IsStatic = True, Type = 0, Value = 0 }
slot 0004 in 0003 -> Braces = BracesSlotData { Lines = System.Int32[] }
slot 0006 in 0005 :: Identifier = IdentifierSlotData { Name = bool, Target = 0 }
slot 0005 in 0004 <- Declare = DeclareSlotData { Name = cond, IsStatic = True, Type = 6, Value = 0 }
slot 0007 in 0005 :: Parameter = ParameterSlotData { }
slot 0005 in 0004 <- Declare = DeclareSlotData { Name = cond, IsStatic = True, Type = 6, Value = 7 }
slot 0008 in 0004 :: Call = CallSlotData { Target = 0, Args = System.Int32[] }
slot 0009 in 0008 :: Identifier = IdentifierSlotData { Name = if, Target = 0 }
slot 0008 in 0004 <- Call = CallSlotData { Target = 9, Args = System.Int32[] }
slot 0010 in 0008 :: Identifier = IdentifierSlotData { Name = cond, Target = 0 }
slot 0011 in 0008 :: LogicalNegation = LogicalNegationSlotData { Value = 10 }
slot 0012 in 0008 :: Braces = BracesSlotData { Lines = System.Int32[] }
slot 0013 in 0012 :: Call = CallSlotData { Target = 0, Args = System.Int32[] }
slot 0014 in 0013 :: Identifier = IdentifierSlotData { Name = return, Target = 0 }
slot 0013 in 0012 <- Call = CallSlotData { Target = 14, Args = System.Int32[] }
slot 0015 in 0013 :: Call = CallSlotData { Target = 0, Args = System.Int32[] }
slot 0016 in 0015 :: Identifier = IdentifierSlotData { Name = func, Target = 0 }
slot 0015 in 0013 <- Call = CallSlotData { Target = 16, Args = System.Int32[] }
slot 0017 in 0015 :: Identifier = IdentifierSlotData { Name = true, Target = 0 }
slot 0015 in 0013 <- Call = CallSlotData { Target = 16, Args = System.Int32[] }
slot 0013 in 0012 <- Call = CallSlotData { Target = 14, Args = System.Int32[] }
slot 0012 in 0008 <- Braces = BracesSlotData { Lines = System.Int32[] }
slot 0008 in 0004 <- Call = CallSlotData { Target = 9, Args = System.Int32[] }
slot 0018 in 0004 :: Call = CallSlotData { Target = 0, Args = System.Int32[] }
slot 0019 in 0018 :: Identifier = IdentifierSlotData { Name = return, Target = 0 }
slot 0018 in 0004 <- Call = CallSlotData { Target = 19, Args = System.Int32[] }
slot 0020 in 0018 :: Integer = IntegerSlotData { Value = 100 }
slot 0018 in 0004 <- Call = CallSlotData { Target = 19, Args = System.Int32[] }
slot 0004 in 0003 <- Braces = BracesSlotData { Lines = System.Int32[] }
slot 0003 in 0002 <- Declare = DeclareSlotData { Name = func, IsStatic = True, Type = 0, Value = 4 }
slot 0021 in 0002 :: Declare = DeclareSlotData { Name = a, IsStatic = False, Type = 0, Value = 0 }
slot 0002 in 0001 -> Braces = BracesSlotData { Lines = System.Int32[] }
slot 0022 in 0021 :: Integer = IntegerSlotData { Value = 10 }
slot 0021 in 0002 <- Declare = DeclareSlotData { Name = a, IsStatic = False, Type = 0, Value = 22 }
slot 0023 in 0002 :: Declare = DeclareSlotData { Name = b, IsStatic = False, Type = 0, Value = 0 }
slot 0002 in 0001 -> Braces = BracesSlotData { Lines = System.Int32[] }
slot 0024 in 0023 :: Add = AddOpSlotData { Left = 0, Right = 0 }
slot 0025 in 0024 :: Add = AddOpSlotData { Left = 0, Right = 0 }
slot 0026 in 0025 :: Identifier = IdentifierSlotData { Name = a, Target = 0 }
slot 0027 in 0025 :: Call = CallSlotData { Target = 0, Args = System.Int32[] }
slot 0028 in 0027 :: Identifier = IdentifierSlotData { Name = func, Target = 0 }
slot 0027 in 0025 <- Call = CallSlotData { Target = 28, Args = System.Int32[] }
slot 0029 in 0027 :: Identifier = IdentifierSlotData { Name = false, Target = 0 }
slot 0027 in 0025 <- Call = CallSlotData { Target = 28, Args = System.Int32[] }
slot 0025 in 0024 <- Add = AddOpSlotData { Left = 26, Right = 27 }
slot 0030 in 0024 :: Integer = IntegerSlotData { Value = 1 }
slot 0024 in 0023 <- Add = AddOpSlotData { Left = 25, Right = 30 }
slot 0023 in 0002 <- Declare = DeclareSlotData { Name = b, IsStatic = False, Type = 0, Value = 24 }
slot 0031 in 0002 :: Call = CallSlotData { Target = 0, Args = System.Int32[] }
slot 0032 in 0031 :: Identifier = IdentifierSlotData { Name = print, Target = 0 }
slot 0031 in 0002 <- Call = CallSlotData { Target = 32, Args = System.Int32[] }
slot 0033 in 0031 :: Identifier = IdentifierSlotData { Name = b, Target = 0 }
slot 0031 in 0002 <- Call = CallSlotData { Target = 32, Args = System.Int32[] }
slot 0034 in 0002 :: Call = CallSlotData { Target = 0, Args = System.Int32[] }
slot 0035 in 0034 :: Identifier = IdentifierSlotData { Name = return, Target = 0 }
slot 0034 in 0002 <- Call = CallSlotData { Target = 35, Args = System.Int32[] }
slot 0036 in 0034 :: Identifier = IdentifierSlotData { Name = b, Target = 0 }
slot 0034 in 0002 <- Call = CallSlotData { Target = 35, Args = System.Int32[] }
slot 0002 in 0001 <- Braces = BracesSlotData { Lines = System.Int32[] }
=== Build: return ===
add type 1 = VoidTypeSlot { }
add type 2 = FunctionTypeSlot { ReturnType = 1 }
slot 0002 in 0001 <- Braces : 2 = BracesSlotData { Lines = System.Int32[] }
slot 0004 in 0003 <- Braces : 2 = BracesSlotData { Lines = System.Int32[] }
slot 0012 in 0008 <- Braces : 2 = BracesSlotData { Lines = System.Int32[] }
slot 0014 in 0013 -> Identifier = IdentifierSlotData { Name = return, Target = 0 }
slot 0013 in 0012 << Return = ReturnSlotData { Value = 15, Function = 0 }
slot 0014 in 0013 << Unknown = InvalidSlotData { }
slot 0013 in 0012 -- call -> return
slot 0016 in 0015 -> Identifier = IdentifierSlotData { Name = func, Target = 0 }
slot 0019 in 0018 -> Identifier = IdentifierSlotData { Name = return, Target = 0 }
slot 0018 in 0004 << Return = ReturnSlotData { Value = 20, Function = 0 }
slot 0019 in 0018 << Unknown = InvalidSlotData { }
slot 0018 in 0004 -- call -> return
slot 0028 in 0027 -> Identifier = IdentifierSlotData { Name = func, Target = 0 }
slot 0032 in 0031 -> Identifier = IdentifierSlotData { Name = print, Target = 0 }
slot 0035 in 0034 -> Identifier = IdentifierSlotData { Name = return, Target = 0 }
slot 0034 in 0002 << Return = ReturnSlotData { Value = 36, Function = 0 }
slot 0035 in 0034 << Unknown = InvalidSlotData { }
slot 0034 in 0002 -- call -> return
slot 0013 <- returns to 0012
slot 0013 in 0012 <- Return = ReturnSlotData { Value = 15, Function = 12 }
slot 0012 in 0008 <- Braces : 0 = BracesSlotData { Lines = System.Int32[] }
slot 0018 <- returns to 0004
slot 0018 in 0004 <- Return = ReturnSlotData { Value = 20, Function = 4 }
slot 0004 in 0003 <- Braces : 0 = BracesSlotData { Lines = System.Int32[] }
slot 0034 <- returns to 0002
slot 0034 in 0002 <- Return = ReturnSlotData { Value = 36, Function = 2 }
slot 0002 in 0001 <- Braces : 0 = BracesSlotData { Lines = System.Int32[] }
=== Build: resolve identifiers ===
identifier: 0006 = IdentifierSlotData { Name = bool, Target = 0 }
  0005 = Declare
      0003 = Declare
          0001 = File
slot 0006 in 0005 << Intrinsic = IntrinsicSlotData { Name = bool }
add type 3 = NativeTypeSlot { Name = bool }
add type 4 = MetaTypeSlot { InstanceType = 3 }
slot 0006 in 0005 <- Intrinsic : 4 = IntrinsicSlotData { Name = bool }
identifier: 0009 = IdentifierSlotData { Name = if, Target = 0 }
  0008 = Call
      0003 = Declare
          0001 = File
slot 0008 in 0004 << If = IfSlotData { Condition = 11, Body = 12 }
slot 0009 in 0008 << Unknown = InvalidSlotData { }
identifier: 0010 = IdentifierSlotData { Name = cond, Target = 0 }
  0008 = If
    0004 FOUND: BracesSlotData { Lines = System.Int32[] }
slot 0010 in 0008 <- Identifier = IdentifierSlotData { Name = cond, Target = 5 }
identifier: 0016 = IdentifierSlotData { Name = func, Target = 0 }
  0015 = Call
    0013 = Return
        0008 = If
            0003 = Declare
              0002 FOUND: BracesSlotData { Lines = System.Int32[] }
slot 0016 in 0015 <- Identifier = IdentifierSlotData { Name = func, Target = 3 }
identifier: 0017 = IdentifierSlotData { Name = true, Target = 0 }
  0015 = Call
    0013 = Return
        0008 = If
            0003 = Declare
                0001 = File
slot 0017 in 0015 << Boolean = BooleanSlotData { Value = True }
slot 0017 in 0015 <- Boolean : 3 = BooleanSlotData { Value = True }
identifier: 0026 = IdentifierSlotData { Name = a, Target = 0 }
  0025 = Add
    0024 = Add
      0023 = Declare
        0002 FOUND: BracesSlotData { Lines = System.Int32[] }
slot 0026 in 0025 <- Identifier = IdentifierSlotData { Name = a, Target = 21 }
identifier: 0028 = IdentifierSlotData { Name = func, Target = 0 }
  0027 = Call
    0025 = Add
      0024 = Add
        0023 = Declare
          0002 FOUND: BracesSlotData { Lines = System.Int32[] }
slot 0028 in 0027 <- Identifier = IdentifierSlotData { Name = func, Target = 3 }
identifier: 0029 = IdentifierSlotData { Name = false, Target = 0 }
  0027 = Call
    0025 = Add
      0024 = Add
        0023 = Declare
            0001 = File
slot 0029 in 0027 << Boolean = BooleanSlotData { Value = False }
slot 0029 in 0027 <- Boolean : 3 = BooleanSlotData { Value = False }
identifier: 0032 = IdentifierSlotData { Name = print, Target = 0 }
  0031 = Call
      0001 = File
slot 0032 in 0031 << Intrinsic = IntrinsicSlotData { Name = print }
add type 5 = NativeTypeSlot { Name = string }
add type 6 = FunctionTypeSlot { ReturnType = 5 }
slot 0032 in 0031 <- Intrinsic : 6 = IntrinsicSlotData { Name = print }
identifier: 0033 = IdentifierSlotData { Name = b, Target = 0 }
  0031 = Call
    0002 FOUND: BracesSlotData { Lines = System.Int32[] }
slot 0033 in 0031 <- Identifier = IdentifierSlotData { Name = b, Target = 23 }
identifier: 0036 = IdentifierSlotData { Name = b, Target = 0 }
  0034 = Return
    0002 FOUND: BracesSlotData { Lines = System.Int32[] }
slot 0036 in 0034 <- Identifier = IdentifierSlotData { Name = b, Target = 23 }
=== Build: types ===
enqueue 0006
intrinsic: 0006 = TableSlot { ParentSlot = 5, DataType = Intrinsic, Data = IntrinsicSlotData { Name = bool }, TypeSlot = 4 }
add type 7 = ParameterTypeSlot { }
slot 0007 in 0005 <- Parameter : 7 = ParameterSlotData { }
enqueue 0007
add type 8 = NativeTypeSlot { Name = int }
slot 0020 in 0018 <- Integer : 8 = IntegerSlotData { Value = 100 }
enqueue 0020
slot 0022 in 0021 <- Integer : 8 = IntegerSlotData { Value = 10 }
enqueue 0022
slot 0030 in 0024 <- Integer : 8 = IntegerSlotData { Value = 1 }
enqueue 0030
enqueue 0032
intrinsic: 0032 = TableSlot { ParentSlot = 31, DataType = Intrinsic, Data = IntrinsicSlotData { Name = print }, TypeSlot = 6 }
dequeue: 0006
slot 0005 in 0004 <- Declare : 3 = DeclareSlotData { Name = cond, IsStatic = True, Type = 6, Value = 7 }
dequeue: 0007
dequeue: 0020
slot 0018 return: type <- NativeTypeSlot { Name = int } 8 via 0020
slot 0018 in 0004 <- Return : 8 = ReturnSlotData { Value = 20, Function = 4 }
dequeue: 0022
add target: 21
slot 0021 in 0002 <- Declare : 8 = DeclareSlotData { Name = a, IsStatic = False, Type = 0, Value = 22 }
dequeue: 0030
dequeue: 0032
dequeue: 0005
id target: 10
slot 0010 in 0008 <- Identifier : 3 = IdentifierSlotData { Name = cond, Target = 5 }
dequeue: 0018
add type 9 = FunctionTypeSlot { ReturnType = 8 }
slot 0004 braces: found return 0018 9
slot 0004 in 0003 <- Braces : 9 = BracesSlotData { Lines = System.Int32[] }
dequeue: 0021
id target: 26
slot 0026 in 0025 <- Identifier : 8 = IdentifierSlotData { Name = a, Target = 21 }
dequeue: 0010
dequeue: 0004
add target: 3
slot 0003 in 0002 <- Declare : 9 = DeclareSlotData { Name = func, IsStatic = True, Type = 0, Value = 4 }
dequeue: 0026
dequeue: 0003
id target: 16
slot 0016 in 0015 <- Identifier : 9 = IdentifierSlotData { Name = func, Target = 3 }
id target: 28
slot 0028 in 0027 <- Identifier : 9 = IdentifierSlotData { Name = func, Target = 3 }
dequeue: 0016
slot 0015 in 0013 <- Call : 8 = CallSlotData { Target = 16, Args = System.Int32[] }
dequeue: 0028
slot 0027 in 0025 <- Call : 8 = CallSlotData { Target = 28, Args = System.Int32[] }
dequeue: 0015
slot 0013 return: type <- NativeTypeSlot { Name = int } 8 via 0015
slot 0013 in 0012 <- Return : 8 = ReturnSlotData { Value = 15, Function = 12 }
slot 0025 in 0024 <- Add : 8 = AddOpSlotData { Left = 26, Right = 27 }
dequeue: 0027
slot 0024 in 0023 <- Add : 8 = AddOpSlotData { Left = 25, Right = 30 }
dequeue: 0013
slot 0012 braces: found return 0013 9
slot 0012 in 0008 <- Braces : 9 = BracesSlotData { Lines = System.Int32[] }
dequeue: 0025
dequeue: 0024
add target: 23
slot 0023 in 0002 <- Declare : 8 = DeclareSlotData { Name = b, IsStatic = False, Type = 0, Value = 24 }
dequeue: 0012
dequeue: 0023
id target: 33
slot 0033 in 0031 <- Identifier : 8 = IdentifierSlotData { Name = b, Target = 23 }
id target: 36
slot 0036 in 0034 <- Identifier : 8 = IdentifierSlotData { Name = b, Target = 23 }
dequeue: 0033
slot 0031 in 0002 <- Call : 5 = CallSlotData { Target = 32, Args = System.Int32[] }
dequeue: 0036
slot 0034 return: type <- NativeTypeSlot { Name = int } 8 via 0036
slot 0034 in 0002 <- Return : 8 = ReturnSlotData { Value = 36, Function = 2 }
dequeue: 0031
dequeue: 0034
slot 0002 braces: found return 0034 9
slot 0002 in 0001 <- Braces : 9 = BracesSlotData { Lines = System.Int32[] }
dequeue: 0002
done after 27 iterations
=== Tree ===
0001: file (unknown)
0002:   braces (function -> int)
0003:     static func (function -> int)
            value
0004:         braces (function -> int)
0005:           static cond (bool)
                  type
0006:               intrinsic: name = bool (typeof -> bool)
                  value
0007:               parameter (parameter)
0008:           if (unknown)
0011:             not (unknown)
0010:               id: name = cond (bool) -> 0005
0012:             braces (function -> int)
0013:               return (int)
0015:                 call (int)
0016:                   id: name = func (function -> int) -> 0003
0017:                   boolean=True (bool)
0018:           return (int)
0020:             integer=100 (int)
0021:     declare a (int)
            value
0022:         integer=10 (int)
0023:     declare b (int)
            value
0024:         add (int)
0025:           add (int)
0026:             id: name = a (int) -> 0021
0027:             call (int)
0028:               id: name = func (function -> int) -> 0003
0029:               boolean=False (bool)
0030:           integer=1 (int)
0031:     call (string)
0032:       intrinsic: name = print (function -> string)
0033:       id: name = b (int) -> 0023
0034:     return (int)
0036:       id: name = b (int) -> 0023

Output:
111

Stats:
-   Start: 0.0s
-    Read: 0.0s
-     Lex: 0.0s
-   Parse: 0.0s
- Analyze: 0.0s
-    Eval: 0.0s
-   Print: 0.0s
-  Output: 0.0s

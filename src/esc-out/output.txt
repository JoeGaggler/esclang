
Lex:
0000: 0 + 5 -- (1, 1) -- Identifier -- func2
0001: 5 + 1 -- (1, 6) -- Spaces -- " "
0002: 6 + 1 -- (1, 7) -- Colon -- :
0003: 7 + 1 -- (1, 8) -- Colon -- :
0004: 8 + 1 -- (1, 9) -- Spaces -- " "
0005: 9 + 1 -- (1, 10) -- BraceOpen -- {
0006: 10 + 1 -- (1, 11) -- EndOfLine -- \n
0007: 11 + 4 -- (2, 1) -- Spaces -- "    "
0008: 15 + 4 -- (2, 5) -- Identifier -- cond
0009: 19 + 1 -- (2, 9) -- Spaces -- " "
0010: 20 + 1 -- (2, 10) -- Colon -- :
0011: 21 + 1 -- (2, 11) -- Spaces -- " "
0012: 22 + 4 -- (2, 12) -- Identifier -- bool
0013: 26 + 1 -- (2, 16) -- Spaces -- " "
0014: 27 + 1 -- (2, 17) -- Colon -- :
0015: 28 + 1 -- (2, 18) -- Spaces -- " "
0016: 29 + 1 -- (2, 19) -- LessThan -- <
0017: 30 + 1 -- (2, 20) -- GreaterThan -- >
0018: 31 + 1 -- (2, 21) -- EndOfLine -- \n
0019: 32 + 4 -- (3, 1) -- Spaces -- "    "
0020: 36 + 2 -- (3, 5) -- Identifier -- if
0021: 38 + 1 -- (3, 7) -- Spaces -- " "
0022: 39 + 5 -- (3, 8) -- Identifier -- false
0023: 44 + 1 -- (3, 13) -- Spaces -- " "
0024: 45 + 1 -- (3, 14) -- BraceOpen -- {
0025: 46 + 1 -- (3, 15) -- EndOfLine -- \n
0026: 47 + 8 -- (4, 1) -- Spaces -- "        "
0027: 55 + 6 -- (4, 9) -- Identifier -- return
0028: 61 + 1 -- (4, 15) -- Spaces -- " "
0029: 62 + 1 -- (4, 16) -- Number -- 0
0030: 63 + 1 -- (4, 17) -- EndOfLine -- \n
0031: 64 + 4 -- (5, 1) -- Spaces -- "    "
0032: 68 + 1 -- (5, 5) -- BraceClose -- }
0033: 69 + 1 -- (5, 6) -- EndOfLine -- \n
0034: 70 + 4 -- (6, 1) -- Spaces -- "    "
0035: 74 + 2 -- (6, 5) -- Identifier -- if
0036: 76 + 1 -- (6, 7) -- Spaces -- " "
0037: 77 + 1 -- (6, 8) -- Exclamation -- !
0038: 78 + 4 -- (6, 9) -- Identifier -- cond
0039: 82 + 1 -- (6, 13) -- Spaces -- " "
0040: 83 + 1 -- (6, 14) -- BraceOpen -- {
0041: 84 + 1 -- (6, 15) -- EndOfLine -- \n
0042: 85 + 8 -- (7, 1) -- Spaces -- "        "
0043: 93 + 6 -- (7, 9) -- Identifier -- return
0044: 99 + 1 -- (7, 15) -- Spaces -- " "
0045: 100 + 3 -- (7, 16) -- Number -- 100
0046: 103 + 1 -- (7, 19) -- EndOfLine -- \n
0047: 104 + 4 -- (8, 1) -- Spaces -- "    "
0048: 108 + 1 -- (8, 5) -- BraceClose -- }
0049: 109 + 1 -- (8, 6) -- EndOfLine -- \n
0050: 110 + 4 -- (9, 1) -- Spaces -- "    "
0051: 114 + 6 -- (9, 5) -- Identifier -- return
0052: 120 + 1 -- (9, 11) -- Spaces -- " "
0053: 121 + 4 -- (9, 12) -- Number -- 9999
0054: 125 + 1 -- (9, 16) -- Spaces -- " "
0055: 126 + 14 -- (9, 17) -- Comment -- // unreachable
0056: 140 + 1 -- (9, 31) -- EndOfLine -- \n
0057: 141 + 1 -- (10, 1) -- BraceClose -- }
0058: 142 + 1 -- (10, 2) -- EndOfLine -- \n
0059: 143 + 5 -- (11, 1) -- Identifier -- func1
0060: 148 + 1 -- (11, 6) -- Spaces -- " "
0061: 149 + 1 -- (11, 7) -- Colon -- :
0062: 150 + 1 -- (11, 8) -- Colon -- :
0063: 151 + 1 -- (11, 9) -- Spaces -- " "
0064: 152 + 1 -- (11, 10) -- BraceOpen -- {
0065: 153 + 1 -- (11, 11) -- EndOfLine -- \n
0066: 154 + 4 -- (12, 1) -- Spaces -- "    "
0067: 158 + 1 -- (12, 5) -- Identifier -- a
0068: 159 + 1 -- (12, 6) -- Spaces -- " "
0069: 160 + 1 -- (12, 7) -- Colon -- :
0070: 161 + 1 -- (12, 8) -- Equals -- =
0071: 162 + 1 -- (12, 9) -- Spaces -- " "
0072: 163 + 1 -- (12, 10) -- Number -- 2
0073: 164 + 1 -- (12, 11) -- EndOfLine -- \n
0074: 165 + 4 -- (13, 1) -- Spaces -- "    "
0075: 169 + 1 -- (13, 5) -- Identifier -- b
0076: 170 + 1 -- (13, 6) -- Spaces -- " "
0077: 171 + 1 -- (13, 7) -- Colon -- :
0078: 172 + 1 -- (13, 8) -- Equals -- =
0079: 173 + 1 -- (13, 9) -- Spaces -- " "
0080: 174 + 1 -- (13, 10) -- Identifier -- a
0081: 175 + 1 -- (13, 11) -- Spaces -- " "
0082: 176 + 1 -- (13, 12) -- Plus -- +
0083: 177 + 1 -- (13, 13) -- Spaces -- " "
0084: 178 + 5 -- (13, 14) -- Identifier -- func2
0085: 183 + 1 -- (13, 19) -- Spaces -- " "
0086: 184 + 5 -- (13, 20) -- Identifier -- false
0087: 189 + 1 -- (13, 25) -- EndOfLine -- \n
0088: 190 + 4 -- (14, 1) -- Spaces -- "    "
0089: 194 + 6 -- (14, 5) -- Identifier -- return
0090: 200 + 1 -- (14, 11) -- Spaces -- " "
0091: 201 + 1 -- (14, 12) -- Identifier -- b
0092: 202 + 1 -- (14, 13) -- EndOfLine -- \n
0093: 203 + 1 -- (15, 1) -- BraceClose -- }
0094: 204 + 1 -- (15, 2) -- EndOfLine -- \n
0095: 205 + 1 -- (16, 1) -- Identifier -- a
0096: 206 + 1 -- (16, 2) -- Spaces -- " "
0097: 207 + 1 -- (16, 3) -- Colon -- :
0098: 208 + 1 -- (16, 4) -- Equals -- =
0099: 209 + 1 -- (16, 5) -- Spaces -- " "
0100: 210 + 2 -- (16, 6) -- Number -- 13
0101: 212 + 1 -- (16, 8) -- EndOfLine -- \n
0102: 213 + 1 -- (17, 1) -- Identifier -- a
0103: 214 + 1 -- (17, 2) -- Spaces -- " "
0104: 215 + 1 -- (17, 3) -- Equals -- =
0105: 216 + 1 -- (17, 4) -- Spaces -- " "
0106: 217 + 2 -- (17, 5) -- Number -- 39
0107: 219 + 1 -- (17, 7) -- EndOfLine -- \n
0108: 220 + 1 -- (18, 1) -- Identifier -- b
0109: 221 + 1 -- (18, 2) -- Spaces -- " "
0110: 222 + 1 -- (18, 3) -- Colon -- :
0111: 223 + 1 -- (18, 4) -- Equals -- =
0112: 224 + 1 -- (18, 5) -- Spaces -- " "
0113: 225 + 1 -- (18, 6) -- Identifier -- a
0114: 226 + 1 -- (18, 7) -- Spaces -- " "
0115: 227 + 1 -- (18, 8) -- Plus -- +
0116: 228 + 1 -- (18, 9) -- Spaces -- " "
0117: 229 + 5 -- (18, 10) -- Identifier -- func1
0118: 234 + 1 -- (18, 15) -- Spaces -- " "
0119: 235 + 1 -- (18, 16) -- Plus -- +
0120: 236 + 1 -- (18, 17) -- Spaces -- " "
0121: 237 + 1 -- (18, 18) -- Number -- 5
0122: 238 + 1 -- (18, 19) -- EndOfLine -- \n
0123: 239 + 5 -- (19, 1) -- Identifier -- print
0124: 244 + 1 -- (19, 6) -- Spaces -- " "
0125: 245 + 1 -- (19, 7) -- Identifier -- a
0126: 246 + 1 -- (19, 8) -- EndOfLine -- \n
0127: 247 + 5 -- (20, 1) -- Identifier -- print
0128: 252 + 1 -- (20, 6) -- Spaces -- " "
0129: 253 + 1 -- (20, 7) -- Identifier -- b
0130: 254 + 1 -- (20, 8) -- EndOfLine -- \n
0131: 255 + 6 -- (21, 1) -- Identifier -- return
0132: 261 + 1 -- (21, 7) -- Spaces -- " "
0133: 262 + 15 -- (21, 8) -- Comment -- // early return
0134: 277 + 1 -- (21, 23) -- EndOfLine -- \n
0135: 278 + 5 -- (22, 1) -- Identifier -- print
0136: 283 + 1 -- (22, 6) -- Spaces -- " "
0137: 284 + 1 -- (22, 7) -- ParenOpen -- (
0138: 285 + 1 -- (22, 8) -- Identifier -- b
0139: 286 + 1 -- (22, 9) -- Period -- .
0140: 287 + 8 -- (22, 10) -- Identifier -- ToString
0141: 295 + 1 -- (22, 18) -- Spaces -- " "
0142: 296 + 3 -- (22, 19) -- LiteralString -- "C"
0143: 299 + 1 -- (22, 22) -- ParenClose -- )
0144: 300 + 1 -- (22, 23) -- Spaces -- " "
0145: 301 + 13 -- (22, 24) -- Comment -- // C=currency
0146: 314 + 1 -- (22, 37) -- EndOfLine -- \n
0147: 315 + 0 -- (23, 1) -- EndOfFile -- <EOF>

Parse:
declare-static
  id
    identifier: func2
  value
    braces
      declare-static
        id
          identifier: cond
        type
          identifier: bool
        value
          parameter
      call
        target
          identifier: if
        arguments
          identifier: false
          braces
            call
              target
                identifier: return
              arguments
                0
      call
        target
          identifier: if
        arguments
          not
            identifier: cond
          braces
            call
              target
                identifier: return
              arguments
                100
      call
        target
          identifier: return
        arguments
          9999
declare-static
  id
    identifier: func1
  value
    braces
      declare-assign
        id
          identifier: a
        value
          2
      declare-assign
        id
          identifier: b
        value
          plus
            identifier: a
            call
              target
                identifier: func2
              arguments
                identifier: false
      call
        target
          identifier: return
        arguments
          identifier: b
declare-assign
  id
    identifier: a
  value
    13
assign
  identifier: a
  39
declare-assign
  id
    identifier: b
  value
    plus
      plus
        identifier: a
        identifier: func1
      5
call
  target
    identifier: print
  arguments
    identifier: a
call
  target
    identifier: print
  arguments
    identifier: b
identifier: return
call
  target
    identifier: print
  arguments
    call
      target
        member
          identifier: b
          identifier: ToString
      arguments
        "C"

Analysis Log:
0000 file: lines=9
0001 scope: nodes=9
0001 expression: DeclareStaticNode { Identifier = IdentifierNode { Text = func2 }, Type = , Value = BracesNode { Lines = System.Collections.Generic.List`1[EscLang.Parse.SyntaxNode] } }
0001 type: 
0001 expression: BracesNode { Lines = System.Collections.Generic.List`1[EscLang.Parse.SyntaxNode] }
0002 scope: nodes=4
0002 expression: DeclareStaticNode { Identifier = IdentifierNode { Text = cond }, Type = IdentifierNode { Text = bool }, Value = ParameterNode { } }
0002 type: IdentifierNode { Text = bool }
0002 expression: ParameterNode { }
0002 expression: CallNode { Target = IdentifierNode { Text = if }, Arguments = System.Collections.Generic.List`1[EscLang.Parse.SyntaxNode] }
0002 expression: IdentifierNode { Text = if }
0002 expression: IdentifierNode { Text = false }
0002 expression: BracesNode { Lines = System.Collections.Generic.List`1[EscLang.Parse.SyntaxNode] }
0003 scope: nodes=1
0003 expression: CallNode { Target = IdentifierNode { Text = return }, Arguments = System.Collections.Generic.List`1[EscLang.Parse.SyntaxNode] }
0003 expression: IdentifierNode { Text = return }
0003 expression: LiteralNumberNode { Text = 0 }
0002 expression: CallNode { Target = IdentifierNode { Text = if }, Arguments = System.Collections.Generic.List`1[EscLang.Parse.SyntaxNode] }
0002 expression: IdentifierNode { Text = if }
0002 expression: LogicalNegationNode { Node = IdentifierNode { Text = cond } }
0002 expression: IdentifierNode { Text = cond }
0002 expression: BracesNode { Lines = System.Collections.Generic.List`1[EscLang.Parse.SyntaxNode] }
0004 scope: nodes=1
0004 expression: CallNode { Target = IdentifierNode { Text = return }, Arguments = System.Collections.Generic.List`1[EscLang.Parse.SyntaxNode] }
0004 expression: IdentifierNode { Text = return }
0004 expression: LiteralNumberNode { Text = 100 }
0002 expression: CallNode { Target = IdentifierNode { Text = return }, Arguments = System.Collections.Generic.List`1[EscLang.Parse.SyntaxNode] }
0002 expression: IdentifierNode { Text = return }
0002 expression: LiteralNumberNode { Text = 9999 }
0001 expression: DeclareStaticNode { Identifier = IdentifierNode { Text = func1 }, Type = , Value = BracesNode { Lines = System.Collections.Generic.List`1[EscLang.Parse.SyntaxNode] } }
0001 type: 
0001 expression: BracesNode { Lines = System.Collections.Generic.List`1[EscLang.Parse.SyntaxNode] }
0005 scope: nodes=3
0005 expression: DeclareAssignNode { Identifier = IdentifierNode { Text = a }, Type = , Value = LiteralNumberNode { Text = 2 } }
0005 type: 
0005 expression: LiteralNumberNode { Text = 2 }
0005 expression: DeclareAssignNode { Identifier = IdentifierNode { Text = b }, Type = , Value = PlusNode { Left = IdentifierNode { Text = a }, Right = CallNode { Target = IdentifierNode { Text = func2 }, Arguments = System.Collections.Generic.List`1[EscLang.Parse.SyntaxNode] } } }
0005 type: 
0005 expression: PlusNode { Left = IdentifierNode { Text = a }, Right = CallNode { Target = IdentifierNode { Text = func2 }, Arguments = System.Collections.Generic.List`1[EscLang.Parse.SyntaxNode] } }
0005 expression: IdentifierNode { Text = a }
0005 expression: CallNode { Target = IdentifierNode { Text = func2 }, Arguments = System.Collections.Generic.List`1[EscLang.Parse.SyntaxNode] }
0005 expression: IdentifierNode { Text = func2 }
0005 expression: IdentifierNode { Text = false }
0005 expression: CallNode { Target = IdentifierNode { Text = return }, Arguments = System.Collections.Generic.List`1[EscLang.Parse.SyntaxNode] }
0005 expression: IdentifierNode { Text = return }
0005 expression: IdentifierNode { Text = b }
0001 expression: DeclareAssignNode { Identifier = IdentifierNode { Text = a }, Type = , Value = LiteralNumberNode { Text = 13 } }
0001 type: 
0001 expression: LiteralNumberNode { Text = 13 }
0001 expression: AssignNode { Target = IdentifierNode { Text = a }, Value = LiteralNumberNode { Text = 39 } }
0001 expression: IdentifierNode { Text = a }
0001 expression: LiteralNumberNode { Text = 39 }
0001 expression: DeclareAssignNode { Identifier = IdentifierNode { Text = b }, Type = , Value = PlusNode { Left = PlusNode { Left = IdentifierNode { Text = a }, Right = IdentifierNode { Text = func1 } }, Right = LiteralNumberNode { Text = 5 } } }
0001 type: 
0001 expression: PlusNode { Left = PlusNode { Left = IdentifierNode { Text = a }, Right = IdentifierNode { Text = func1 } }, Right = LiteralNumberNode { Text = 5 } }
0001 expression: PlusNode { Left = IdentifierNode { Text = a }, Right = IdentifierNode { Text = func1 } }
0001 expression: IdentifierNode { Text = a }
0001 expression: IdentifierNode { Text = func1 }
0001 expression: LiteralNumberNode { Text = 5 }
0001 expression: CallNode { Target = IdentifierNode { Text = print }, Arguments = System.Collections.Generic.List`1[EscLang.Parse.SyntaxNode] }
0001 expression: IdentifierNode { Text = print }
0001 expression: IdentifierNode { Text = a }
0001 expression: CallNode { Target = IdentifierNode { Text = print }, Arguments = System.Collections.Generic.List`1[EscLang.Parse.SyntaxNode] }
0001 expression: IdentifierNode { Text = print }
0001 expression: IdentifierNode { Text = b }
0001 expression: IdentifierNode { Text = return }
0001 expression: CallNode { Target = IdentifierNode { Text = print }, Arguments = System.Collections.Generic.List`1[EscLang.Parse.SyntaxNode] }
0001 expression: IdentifierNode { Text = print }
0001 expression: CallNode { Target = MemberNode { Target = IdentifierNode { Text = b }, Member = IdentifierNode { Text = ToString } }, Arguments = System.Collections.Generic.List`1[EscLang.Parse.SyntaxNode] }
0001 expression: MemberNode { Target = IdentifierNode { Text = b }, Member = IdentifierNode { Text = ToString } }
0001 expression: IdentifierNode { Text = b }
0001 expression: LiteralStringNode { Text = C }

Analyze:
main procedure
  scope
    static: func2 (FunctionAnalysisType { FullName = Function, ReturnType = DotnetAnalysisType { FullName = Dotnet::System.Int32, Type = System.Int32 } })
      function
        scope
          static: cond (DotnetAnalysisType { FullName = Dotnet::System.Boolean, Type = System.Boolean })
            parameter: UnknownAnalysisType { FullName = Unknown }
          call
            intrinsic: if
            bool: False
            function
              scope
                return
                  int: 0
          call
            intrinsic: if
            not
              identifier: cond (DotnetAnalysisType { FullName = Dotnet::System.Boolean, Type = System.Boolean })
            function
              scope
                return
                  int: 100
          return
            int: 9999
    static: func1 (FunctionAnalysisType { FullName = Function, ReturnType = DotnetAnalysisType { FullName = Dotnet::System.Int32, Type = System.Int32 } })
      function
        scope
          static: a (DotnetAnalysisType { FullName = Dotnet::System.Int32, Type = System.Int32 })
            int: 2
          static: b (DotnetAnalysisType { FullName = Dotnet::System.Int32, Type = System.Int32 })
            add
              identifier: a (DotnetAnalysisType { FullName = Dotnet::System.Int32, Type = System.Int32 })
              call
                identifier: func2 (DotnetAnalysisType { FullName = Dotnet::System.Int32, Type = System.Int32 })
                bool: False
          return
            identifier: b (DotnetAnalysisType { FullName = Dotnet::System.Int32, Type = System.Int32 })
    static: a (DotnetAnalysisType { FullName = Dotnet::System.Int32, Type = System.Int32 })
      int: 13
    assign
      identifier: a (DotnetAnalysisType { FullName = Dotnet::System.Int32, Type = System.Int32 })
      int: 39
    static: b (DotnetAnalysisType { FullName = Dotnet::System.Int32, Type = System.Int32 })
      add
        add
          identifier: a (DotnetAnalysisType { FullName = Dotnet::System.Int32, Type = System.Int32 })
          identifier: func1 (DotnetAnalysisType { FullName = Dotnet::System.Int32, Type = System.Int32 })
        int: 5
    call
      intrinsic: print
      identifier: a (DotnetAnalysisType { FullName = Dotnet::System.Int32, Type = System.Int32 })
    call
      intrinsic: print
      identifier: b (DotnetAnalysisType { FullName = Dotnet::System.Int32, Type = System.Int32 })
    return void
    call
      intrinsic: print
      call
        method info: System.String ToString(System.String)
        type: Dotnet::System.String
        return type: Dotnet::System.String
        target:
          identifier: b (DotnetAnalysisType { FullName = Dotnet::System.Int32, Type = System.Int32 })
        args: 1
          string: C

Output:
39
146

Stats:
-    Read: 0.00s
-     Lex: 0.00s
-   Parse: 0.00s
- Analyze: 0.00s
-    Eval: 0.00s
-   Print: 0.00s

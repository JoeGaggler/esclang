Stats:
-    Read: 0.00s
-     Lex: 0.00s
-   Parse: 0.00s
- Analyze: 0.00s
-    Eval: 0.00s
-   Print: 0.00s

Lex:
0000: 0 + 1 -- (1, 1) -- Identifier -- a
0001: 1 + 1 -- (1, 2) -- Spaces -- " "
0002: 2 + 1 -- (1, 3) -- Colon -- :
0003: 3 + 1 -- (1, 4) -- Colon -- :
0004: 4 + 1 -- (1, 5) -- Spaces -- " "
0005: 5 + 2 -- (1, 6) -- Number -- 13
0006: 7 + 1 -- (1, 8) -- EndOfLine -- \n
0007: 8 + 1 -- (2, 1) -- Identifier -- b
0008: 9 + 1 -- (2, 2) -- Spaces -- " "
0009: 10 + 1 -- (2, 3) -- Colon -- :
0010: 11 + 1 -- (2, 4) -- Colon -- :
0011: 12 + 1 -- (2, 5) -- Spaces -- " "
0012: 13 + 1 -- (2, 6) -- Identifier -- a
0013: 14 + 1 -- (2, 7) -- Spaces -- " "
0014: 15 + 1 -- (2, 8) -- Plus -- +
0015: 16 + 1 -- (2, 9) -- Spaces -- " "
0016: 17 + 1 -- (2, 10) -- Identifier -- a
0017: 18 + 1 -- (2, 11) -- Spaces -- " "
0018: 19 + 1 -- (2, 12) -- Plus -- +
0019: 20 + 1 -- (2, 13) -- Spaces -- " "
0020: 21 + 1 -- (2, 14) -- Number -- 5
0021: 22 + 1 -- (2, 15) -- EndOfLine -- \n
0022: 23 + 5 -- (3, 1) -- Identifier -- print
0023: 28 + 1 -- (3, 6) -- Spaces -- " "
0024: 29 + 1 -- (3, 7) -- Identifier -- a
0025: 30 + 1 -- (3, 8) -- EndOfLine -- \n
0026: 31 + 5 -- (4, 1) -- Identifier -- print
0027: 36 + 1 -- (4, 6) -- Spaces -- " "
0028: 37 + 1 -- (4, 7) -- Identifier -- b
0029: 38 + 1 -- (4, 8) -- EndOfLine -- \n
0030: 39 + 0 -- (5, 1) -- EndOfFile -- <EOF>

Parse:
line
  declare-static
    id
      identifier: a
    value
      13
line
  declare-static
    id
      identifier: b
    value
      plus
        plus
          identifier: a
          identifier: a
        5
line
  call
    target
      identifier: print
    arguments
      identifier: a
line
  call
    target
      identifier: print
    arguments
      identifier: b

Analyze:
main procedure
  scope
    assign: a = IntLiteralExpression { Type = System.Int32, Value = 13 } (IntLiteralExpression)
    assign: b = AddExpression { Type = System.Int32, Left = AddExpression { Type = System.Int32, Left = IdentifierExpression { Type = System.Int32, Identifier = a }, Right = IdentifierExpression { Type = System.Int32, Identifier = a } }, Right = IntLiteralExpression { Type = System.Int32, Value = 5 } } (AddExpression)
    print: IdentifierExpression { Type = System.Int32, Identifier = a } (IdentifierExpression)
    print: IdentifierExpression { Type = System.Int32, Identifier = b } (IdentifierExpression)

Output:
13
31

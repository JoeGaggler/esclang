
Lex:
0000: 0 + 5 -- (1, 1) -- Identifier -- func2
0001: 5 + 1 -- (1, 6) -- Spaces -- " "
0002: 6 + 1 -- (1, 7) -- Colon -- :
0003: 7 + 1 -- (1, 8) -- Colon -- :
0004: 8 + 1 -- (1, 9) -- Spaces -- " "
0005: 9 + 1 -- (1, 10) -- BraceOpen -- {
0006: 10 + 1 -- (1, 11) -- EndOfLine -- \n
0007: 11 + 4 -- (2, 1) -- Spaces -- "    "
0008: 15 + 4 -- (2, 5) -- Identifier -- cond
0009: 19 + 1 -- (2, 9) -- Spaces -- " "
0010: 20 + 1 -- (2, 10) -- Colon -- :
0011: 21 + 1 -- (2, 11) -- Spaces -- " "
0012: 22 + 4 -- (2, 12) -- Identifier -- bool
0013: 26 + 1 -- (2, 16) -- Spaces -- " "
0014: 27 + 1 -- (2, 17) -- Colon -- :
0015: 28 + 1 -- (2, 18) -- Spaces -- " "
0016: 29 + 1 -- (2, 19) -- LessThan -- <
0017: 30 + 1 -- (2, 20) -- GreaterThan -- >
0018: 31 + 1 -- (2, 21) -- EndOfLine -- \n
0019: 32 + 4 -- (3, 1) -- Spaces -- "    "
0020: 36 + 2 -- (3, 5) -- Identifier -- if
0021: 38 + 1 -- (3, 7) -- Spaces -- " "
0022: 39 + 5 -- (3, 8) -- Identifier -- false
0023: 44 + 1 -- (3, 13) -- Spaces -- " "
0024: 45 + 1 -- (3, 14) -- BraceOpen -- {
0025: 46 + 1 -- (3, 15) -- EndOfLine -- \n
0026: 47 + 8 -- (4, 1) -- Spaces -- "        "
0027: 55 + 6 -- (4, 9) -- Identifier -- return
0028: 61 + 1 -- (4, 15) -- Spaces -- " "
0029: 62 + 1 -- (4, 16) -- Number -- 0
0030: 63 + 1 -- (4, 17) -- EndOfLine -- \n
0031: 64 + 4 -- (5, 1) -- Spaces -- "    "
0032: 68 + 1 -- (5, 5) -- BraceClose -- }
0033: 69 + 1 -- (5, 6) -- EndOfLine -- \n
0034: 70 + 4 -- (6, 1) -- Spaces -- "    "
0035: 74 + 2 -- (6, 5) -- Identifier -- if
0036: 76 + 1 -- (6, 7) -- Spaces -- " "
0037: 77 + 1 -- (6, 8) -- Exclamation -- !
0038: 78 + 4 -- (6, 9) -- Identifier -- cond
0039: 82 + 1 -- (6, 13) -- Spaces -- " "
0040: 83 + 1 -- (6, 14) -- BraceOpen -- {
0041: 84 + 1 -- (6, 15) -- Spaces -- " "
0042: 85 + 6 -- (6, 16) -- Identifier -- return
0043: 91 + 1 -- (6, 22) -- Spaces -- " "
0044: 92 + 3 -- (6, 23) -- Number -- 100
0045: 95 + 1 -- (6, 26) -- Spaces -- " "
0046: 96 + 1 -- (6, 27) -- BraceClose -- }
0047: 97 + 1 -- (6, 28) -- EndOfLine -- \n
0048: 98 + 4 -- (7, 1) -- Spaces -- "    "
0049: 102 + 6 -- (7, 5) -- Identifier -- return
0050: 108 + 1 -- (7, 11) -- Spaces -- " "
0051: 109 + 4 -- (7, 12) -- Number -- 9999
0052: 113 + 1 -- (7, 16) -- Spaces -- " "
0053: 114 + 14 -- (7, 17) -- Comment -- // unreachable
0054: 128 + 1 -- (7, 31) -- EndOfLine -- \n
0055: 129 + 1 -- (8, 1) -- BraceClose -- }
0056: 130 + 1 -- (8, 2) -- EndOfLine -- \n
0057: 131 + 5 -- (9, 1) -- Identifier -- func1
0058: 136 + 1 -- (9, 6) -- Spaces -- " "
0059: 137 + 1 -- (9, 7) -- Colon -- :
0060: 138 + 1 -- (9, 8) -- Colon -- :
0061: 139 + 1 -- (9, 9) -- Spaces -- " "
0062: 140 + 1 -- (9, 10) -- BraceOpen -- {
0063: 141 + 1 -- (9, 11) -- EndOfLine -- \n
0064: 142 + 4 -- (10, 1) -- Spaces -- "    "
0065: 146 + 1 -- (10, 5) -- Identifier -- a
0066: 147 + 1 -- (10, 6) -- Spaces -- " "
0067: 148 + 1 -- (10, 7) -- Colon -- :
0068: 149 + 1 -- (10, 8) -- Equals -- =
0069: 150 + 1 -- (10, 9) -- Spaces -- " "
0070: 151 + 1 -- (10, 10) -- Number -- 2
0071: 152 + 1 -- (10, 11) -- EndOfLine -- \n
0072: 153 + 4 -- (11, 1) -- Spaces -- "    "
0073: 157 + 1 -- (11, 5) -- Identifier -- b
0074: 158 + 1 -- (11, 6) -- Spaces -- " "
0075: 159 + 1 -- (11, 7) -- Colon -- :
0076: 160 + 1 -- (11, 8) -- Equals -- =
0077: 161 + 1 -- (11, 9) -- Spaces -- " "
0078: 162 + 1 -- (11, 10) -- Identifier -- a
0079: 163 + 1 -- (11, 11) -- Spaces -- " "
0080: 164 + 1 -- (11, 12) -- Plus -- +
0081: 165 + 1 -- (11, 13) -- Spaces -- " "
0082: 166 + 5 -- (11, 14) -- Identifier -- func2
0083: 171 + 1 -- (11, 19) -- Spaces -- " "
0084: 172 + 5 -- (11, 20) -- Identifier -- false
0085: 177 + 1 -- (11, 25) -- EndOfLine -- \n
0086: 178 + 4 -- (12, 1) -- Spaces -- "    "
0087: 182 + 6 -- (12, 5) -- Identifier -- return
0088: 188 + 1 -- (12, 11) -- Spaces -- " "
0089: 189 + 1 -- (12, 12) -- Identifier -- b
0090: 190 + 1 -- (12, 13) -- EndOfLine -- \n
0091: 191 + 1 -- (13, 1) -- BraceClose -- }
0092: 192 + 1 -- (13, 2) -- EndOfLine -- \n
0093: 193 + 1 -- (14, 1) -- Identifier -- a
0094: 194 + 1 -- (14, 2) -- Spaces -- " "
0095: 195 + 1 -- (14, 3) -- Colon -- :
0096: 196 + 1 -- (14, 4) -- Equals -- =
0097: 197 + 1 -- (14, 5) -- Spaces -- " "
0098: 198 + 2 -- (14, 6) -- Number -- 13
0099: 200 + 1 -- (14, 8) -- EndOfLine -- \n
0100: 201 + 1 -- (15, 1) -- Identifier -- a
0101: 202 + 1 -- (15, 2) -- Spaces -- " "
0102: 203 + 1 -- (15, 3) -- Equals -- =
0103: 204 + 1 -- (15, 4) -- Spaces -- " "
0104: 205 + 2 -- (15, 5) -- Number -- 39
0105: 207 + 1 -- (15, 7) -- EndOfLine -- \n
0106: 208 + 1 -- (16, 1) -- Identifier -- b
0107: 209 + 1 -- (16, 2) -- Spaces -- " "
0108: 210 + 1 -- (16, 3) -- Colon -- :
0109: 211 + 1 -- (16, 4) -- Equals -- =
0110: 212 + 1 -- (16, 5) -- Spaces -- " "
0111: 213 + 1 -- (16, 6) -- Identifier -- a
0112: 214 + 1 -- (16, 7) -- Spaces -- " "
0113: 215 + 1 -- (16, 8) -- Plus -- +
0114: 216 + 1 -- (16, 9) -- Spaces -- " "
0115: 217 + 5 -- (16, 10) -- Identifier -- func1
0116: 222 + 1 -- (16, 15) -- Spaces -- " "
0117: 223 + 1 -- (16, 16) -- Plus -- +
0118: 224 + 1 -- (16, 17) -- Spaces -- " "
0119: 225 + 1 -- (16, 18) -- Number -- 5
0120: 226 + 1 -- (16, 19) -- EndOfLine -- \n
0121: 227 + 1 -- (17, 1) -- Identifier -- b
0122: 228 + 1 -- (17, 2) -- Spaces -- " "
0123: 229 + 1 -- (17, 3) -- Equals -- =
0124: 230 + 1 -- (17, 4) -- Spaces -- " "
0125: 231 + 1 -- (17, 5) -- Identifier -- b
0126: 232 + 1 -- (17, 6) -- Spaces -- " "
0127: 233 + 1 -- (17, 7) -- Plus -- +
0128: 234 + 1 -- (17, 8) -- Spaces -- " "
0129: 235 + 1 -- (17, 9) -- ParenOpen -- (
0130: 236 + 1 -- (17, 10) -- Minus -- -
0131: 237 + 1 -- (17, 11) -- Number -- 1
0132: 238 + 1 -- (17, 12) -- ParenClose -- )
0133: 239 + 1 -- (17, 13) -- EndOfLine -- \n
0134: 240 + 5 -- (18, 1) -- Identifier -- print
0135: 245 + 1 -- (18, 6) -- Spaces -- " "
0136: 246 + 1 -- (18, 7) -- Identifier -- a
0137: 247 + 1 -- (18, 8) -- EndOfLine -- \n
0138: 248 + 5 -- (19, 1) -- Identifier -- print
0139: 253 + 1 -- (19, 6) -- Spaces -- " "
0140: 254 + 1 -- (19, 7) -- Identifier -- b
0141: 255 + 1 -- (19, 8) -- EndOfLine -- \n
0142: 256 + 6 -- (20, 1) -- Identifier -- format
0143: 262 + 1 -- (20, 7) -- Spaces -- " "
0144: 263 + 1 -- (20, 8) -- Colon -- :
0145: 264 + 1 -- (20, 9) -- Colon -- :
0146: 265 + 1 -- (20, 10) -- Spaces -- " "
0147: 266 + 3 -- (20, 11) -- LiteralString -- "C"
0148: 269 + 1 -- (20, 14) -- EndOfLine -- \n
0149: 270 + 5 -- (21, 1) -- Identifier -- print
0150: 275 + 1 -- (21, 6) -- Spaces -- " "
0151: 276 + 6 -- (21, 7) -- Identifier -- format
0152: 282 + 1 -- (21, 13) -- Period -- .
0153: 283 + 6 -- (21, 14) -- Identifier -- Length
0154: 289 + 1 -- (21, 20) -- EndOfLine -- \n
0155: 290 + 5 -- (22, 1) -- Identifier -- print
0156: 295 + 1 -- (22, 6) -- Spaces -- " "
0157: 296 + 1 -- (22, 7) -- ParenOpen -- (
0158: 297 + 1 -- (22, 8) -- Identifier -- b
0159: 298 + 1 -- (22, 9) -- Period -- .
0160: 299 + 8 -- (22, 10) -- Identifier -- ToString
0161: 307 + 1 -- (22, 18) -- Spaces -- " "
0162: 308 + 6 -- (22, 19) -- Identifier -- format
0163: 314 + 1 -- (22, 25) -- ParenClose -- )
0164: 315 + 1 -- (22, 26) -- Spaces -- " "
0165: 316 + 13 -- (22, 27) -- Comment -- // C=currency
0166: 329 + 1 -- (22, 40) -- EndOfLine -- \n
0167: 330 + 6 -- (23, 1) -- Identifier -- return
0168: 336 + 1 -- (23, 7) -- Spaces -- " "
0169: 337 + 15 -- (23, 8) -- Comment -- // early return
0170: 352 + 1 -- (23, 23) -- EndOfLine -- \n
0171: 353 + 5 -- (24, 1) -- Identifier -- print
0172: 358 + 1 -- (24, 6) -- Spaces -- " "
0173: 359 + 13 -- (24, 7) -- LiteralString -- "unreachable"
0174: 372 + 1 -- (24, 20) -- EndOfLine -- \n
0175: 373 + 0 -- (25, 1) -- EndOfFile -- <EOF>

Parse:
declare-static
  id
    identifier: func2
  value
    braces
      declare-static
        id
          identifier: cond
        type
          identifier: bool
        value
          parameter
      call
        target
          identifier: if
        arguments
          identifier: false
          braces
            call
              target
                identifier: return
              arguments
                0
      call
        target
          identifier: if
        arguments
          not
            identifier: cond
          braces
            call
              target
                identifier: return
              arguments
                100
      call
        target
          identifier: return
        arguments
          9999
declare-static
  id
    identifier: func1
  value
    braces
      declare-assign
        id
          identifier: a
        value
          2
      declare-assign
        id
          identifier: b
        value
          plus
            identifier: a
            call
              target
                identifier: func2
              arguments
                identifier: false
      call
        target
          identifier: return
        arguments
          identifier: b
declare-assign
  id
    identifier: a
  value
    13
assign
  identifier: a
  39
declare-assign
  id
    identifier: b
  value
    plus
      plus
        identifier: a
        identifier: func1
      5
assign
  identifier: b
  plus
    identifier: b
    negation
      1
call
  target
    identifier: print
  arguments
    identifier: a
call
  target
    identifier: print
  arguments
    identifier: b
declare-static
  id
    identifier: format
  value
    "C"
call
  target
    identifier: print
  arguments
    member
      identifier: format
      identifier: Length
call
  target
    identifier: print
  arguments
    call
      target
        member
          identifier: b
          identifier: ToString
      arguments
        identifier: format
identifier: return
call
  target
    identifier: print
  arguments
    "unreachable"

Analysis Log:
=== Build: init ===
slot 0001 in 0000 :: File = FileCodeData { Main = 0 }
slot 0002 in 0001 :: Braces = BracesCodeData { Lines = System.Int32[] }
slot 0001 in 0000 <- File = FileCodeData { Main = 2 }
slot 0003 in 0002 :: Declare = DeclareCodeData { Name = func2, IsStatic = True, Type = 0, Value = 0 }
slot 0002 in 0001 -> Braces = BracesCodeData { Lines = System.Int32[] }
slot 0004 in 0003 :: Braces = BracesCodeData { Lines = System.Int32[] }
slot 0005 in 0004 :: Declare = DeclareCodeData { Name = cond, IsStatic = True, Type = 0, Value = 0 }
slot 0004 in 0003 -> Braces = BracesCodeData { Lines = System.Int32[] }
slot 0006 in 0005 :: Identifier = IdentifierCodeData { Name = bool, Target = 0 }
slot 0005 in 0004 <- Declare = DeclareCodeData { Name = cond, IsStatic = True, Type = 6, Value = 0 }
slot 0007 in 0005 :: Parameter = ParameterCodeData { }
slot 0005 in 0004 <- Declare = DeclareCodeData { Name = cond, IsStatic = True, Type = 6, Value = 7 }
slot 0008 in 0004 :: Call = CallCodeData { Target = 0, Args = System.Int32[], DotnetMethod =  }
slot 0009 in 0008 :: Identifier = IdentifierCodeData { Name = if, Target = 0 }
slot 0008 in 0004 <- Call = CallCodeData { Target = 9, Args = System.Int32[], DotnetMethod =  }
slot 0010 in 0008 :: Identifier = IdentifierCodeData { Name = false, Target = 0 }
slot 0011 in 0008 :: Braces = BracesCodeData { Lines = System.Int32[] }
slot 0012 in 0011 :: Call = CallCodeData { Target = 0, Args = System.Int32[], DotnetMethod =  }
slot 0013 in 0012 :: Identifier = IdentifierCodeData { Name = return, Target = 0 }
slot 0012 in 0011 <- Call = CallCodeData { Target = 13, Args = System.Int32[], DotnetMethod =  }
slot 0014 in 0012 :: Integer = IntegerCodeData { Value = 0 }
slot 0012 in 0011 <- Call = CallCodeData { Target = 13, Args = System.Int32[], DotnetMethod =  }
slot 0011 in 0008 <- Braces = BracesCodeData { Lines = System.Int32[] }
slot 0008 in 0004 <- Call = CallCodeData { Target = 9, Args = System.Int32[], DotnetMethod =  }
slot 0015 in 0004 :: Call = CallCodeData { Target = 0, Args = System.Int32[], DotnetMethod =  }
slot 0016 in 0015 :: Identifier = IdentifierCodeData { Name = if, Target = 0 }
slot 0015 in 0004 <- Call = CallCodeData { Target = 16, Args = System.Int32[], DotnetMethod =  }
slot 0017 in 0015 :: Identifier = IdentifierCodeData { Name = cond, Target = 0 }
slot 0018 in 0015 :: LogicalNegation = LogicalNegationCodeData { Value = 17 }
slot 0019 in 0015 :: Braces = BracesCodeData { Lines = System.Int32[] }
slot 0020 in 0019 :: Call = CallCodeData { Target = 0, Args = System.Int32[], DotnetMethod =  }
slot 0021 in 0020 :: Identifier = IdentifierCodeData { Name = return, Target = 0 }
slot 0020 in 0019 <- Call = CallCodeData { Target = 21, Args = System.Int32[], DotnetMethod =  }
slot 0022 in 0020 :: Integer = IntegerCodeData { Value = 100 }
slot 0020 in 0019 <- Call = CallCodeData { Target = 21, Args = System.Int32[], DotnetMethod =  }
slot 0019 in 0015 <- Braces = BracesCodeData { Lines = System.Int32[] }
slot 0015 in 0004 <- Call = CallCodeData { Target = 16, Args = System.Int32[], DotnetMethod =  }
slot 0023 in 0004 :: Call = CallCodeData { Target = 0, Args = System.Int32[], DotnetMethod =  }
slot 0024 in 0023 :: Identifier = IdentifierCodeData { Name = return, Target = 0 }
slot 0023 in 0004 <- Call = CallCodeData { Target = 24, Args = System.Int32[], DotnetMethod =  }
slot 0025 in 0023 :: Integer = IntegerCodeData { Value = 9999 }
slot 0023 in 0004 <- Call = CallCodeData { Target = 24, Args = System.Int32[], DotnetMethod =  }
slot 0004 in 0003 <- Braces = BracesCodeData { Lines = System.Int32[] }
slot 0003 in 0002 <- Declare = DeclareCodeData { Name = func2, IsStatic = True, Type = 0, Value = 4 }
slot 0026 in 0002 :: Declare = DeclareCodeData { Name = func1, IsStatic = True, Type = 0, Value = 0 }
slot 0002 in 0001 -> Braces = BracesCodeData { Lines = System.Int32[] }
slot 0027 in 0026 :: Braces = BracesCodeData { Lines = System.Int32[] }
slot 0028 in 0027 :: Declare = DeclareCodeData { Name = a, IsStatic = False, Type = 0, Value = 0 }
slot 0027 in 0026 -> Braces = BracesCodeData { Lines = System.Int32[] }
slot 0029 in 0028 :: Integer = IntegerCodeData { Value = 2 }
slot 0028 in 0027 <- Declare = DeclareCodeData { Name = a, IsStatic = False, Type = 0, Value = 29 }
slot 0030 in 0027 :: Declare = DeclareCodeData { Name = b, IsStatic = False, Type = 0, Value = 0 }
slot 0027 in 0026 -> Braces = BracesCodeData { Lines = System.Int32[] }
slot 0031 in 0030 :: Add = AddOpCodeData { Left = 0, Right = 0 }
slot 0032 in 0031 :: Identifier = IdentifierCodeData { Name = a, Target = 0 }
slot 0033 in 0031 :: Call = CallCodeData { Target = 0, Args = System.Int32[], DotnetMethod =  }
slot 0034 in 0033 :: Identifier = IdentifierCodeData { Name = func2, Target = 0 }
slot 0033 in 0031 <- Call = CallCodeData { Target = 34, Args = System.Int32[], DotnetMethod =  }
slot 0035 in 0033 :: Identifier = IdentifierCodeData { Name = false, Target = 0 }
slot 0033 in 0031 <- Call = CallCodeData { Target = 34, Args = System.Int32[], DotnetMethod =  }
slot 0031 in 0030 <- Add = AddOpCodeData { Left = 32, Right = 33 }
slot 0030 in 0027 <- Declare = DeclareCodeData { Name = b, IsStatic = False, Type = 0, Value = 31 }
slot 0036 in 0027 :: Call = CallCodeData { Target = 0, Args = System.Int32[], DotnetMethod =  }
slot 0037 in 0036 :: Identifier = IdentifierCodeData { Name = return, Target = 0 }
slot 0036 in 0027 <- Call = CallCodeData { Target = 37, Args = System.Int32[], DotnetMethod =  }
slot 0038 in 0036 :: Identifier = IdentifierCodeData { Name = b, Target = 0 }
slot 0036 in 0027 <- Call = CallCodeData { Target = 37, Args = System.Int32[], DotnetMethod =  }
slot 0027 in 0026 <- Braces = BracesCodeData { Lines = System.Int32[] }
slot 0026 in 0002 <- Declare = DeclareCodeData { Name = func1, IsStatic = True, Type = 0, Value = 27 }
slot 0039 in 0002 :: Declare = DeclareCodeData { Name = a, IsStatic = False, Type = 0, Value = 0 }
slot 0002 in 0001 -> Braces = BracesCodeData { Lines = System.Int32[] }
slot 0040 in 0039 :: Integer = IntegerCodeData { Value = 13 }
slot 0039 in 0002 <- Declare = DeclareCodeData { Name = a, IsStatic = False, Type = 0, Value = 40 }
slot 0041 in 0002 :: Assign = AssignCodeData { Target = 0, Value = 0 }
slot 0042 in 0041 :: Identifier = IdentifierCodeData { Name = a, Target = 0 }
slot 0041 in 0002 <- Assign = AssignCodeData { Target = 42, Value = 0 }
slot 0043 in 0041 :: Integer = IntegerCodeData { Value = 39 }
slot 0041 in 0002 <- Assign = AssignCodeData { Target = 42, Value = 43 }
slot 0044 in 0002 :: Declare = DeclareCodeData { Name = b, IsStatic = False, Type = 0, Value = 0 }
slot 0002 in 0001 -> Braces = BracesCodeData { Lines = System.Int32[] }
slot 0045 in 0044 :: Add = AddOpCodeData { Left = 0, Right = 0 }
slot 0046 in 0045 :: Add = AddOpCodeData { Left = 0, Right = 0 }
slot 0047 in 0046 :: Identifier = IdentifierCodeData { Name = a, Target = 0 }
slot 0048 in 0046 :: Identifier = IdentifierCodeData { Name = func1, Target = 0 }
slot 0046 in 0045 <- Add = AddOpCodeData { Left = 47, Right = 48 }
slot 0049 in 0045 :: Integer = IntegerCodeData { Value = 5 }
slot 0045 in 0044 <- Add = AddOpCodeData { Left = 46, Right = 49 }
slot 0044 in 0002 <- Declare = DeclareCodeData { Name = b, IsStatic = False, Type = 0, Value = 45 }
slot 0050 in 0002 :: Assign = AssignCodeData { Target = 0, Value = 0 }
slot 0051 in 0050 :: Identifier = IdentifierCodeData { Name = b, Target = 0 }
slot 0050 in 0002 <- Assign = AssignCodeData { Target = 51, Value = 0 }
slot 0052 in 0050 :: Add = AddOpCodeData { Left = 0, Right = 0 }
slot 0053 in 0052 :: Identifier = IdentifierCodeData { Name = b, Target = 0 }
slot 0054 in 0052 :: Integer = IntegerCodeData { Value = 1 }
slot 0055 in 0052 :: Negation = NegationCodeData { Value = 54 }
slot 0052 in 0050 <- Add = AddOpCodeData { Left = 53, Right = 55 }
slot 0050 in 0002 <- Assign = AssignCodeData { Target = 51, Value = 52 }
slot 0056 in 0002 :: Call = CallCodeData { Target = 0, Args = System.Int32[], DotnetMethod =  }
slot 0057 in 0056 :: Identifier = IdentifierCodeData { Name = print, Target = 0 }
slot 0056 in 0002 <- Call = CallCodeData { Target = 57, Args = System.Int32[], DotnetMethod =  }
slot 0058 in 0056 :: Identifier = IdentifierCodeData { Name = a, Target = 0 }
slot 0056 in 0002 <- Call = CallCodeData { Target = 57, Args = System.Int32[], DotnetMethod =  }
slot 0059 in 0002 :: Call = CallCodeData { Target = 0, Args = System.Int32[], DotnetMethod =  }
slot 0060 in 0059 :: Identifier = IdentifierCodeData { Name = print, Target = 0 }
slot 0059 in 0002 <- Call = CallCodeData { Target = 60, Args = System.Int32[], DotnetMethod =  }
slot 0061 in 0059 :: Identifier = IdentifierCodeData { Name = b, Target = 0 }
slot 0059 in 0002 <- Call = CallCodeData { Target = 60, Args = System.Int32[], DotnetMethod =  }
slot 0062 in 0002 :: Declare = DeclareCodeData { Name = format, IsStatic = True, Type = 0, Value = 0 }
slot 0002 in 0001 -> Braces = BracesCodeData { Lines = System.Int32[] }
slot 0063 in 0062 :: String = StringCodeData { Value = C }
slot 0062 in 0002 <- Declare = DeclareCodeData { Name = format, IsStatic = True, Type = 0, Value = 63 }
slot 0064 in 0002 :: Call = CallCodeData { Target = 0, Args = System.Int32[], DotnetMethod =  }
slot 0065 in 0064 :: Identifier = IdentifierCodeData { Name = print, Target = 0 }
slot 0064 in 0002 <- Call = CallCodeData { Target = 65, Args = System.Int32[], DotnetMethod =  }
slot 0066 in 0064 :: Member = MemberCodeData { Target = 0, Member = 0 }
slot 0067 in 0066 :: Identifier = IdentifierCodeData { Name = format, Target = 0 }
slot 0066 in 0064 <- Member = MemberCodeData { Target = 67, Member = 0 }
slot 0068 in 0066 :: Identifier = IdentifierCodeData { Name = Length, Target = 0 }
slot 0066 in 0064 <- Member = MemberCodeData { Target = 67, Member = 68 }
slot 0064 in 0002 <- Call = CallCodeData { Target = 65, Args = System.Int32[], DotnetMethod =  }
slot 0069 in 0002 :: Call = CallCodeData { Target = 0, Args = System.Int32[], DotnetMethod =  }
slot 0070 in 0069 :: Identifier = IdentifierCodeData { Name = print, Target = 0 }
slot 0069 in 0002 <- Call = CallCodeData { Target = 70, Args = System.Int32[], DotnetMethod =  }
slot 0071 in 0069 :: Call = CallCodeData { Target = 0, Args = System.Int32[], DotnetMethod =  }
slot 0072 in 0071 :: Member = MemberCodeData { Target = 0, Member = 0 }
slot 0073 in 0072 :: Identifier = IdentifierCodeData { Name = b, Target = 0 }
slot 0072 in 0071 <- Member = MemberCodeData { Target = 73, Member = 0 }
slot 0074 in 0072 :: Identifier = IdentifierCodeData { Name = ToString, Target = 0 }
slot 0072 in 0071 <- Member = MemberCodeData { Target = 73, Member = 74 }
slot 0071 in 0069 <- Call = CallCodeData { Target = 72, Args = System.Int32[], DotnetMethod =  }
slot 0075 in 0071 :: Identifier = IdentifierCodeData { Name = format, Target = 0 }
slot 0071 in 0069 <- Call = CallCodeData { Target = 72, Args = System.Int32[], DotnetMethod =  }
slot 0069 in 0002 <- Call = CallCodeData { Target = 70, Args = System.Int32[], DotnetMethod =  }
slot 0076 in 0002 :: Identifier = IdentifierCodeData { Name = return, Target = 0 }
slot 0077 in 0002 :: Call = CallCodeData { Target = 0, Args = System.Int32[], DotnetMethod =  }
slot 0078 in 0077 :: Identifier = IdentifierCodeData { Name = print, Target = 0 }
slot 0077 in 0002 <- Call = CallCodeData { Target = 78, Args = System.Int32[], DotnetMethod =  }
slot 0079 in 0077 :: String = StringCodeData { Value = unreachable }
slot 0077 in 0002 <- Call = CallCodeData { Target = 78, Args = System.Int32[], DotnetMethod =  }
slot 0002 in 0001 <- Braces = BracesCodeData { Lines = System.Int32[] }
=== Build: return ===
add type 1 = VoidTypeData { }
add type 2 = FunctionTypeData { ReturnType = 1 }
slot 0002 in 0001 <- Braces : 2 = BracesCodeData { Lines = System.Int32[] }
slot 0004 in 0003 <- Braces : 2 = BracesCodeData { Lines = System.Int32[] }
slot 0011 in 0008 <- Braces : 2 = BracesCodeData { Lines = System.Int32[] }
slot 0013 in 0012 -> Identifier = IdentifierCodeData { Name = return, Target = 0 }
slot 0012 in 0011 << Return = ReturnCodeData { Value = 14, Function = 0 }
slot 0013 in 0012 << Unknown = InvalidCodeData { }
slot 0012 in 0011 -- call -> return
slot 0019 in 0015 <- Braces : 2 = BracesCodeData { Lines = System.Int32[] }
slot 0021 in 0020 -> Identifier = IdentifierCodeData { Name = return, Target = 0 }
slot 0020 in 0019 << Return = ReturnCodeData { Value = 22, Function = 0 }
slot 0021 in 0020 << Unknown = InvalidCodeData { }
slot 0020 in 0019 -- call -> return
slot 0024 in 0023 -> Identifier = IdentifierCodeData { Name = return, Target = 0 }
slot 0023 in 0004 << Return = ReturnCodeData { Value = 25, Function = 0 }
slot 0024 in 0023 << Unknown = InvalidCodeData { }
slot 0023 in 0004 -- call -> return
slot 0027 in 0026 <- Braces : 2 = BracesCodeData { Lines = System.Int32[] }
slot 0034 in 0033 -> Identifier = IdentifierCodeData { Name = func2, Target = 0 }
slot 0037 in 0036 -> Identifier = IdentifierCodeData { Name = return, Target = 0 }
slot 0036 in 0027 << Return = ReturnCodeData { Value = 38, Function = 0 }
slot 0037 in 0036 << Unknown = InvalidCodeData { }
slot 0036 in 0027 -- call -> return
slot 0057 in 0056 -> Identifier = IdentifierCodeData { Name = print, Target = 0 }
slot 0060 in 0059 -> Identifier = IdentifierCodeData { Name = print, Target = 0 }
slot 0065 in 0064 -> Identifier = IdentifierCodeData { Name = print, Target = 0 }
slot 0070 in 0069 -> Identifier = IdentifierCodeData { Name = print, Target = 0 }
slot 0072 in 0071 -> Member = MemberCodeData { Target = 73, Member = 74 }
slot 0080 in 0076 :: Void = VoidCodeData { }
slot 0080 in 0076 <- Void : 1 = VoidCodeData { }
slot 0076 in 0002 << Return = ReturnCodeData { Value = 80, Function = 0 }
slot 0076 in 0002 <- Return : 1 = ReturnCodeData { Value = 80, Function = 0 }
slot 0078 in 0077 -> Identifier = IdentifierCodeData { Name = print, Target = 0 }
slot 0012 <- returns to 0011
slot 0012 in 0011 <- Return = ReturnCodeData { Value = 14, Function = 11 }
slot 0011 in 0008 <- Braces : 0 = BracesCodeData { Lines = System.Int32[] }
slot 0020 <- returns to 0019
slot 0020 in 0019 <- Return = ReturnCodeData { Value = 22, Function = 19 }
slot 0019 in 0015 <- Braces : 0 = BracesCodeData { Lines = System.Int32[] }
slot 0023 <- returns to 0004
slot 0023 in 0004 <- Return = ReturnCodeData { Value = 25, Function = 4 }
slot 0004 in 0003 <- Braces : 0 = BracesCodeData { Lines = System.Int32[] }
slot 0036 <- returns to 0027
slot 0036 in 0027 <- Return = ReturnCodeData { Value = 38, Function = 27 }
slot 0027 in 0026 <- Braces : 0 = BracesCodeData { Lines = System.Int32[] }
slot 0076 <- returns to 0002
slot 0076 in 0002 <- Return = ReturnCodeData { Value = 80, Function = 2 }
slot 0002 in 0001 <- Braces : 0 = BracesCodeData { Lines = System.Int32[] }
=== Build: resolve identifiers ===
identifier: 0006 = IdentifierCodeData { Name = bool, Target = 0 }
  0005 = Declare
      0003 = Declare
          0001 = File
slot 0006 in 0005 << Intrinsic = IntrinsicCodeData { Name = bool }
add type 3 = DotnetTypeData { Type = System.Boolean }
add type 4 = MetaTypeData { Type = 3 }
slot 0006 in 0005 <- Intrinsic : 4 = IntrinsicCodeData { Name = bool }
identifier: 0009 = IdentifierCodeData { Name = if, Target = 0 }
  0008 = Call
      0003 = Declare
          0001 = File
slot 0008 in 0004 << If = IfSlotCodeData { Condition = 10, Body = 11 }
slot 0009 in 0008 << Unknown = InvalidCodeData { }
identifier: 0010 = IdentifierCodeData { Name = false, Target = 0 }
  0008 = If
      0003 = Declare
          0001 = File
slot 0010 in 0008 << Boolean = BooleanCodeData { Value = False }
slot 0010 in 0008 <- Boolean : 3 = BooleanCodeData { Value = False }
identifier: 0016 = IdentifierCodeData { Name = if, Target = 0 }
  0015 = Call
      0003 = Declare
          0001 = File
slot 0015 in 0004 << If = IfSlotCodeData { Condition = 18, Body = 19 }
slot 0016 in 0015 << Unknown = InvalidCodeData { }
identifier: 0017 = IdentifierCodeData { Name = cond, Target = 0 }
  0015 = If
    0004 FOUND: BracesCodeData { Lines = System.Int32[] }
slot 0017 in 0015 <- Identifier = IdentifierCodeData { Name = cond, Target = 5 }
identifier: 0032 = IdentifierCodeData { Name = a, Target = 0 }
  0031 = Add
    0030 = Declare
      0027 FOUND: BracesCodeData { Lines = System.Int32[] }
slot 0032 in 0031 <- Identifier = IdentifierCodeData { Name = a, Target = 28 }
identifier: 0034 = IdentifierCodeData { Name = func2, Target = 0 }
  0033 = Call
    0031 = Add
      0030 = Declare
          0026 = Declare
            0002 FOUND: BracesCodeData { Lines = System.Int32[] }
slot 0034 in 0033 <- Identifier = IdentifierCodeData { Name = func2, Target = 3 }
identifier: 0035 = IdentifierCodeData { Name = false, Target = 0 }
  0033 = Call
    0031 = Add
      0030 = Declare
          0026 = Declare
              0001 = File
slot 0035 in 0033 << Boolean = BooleanCodeData { Value = False }
slot 0035 in 0033 <- Boolean : 3 = BooleanCodeData { Value = False }
identifier: 0038 = IdentifierCodeData { Name = b, Target = 0 }
  0036 = Return
    0027 FOUND: BracesCodeData { Lines = System.Int32[] }
slot 0038 in 0036 <- Identifier = IdentifierCodeData { Name = b, Target = 30 }
identifier: 0042 = IdentifierCodeData { Name = a, Target = 0 }
  0041 = Assign
    0002 FOUND: BracesCodeData { Lines = System.Int32[] }
slot 0042 in 0041 <- Identifier = IdentifierCodeData { Name = a, Target = 39 }
identifier: 0047 = IdentifierCodeData { Name = a, Target = 0 }
  0046 = Add
    0045 = Add
      0044 = Declare
        0002 FOUND: BracesCodeData { Lines = System.Int32[] }
slot 0047 in 0046 <- Identifier = IdentifierCodeData { Name = a, Target = 39 }
identifier: 0048 = IdentifierCodeData { Name = func1, Target = 0 }
  0046 = Add
    0045 = Add
      0044 = Declare
        0002 FOUND: BracesCodeData { Lines = System.Int32[] }
slot 0048 in 0046 <- Identifier = IdentifierCodeData { Name = func1, Target = 26 }
identifier: 0051 = IdentifierCodeData { Name = b, Target = 0 }
  0050 = Assign
    0002 FOUND: BracesCodeData { Lines = System.Int32[] }
slot 0051 in 0050 <- Identifier = IdentifierCodeData { Name = b, Target = 44 }
identifier: 0053 = IdentifierCodeData { Name = b, Target = 0 }
  0052 = Add
    0050 = Assign
      0002 FOUND: BracesCodeData { Lines = System.Int32[] }
slot 0053 in 0052 <- Identifier = IdentifierCodeData { Name = b, Target = 44 }
identifier: 0057 = IdentifierCodeData { Name = print, Target = 0 }
  0056 = Call
      0001 = File
slot 0057 in 0056 << Intrinsic = IntrinsicCodeData { Name = print }
add type 5 = DotnetTypeData { Type = System.String }
add type 6 = FunctionTypeData { ReturnType = 5 }
slot 0057 in 0056 <- Intrinsic : 6 = IntrinsicCodeData { Name = print }
identifier: 0058 = IdentifierCodeData { Name = a, Target = 0 }
  0056 = Call
    0002 FOUND: BracesCodeData { Lines = System.Int32[] }
slot 0058 in 0056 <- Identifier = IdentifierCodeData { Name = a, Target = 39 }
identifier: 0060 = IdentifierCodeData { Name = print, Target = 0 }
  0059 = Call
      0001 = File
slot 0060 in 0059 << Intrinsic = IntrinsicCodeData { Name = print }
slot 0060 in 0059 <- Intrinsic : 6 = IntrinsicCodeData { Name = print }
identifier: 0061 = IdentifierCodeData { Name = b, Target = 0 }
  0059 = Call
    0002 FOUND: BracesCodeData { Lines = System.Int32[] }
slot 0061 in 0059 <- Identifier = IdentifierCodeData { Name = b, Target = 44 }
identifier: 0065 = IdentifierCodeData { Name = print, Target = 0 }
  0064 = Call
      0001 = File
slot 0065 in 0064 << Intrinsic = IntrinsicCodeData { Name = print }
slot 0065 in 0064 <- Intrinsic : 6 = IntrinsicCodeData { Name = print }
identifier: 0067 = IdentifierCodeData { Name = format, Target = 0 }
  0066 = Member
    0064 = Call
      0002 FOUND: BracesCodeData { Lines = System.Int32[] }
slot 0067 in 0066 <- Identifier = IdentifierCodeData { Name = format, Target = 62 }
identifier: 0068 = IdentifierCodeData { Name = Length, Target = 0 }
  0066 = Member
    0064 = Call
        0001 = File
          0000 = ROOT
identifier: 0070 = IdentifierCodeData { Name = print, Target = 0 }
  0069 = Call
      0001 = File
slot 0070 in 0069 << Intrinsic = IntrinsicCodeData { Name = print }
slot 0070 in 0069 <- Intrinsic : 6 = IntrinsicCodeData { Name = print }
identifier: 0073 = IdentifierCodeData { Name = b, Target = 0 }
  0072 = Member
    0071 = Call
      0069 = Call
        0002 FOUND: BracesCodeData { Lines = System.Int32[] }
slot 0073 in 0072 <- Identifier = IdentifierCodeData { Name = b, Target = 44 }
identifier: 0074 = IdentifierCodeData { Name = ToString, Target = 0 }
  0072 = Member
    0071 = Call
      0069 = Call
          0001 = File
            0000 = ROOT
identifier: 0075 = IdentifierCodeData { Name = format, Target = 0 }
  0071 = Call
    0069 = Call
      0002 FOUND: BracesCodeData { Lines = System.Int32[] }
slot 0075 in 0071 <- Identifier = IdentifierCodeData { Name = format, Target = 62 }
identifier: 0078 = IdentifierCodeData { Name = print, Target = 0 }
  0077 = Call
      0001 = File
slot 0078 in 0077 << Intrinsic = IntrinsicCodeData { Name = print }
slot 0078 in 0077 <- Intrinsic : 6 = IntrinsicCodeData { Name = print }
=== Build: types ===
enqueue 0006
intrinsic: 0006 = CodeSlot { Parent = 5, CodeType = Intrinsic, Data = IntrinsicCodeData { Name = bool }, TypeSlot = 4 }
add type 7 = ParameterTypeData { }
slot 0007 in 0005 <- Parameter : 7 = ParameterCodeData { }
enqueue 0007
add type 8 = DotnetTypeData { Type = System.Int32 }
slot 0014 in 0012 <- Integer : 8 = IntegerCodeData { Value = 0 }
enqueue 0014
slot 0022 in 0020 <- Integer : 8 = IntegerCodeData { Value = 100 }
enqueue 0022
slot 0025 in 0023 <- Integer : 8 = IntegerCodeData { Value = 9999 }
enqueue 0025
slot 0029 in 0028 <- Integer : 8 = IntegerCodeData { Value = 2 }
enqueue 0029
slot 0040 in 0039 <- Integer : 8 = IntegerCodeData { Value = 13 }
enqueue 0040
slot 0043 in 0041 <- Integer : 8 = IntegerCodeData { Value = 39 }
enqueue 0043
slot 0049 in 0045 <- Integer : 8 = IntegerCodeData { Value = 5 }
enqueue 0049
slot 0054 in 0052 <- Integer : 8 = IntegerCodeData { Value = 1 }
enqueue 0054
enqueue 0057
intrinsic: 0057 = CodeSlot { Parent = 56, CodeType = Intrinsic, Data = IntrinsicCodeData { Name = print }, TypeSlot = 6 }
enqueue 0060
intrinsic: 0060 = CodeSlot { Parent = 59, CodeType = Intrinsic, Data = IntrinsicCodeData { Name = print }, TypeSlot = 6 }
slot 0063 in 0062 <- String : 5 = StringCodeData { Value = C }
enqueue 0063
enqueue 0065
intrinsic: 0065 = CodeSlot { Parent = 64, CodeType = Intrinsic, Data = IntrinsicCodeData { Name = print }, TypeSlot = 6 }
enqueue 0070
intrinsic: 0070 = CodeSlot { Parent = 69, CodeType = Intrinsic, Data = IntrinsicCodeData { Name = print }, TypeSlot = 6 }
enqueue 0078
intrinsic: 0078 = CodeSlot { Parent = 77, CodeType = Intrinsic, Data = IntrinsicCodeData { Name = print }, TypeSlot = 6 }
slot 0079 in 0077 <- String : 5 = StringCodeData { Value = unreachable }
enqueue 0079
enqueue 0080
dequeue: 0006
slot 0005 in 0004 <- Declare : 3 = DeclareCodeData { Name = cond, IsStatic = True, Type = 6, Value = 7 }
dequeue: 0007
dequeue: 0014
slot 0012 return: type <- DotnetTypeData { Type = System.Int32 } 8 via 0014
slot 0012 in 0011 <- Return : 8 = ReturnCodeData { Value = 14, Function = 11 }
dequeue: 0022
slot 0020 return: type <- DotnetTypeData { Type = System.Int32 } 8 via 0022
slot 0020 in 0019 <- Return : 8 = ReturnCodeData { Value = 22, Function = 19 }
dequeue: 0025
slot 0023 return: type <- DotnetTypeData { Type = System.Int32 } 8 via 0025
slot 0023 in 0004 <- Return : 8 = ReturnCodeData { Value = 25, Function = 4 }
dequeue: 0029
slot 0028 in 0027 <- Declare : 8 = DeclareCodeData { Name = a, IsStatic = False, Type = 0, Value = 29 }
dequeue: 0040
slot 0039 in 0002 <- Declare : 8 = DeclareCodeData { Name = a, IsStatic = False, Type = 0, Value = 40 }
dequeue: 0043
slot 0041 assign: type <- DotnetTypeData { Type = System.Int32 } 8 via 0043
slot 0041 in 0002 <- Assign : 8 = AssignCodeData { Target = 42, Value = 43 }
dequeue: 0049
dequeue: 0054
slot 0055 negation: type <- DotnetTypeData { Type = System.Int32 } 8 via 0054
slot 0055 in 0052 <- Negation : 8 = NegationCodeData { Value = 54 }
dequeue: 0057
dequeue: 0060
dequeue: 0063
slot 0062 in 0002 <- Declare : 5 = DeclareCodeData { Name = format, IsStatic = True, Type = 0, Value = 63 }
dequeue: 0065
dequeue: 0070
dequeue: 0078
slot 0077 in 0002 <- Call : 5 = CallCodeData { Target = 78, Args = System.Int32[], DotnetMethod =  }
dequeue: 0079
dequeue: 0080
dequeue: 0005
slot 0017 in 0015 <- Identifier : 3 = IdentifierCodeData { Name = cond, Target = 5 }
dequeue: 0012
add type 9 = FunctionTypeData { ReturnType = 8 }
slot 0011 braces: found return 0012 9
slot 0011 in 0008 <- Braces : 9 = BracesCodeData { Lines = System.Int32[] }
dequeue: 0020
slot 0019 braces: found return 0020 9
slot 0019 in 0015 <- Braces : 9 = BracesCodeData { Lines = System.Int32[] }
dequeue: 0023
slot 0004 braces: found return 0023 9
slot 0004 in 0003 <- Braces : 9 = BracesCodeData { Lines = System.Int32[] }
dequeue: 0028
slot 0032 in 0031 <- Identifier : 8 = IdentifierCodeData { Name = a, Target = 28 }
dequeue: 0039
slot 0042 in 0041 <- Identifier : 8 = IdentifierCodeData { Name = a, Target = 39 }
slot 0047 in 0046 <- Identifier : 8 = IdentifierCodeData { Name = a, Target = 39 }
slot 0058 in 0056 <- Identifier : 8 = IdentifierCodeData { Name = a, Target = 39 }
dequeue: 0041
dequeue: 0055
dequeue: 0062
slot 0067 in 0066 <- Identifier : 5 = IdentifierCodeData { Name = format, Target = 62 }
slot 0075 in 0071 <- Identifier : 5 = IdentifierCodeData { Name = format, Target = 62 }
dequeue: 0077
dequeue: 0017
slot 0018 not: type <- DotnetTypeData { Type = System.Boolean } 3 via 0017
slot 0018 in 0015 <- LogicalNegation : 3 = LogicalNegationCodeData { Value = 17 }
dequeue: 0011
slot 0008 if: type <- FunctionTypeData { ReturnType = 8 } via 0010
slot 0008 in 0004 <- If : 9 = IfSlotCodeData { Condition = 10, Body = 11 }
dequeue: 0019
slot 0015 if: type <- FunctionTypeData { ReturnType = 8 } via 0018
slot 0015 in 0004 <- If : 9 = IfSlotCodeData { Condition = 18, Body = 19 }
dequeue: 0004
slot 0003 in 0002 <- Declare : 9 = DeclareCodeData { Name = func2, IsStatic = True, Type = 0, Value = 4 }
dequeue: 0032
dequeue: 0042
dequeue: 0047
dequeue: 0058
slot 0056 in 0002 <- Call : 5 = CallCodeData { Target = 57, Args = System.Int32[], DotnetMethod =  }
dequeue: 0067
add type 10 = DotnetMemberTypeData { TargetType = 5, MemberName = Length, MemberType = Property, Members = System.Reflection.MemberInfo[] }
slot 0066 in 0064 <- Member : 10 = MemberCodeData { Target = 67, Member = 68 }
slot 0068 in 0066 <- Identifier : 10 = IdentifierCodeData { Name = Length, Target = 0 }
dequeue: 0075
dequeue: 0018
dequeue: 0008
dequeue: 0015
dequeue: 0003
slot 0034 in 0033 <- Identifier : 9 = IdentifierCodeData { Name = func2, Target = 3 }
dequeue: 0056
dequeue: 0066
slot 0064 in 0002 <- Call : 5 = CallCodeData { Target = 65, Args = System.Int32[], DotnetMethod =  }
dequeue: 0068
dequeue: 0034
slot 0033 in 0031 <- Call : 8 = CallCodeData { Target = 34, Args = System.Int32[], DotnetMethod =  }
dequeue: 0064
dequeue: 0033
slot 0031 in 0030 <- Add : 8 = AddOpCodeData { Left = 32, Right = 33 }
dequeue: 0031
slot 0030 in 0027 <- Declare : 8 = DeclareCodeData { Name = b, IsStatic = False, Type = 0, Value = 31 }
dequeue: 0030
slot 0038 in 0036 <- Identifier : 8 = IdentifierCodeData { Name = b, Target = 30 }
dequeue: 0038
slot 0036 return: type <- DotnetTypeData { Type = System.Int32 } 8 via 0038
slot 0036 in 0027 <- Return : 8 = ReturnCodeData { Value = 38, Function = 27 }
dequeue: 0036
slot 0027 braces: found return 0036 9
slot 0027 in 0026 <- Braces : 9 = BracesCodeData { Lines = System.Int32[] }
dequeue: 0027
slot 0026 in 0002 <- Declare : 9 = DeclareCodeData { Name = func1, IsStatic = True, Type = 0, Value = 27 }
dequeue: 0026
slot 0081 in 0048 :: Identifier = IdentifierCodeData { Name = func1, Target = 26 }
slot 0081 in 0048 <- Identifier : 9 = IdentifierCodeData { Name = func1, Target = 26 }
slot 0048 in 0046 << Call = CallCodeData { Target = 81, Args = System.Int32[], DotnetMethod =  }
dequeue: 0081
slot 0048 in 0046 <- Call : 8 = CallCodeData { Target = 81, Args = System.Int32[], DotnetMethod =  }
dequeue: 0048
slot 0046 in 0045 <- Add : 8 = AddOpCodeData { Left = 47, Right = 48 }
dequeue: 0048
dequeue: 0046
slot 0045 in 0044 <- Add : 8 = AddOpCodeData { Left = 46, Right = 49 }
dequeue: 0045
slot 0044 in 0002 <- Declare : 8 = DeclareCodeData { Name = b, IsStatic = False, Type = 0, Value = 45 }
dequeue: 0044
slot 0051 in 0050 <- Identifier : 8 = IdentifierCodeData { Name = b, Target = 44 }
slot 0053 in 0052 <- Identifier : 8 = IdentifierCodeData { Name = b, Target = 44 }
slot 0061 in 0059 <- Identifier : 8 = IdentifierCodeData { Name = b, Target = 44 }
slot 0073 in 0072 <- Identifier : 8 = IdentifierCodeData { Name = b, Target = 44 }
dequeue: 0051
dequeue: 0053
slot 0052 in 0050 <- Add : 8 = AddOpCodeData { Left = 53, Right = 55 }
dequeue: 0061
slot 0059 in 0002 <- Call : 5 = CallCodeData { Target = 60, Args = System.Int32[], DotnetMethod =  }
dequeue: 0073
add type 11 = DotnetMemberTypeData { TargetType = 8, MemberName = ToString, MemberType = Method, Members = System.Reflection.MemberInfo[] }
slot 0072 in 0071 <- Member : 11 = MemberCodeData { Target = 73, Member = 74 }
slot 0074 in 0072 <- Identifier : 11 = IdentifierCodeData { Name = ToString, Target = 0 }
dequeue: 0052
slot 0050 assign: type <- DotnetTypeData { Type = System.Int32 } 8 via 0052
slot 0050 in 0002 <- Assign : 8 = AssignCodeData { Target = 51, Value = 52 }
dequeue: 0059
dequeue: 0072
slot 0071 in 0069 <- Call = CallCodeData { Target = 72, Args = System.Int32[], DotnetMethod = System.String ToString(System.String) }
slot 0071 in 0069 <- Call : 5 = CallCodeData { Target = 72, Args = System.Int32[], DotnetMethod = System.String ToString(System.String) }
dequeue: 0074
dequeue: 0050
dequeue: 0071
slot 0069 in 0002 <- Call : 5 = CallCodeData { Target = 70, Args = System.Int32[], DotnetMethod =  }
dequeue: 0069
done after 71 iterations
=== Tree ===
0001: file (unknown)
0002:   braces (unknown)
0003:     static func2 (function -> dotnet -> System.Int32)
            value
0004:         braces (function -> dotnet -> System.Int32)
0005:           static cond (dotnet -> System.Boolean)
                  type
0006:               intrinsic: name = bool (typeof -> dotnet -> System.Boolean)
                  value
0007:               parameter (parameter)
0008:           if (function -> dotnet -> System.Int32)
0010:             boolean=False (dotnet -> System.Boolean)
0011:             braces (function -> dotnet -> System.Int32)
0012:               return (dotnet -> System.Int32) -> 0011
0014:                 integer=0 (dotnet -> System.Int32)
0015:           if (function -> dotnet -> System.Int32)
0018:             not (dotnet -> System.Boolean)
0017:               id: name = cond (dotnet -> System.Boolean) -> 0005
0019:             braces (function -> dotnet -> System.Int32)
0020:               return (dotnet -> System.Int32) -> 0019
0022:                 integer=100 (dotnet -> System.Int32)
0023:           return (dotnet -> System.Int32) -> 0004
0025:             integer=9999 (dotnet -> System.Int32)
0026:     static func1 (function -> dotnet -> System.Int32)
            value
0027:         braces (function -> dotnet -> System.Int32)
0028:           declare a (dotnet -> System.Int32)
                  value
0029:               integer=2 (dotnet -> System.Int32)
0030:           declare b (dotnet -> System.Int32)
                  value
0031:               add (dotnet -> System.Int32)
0032:                 id: name = a (dotnet -> System.Int32) -> 0028
0033:                 call (dotnet -> System.Int32)
0034:                   id: name = func2 (function -> dotnet -> System.Int32) -> 0003
0035:                   boolean=False (dotnet -> System.Boolean)
0036:           return (dotnet -> System.Int32) -> 0027
0038:             id: name = b (dotnet -> System.Int32) -> 0030
0039:     declare a (dotnet -> System.Int32)
            value
0040:         integer=13 (dotnet -> System.Int32)
0041:     assign (dotnet -> System.Int32)
0042:       id: name = a (dotnet -> System.Int32) -> 0039
0043:       integer=39 (dotnet -> System.Int32)
0044:     declare b (dotnet -> System.Int32)
            value
0045:         add (dotnet -> System.Int32)
0046:           add (dotnet -> System.Int32)
0047:             id: name = a (dotnet -> System.Int32) -> 0039
0048:             call (dotnet -> System.Int32)
0081:               id: name = func1 (function -> dotnet -> System.Int32) -> 0026
0049:           integer=5 (dotnet -> System.Int32)
0050:     assign (dotnet -> System.Int32)
0051:       id: name = b (dotnet -> System.Int32) -> 0044
0052:       add (dotnet -> System.Int32)
0053:         id: name = b (dotnet -> System.Int32) -> 0044
0055:         negate (dotnet -> System.Int32)
0054:           integer=1 (dotnet -> System.Int32)
0056:     call (dotnet -> System.String)
0057:       intrinsic: name = print (function -> dotnet -> System.String)
0058:       id: name = a (dotnet -> System.Int32) -> 0039
0059:     call (dotnet -> System.String)
0060:       intrinsic: name = print (function -> dotnet -> System.String)
0061:       id: name = b (dotnet -> System.Int32) -> 0044
0062:     static format (dotnet -> System.String)
            value
0063:         string="C" (dotnet -> System.String)
0064:     call (dotnet -> System.String)
0065:       intrinsic: name = print (function -> dotnet -> System.String)
0066:       member (Length : property : dotnet -> System.String)
0067:         id: name = format (dotnet -> System.String) -> 0062
0068:         id: name = Length (Length : property : dotnet -> System.String)
0069:     call (dotnet -> System.String)
0070:       intrinsic: name = print (function -> dotnet -> System.String)
0071:       call-dotnet { System.String ToString(System.String) } (dotnet -> System.String)
0072:         member (ToString : method : dotnet -> System.Int32)
0073:           id: name = b (dotnet -> System.Int32) -> 0044
0074:           id: name = ToString (ToString : method : dotnet -> System.Int32)
0075:         id: name = format (dotnet -> System.String) -> 0062
0076:     return (void) -> 0002
0080:       void (void)
0077:     call (dotnet -> System.String)
0078:       intrinsic: name = print (function -> dotnet -> System.String)
0079:       string="unreachable" (dotnet -> System.String)

Analyze Types:
0000 :: unknown
0001 :: void
0002 :: function -> void
0003 :: dotnet -> System.Boolean
0004 :: typeof -> dotnet -> System.Boolean
0005 :: dotnet -> System.String
0006 :: function -> dotnet -> System.String
0007 :: parameter
0008 :: dotnet -> System.Int32
0009 :: function -> dotnet -> System.Int32
0010 :: Length : property : dotnet -> System.String
0011 :: ToString : method : dotnet -> System.Int32

Output:
39
145
1
$145.00

Stats:
-   Start: 0.0s
-    Read: 0.0s
-     Lex: 0.0s
-   Parse: 0.0s
- Analyze: 0.0s
-    Eval: 0.0s
-   Print: 0.0s
-  Output: 0.0s

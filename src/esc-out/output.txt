
Lex:
0000: 0 + 5 -- (1, 1) -- Identifier -- func2
0001: 5 + 1 -- (1, 6) -- Spaces -- " "
0002: 6 + 1 -- (1, 7) -- Colon -- :
0003: 7 + 1 -- (1, 8) -- Equals -- =
0004: 8 + 1 -- (1, 9) -- Spaces -- " "
0005: 9 + 1 -- (1, 10) -- BraceOpen -- {
0006: 10 + 1 -- (1, 11) -- EndOfLine -- \n
0007: 11 + 4 -- (2, 1) -- Spaces -- "    "
0008: 15 + 6 -- (2, 5) -- Identifier -- return
0009: 21 + 1 -- (2, 11) -- Spaces -- " "
0010: 22 + 3 -- (2, 12) -- Number -- 100
0011: 25 + 1 -- (2, 15) -- EndOfLine -- \n
0012: 26 + 1 -- (3, 1) -- BraceClose -- }
0013: 27 + 1 -- (3, 2) -- EndOfLine -- \n
0014: 28 + 4 -- (4, 1) -- Identifier -- func
0015: 32 + 1 -- (4, 5) -- Spaces -- " "
0016: 33 + 1 -- (4, 6) -- Colon -- :
0017: 34 + 1 -- (4, 7) -- Equals -- =
0018: 35 + 1 -- (4, 8) -- Spaces -- " "
0019: 36 + 1 -- (4, 9) -- BraceOpen -- {
0020: 37 + 1 -- (4, 10) -- EndOfLine -- \n
0021: 38 + 4 -- (5, 1) -- Spaces -- "    "
0022: 42 + 1 -- (5, 5) -- Identifier -- a
0023: 43 + 1 -- (5, 6) -- Spaces -- " "
0024: 44 + 1 -- (5, 7) -- Colon -- :
0025: 45 + 1 -- (5, 8) -- Equals -- =
0026: 46 + 1 -- (5, 9) -- Spaces -- " "
0027: 47 + 1 -- (5, 10) -- Number -- 2
0028: 48 + 1 -- (5, 11) -- EndOfLine -- \n
0029: 49 + 4 -- (6, 1) -- Spaces -- "    "
0030: 53 + 1 -- (6, 5) -- Identifier -- b
0031: 54 + 1 -- (6, 6) -- Spaces -- " "
0032: 55 + 1 -- (6, 7) -- Colon -- :
0033: 56 + 1 -- (6, 8) -- Equals -- =
0034: 57 + 1 -- (6, 9) -- Spaces -- " "
0035: 58 + 1 -- (6, 10) -- Identifier -- a
0036: 59 + 1 -- (6, 11) -- Spaces -- " "
0037: 60 + 1 -- (6, 12) -- Plus -- +
0038: 61 + 1 -- (6, 13) -- Spaces -- " "
0039: 62 + 5 -- (6, 14) -- Identifier -- func2
0040: 67 + 1 -- (6, 19) -- EndOfLine -- \n
0041: 68 + 4 -- (7, 1) -- Spaces -- "    "
0042: 72 + 6 -- (7, 5) -- Identifier -- return
0043: 78 + 1 -- (7, 11) -- Spaces -- " "
0044: 79 + 1 -- (7, 12) -- Identifier -- b
0045: 80 + 1 -- (7, 13) -- EndOfLine -- \n
0046: 81 + 1 -- (8, 1) -- BraceClose -- }
0047: 82 + 1 -- (8, 2) -- EndOfLine -- \n
0048: 83 + 1 -- (9, 1) -- Identifier -- a
0049: 84 + 1 -- (9, 2) -- Spaces -- " "
0050: 85 + 1 -- (9, 3) -- Colon -- :
0051: 86 + 1 -- (9, 4) -- Equals -- =
0052: 87 + 1 -- (9, 5) -- Spaces -- " "
0053: 88 + 2 -- (9, 6) -- Number -- 13
0054: 90 + 1 -- (9, 8) -- EndOfLine -- \n
0055: 91 + 1 -- (10, 1) -- Identifier -- a
0056: 92 + 1 -- (10, 2) -- Spaces -- " "
0057: 93 + 1 -- (10, 3) -- Equals -- =
0058: 94 + 1 -- (10, 4) -- Spaces -- " "
0059: 95 + 2 -- (10, 5) -- Number -- 39
0060: 97 + 1 -- (10, 7) -- EndOfLine -- \n
0061: 98 + 1 -- (11, 1) -- Identifier -- b
0062: 99 + 1 -- (11, 2) -- Spaces -- " "
0063: 100 + 1 -- (11, 3) -- Colon -- :
0064: 101 + 1 -- (11, 4) -- Equals -- =
0065: 102 + 1 -- (11, 5) -- Spaces -- " "
0066: 103 + 1 -- (11, 6) -- Identifier -- a
0067: 104 + 1 -- (11, 7) -- Spaces -- " "
0068: 105 + 1 -- (11, 8) -- Plus -- +
0069: 106 + 1 -- (11, 9) -- Spaces -- " "
0070: 107 + 4 -- (11, 10) -- Identifier -- func
0071: 111 + 1 -- (11, 14) -- Spaces -- " "
0072: 112 + 1 -- (11, 15) -- Plus -- +
0073: 113 + 1 -- (11, 16) -- Spaces -- " "
0074: 114 + 1 -- (11, 17) -- Number -- 5
0075: 115 + 1 -- (11, 18) -- EndOfLine -- \n
0076: 116 + 5 -- (12, 1) -- Identifier -- print
0077: 121 + 1 -- (12, 6) -- Spaces -- " "
0078: 122 + 1 -- (12, 7) -- Identifier -- a
0079: 123 + 1 -- (12, 8) -- EndOfLine -- \n
0080: 124 + 5 -- (13, 1) -- Identifier -- print
0081: 129 + 1 -- (13, 6) -- Spaces -- " "
0082: 130 + 1 -- (13, 7) -- Identifier -- b
0083: 131 + 1 -- (13, 8) -- EndOfLine -- \n
0084: 132 + 5 -- (14, 1) -- Identifier -- print
0085: 137 + 1 -- (14, 6) -- Spaces -- " "
0086: 138 + 1 -- (14, 7) -- ParenOpen -- (
0087: 139 + 1 -- (14, 8) -- Identifier -- b
0088: 140 + 1 -- (14, 9) -- Period -- .
0089: 141 + 8 -- (14, 10) -- Identifier -- ToString
0090: 149 + 1 -- (14, 18) -- Spaces -- " "
0091: 150 + 3 -- (14, 19) -- LiteralString -- "C"
0092: 153 + 1 -- (14, 22) -- ParenClose -- )
0093: 154 + 1 -- (14, 23) -- Spaces -- " "
0094: 155 + 13 -- (14, 24) -- Comment -- // C=currency
0095: 168 + 1 -- (14, 37) -- EndOfLine -- \n
0096: 169 + 0 -- (15, 1) -- EndOfFile -- <EOF>

Parse:
line
  declare-assign
    id
      identifier: func2
    value
      braces
        line
          call
            target
              identifier: return
            arguments
              100
line
  declare-assign
    id
      identifier: func
    value
      braces
        line
          declare-assign
            id
              identifier: a
            value
              2
        line
          declare-assign
            id
              identifier: b
            value
              plus
                identifier: a
                identifier: func2
        line
          call
            target
              identifier: return
            arguments
              identifier: b
line
  declare-assign
    id
      identifier: a
    value
      13
line
  assign
    identifier: a
    39
line
  declare-assign
    id
      identifier: b
    value
      plus
        plus
          identifier: a
          identifier: func
        5
line
  call
    target
      identifier: print
    arguments
      identifier: a
line
  call
    target
      identifier: print
    arguments
      identifier: b
line
  call
    target
      identifier: print
    arguments
      call
        target
          member
            identifier: b
            identifier: ToString
        arguments
          "C"

Analyze:
main procedure
    scope
    declare: func2 = (FunctionScopeExpression)
      func scope
        scope
          return: IntLiteralExpression { Type = System.Int32, Value = 100 } (IntLiteralExpression)
    declare: func = (FunctionScopeExpression)
      func scope
        scope
          declare: a = (IntLiteralExpression)
            int: 2
          declare: b = (AddExpression)
            add
              identifier: a (System.Int32)
              identifier: func2 (System.Int32)
          return: IdentifierExpression { Type = System.Int32, Identifier = b } (IdentifierExpression)
    declare: a = (IntLiteralExpression)
      int: 13
    expression
      assign
        identifier: a (System.Int32)
        int: 39
    declare: b = (AddExpression)
      add
        add
          identifier: a (System.Int32)
          identifier: func (System.Int32)
        int: 5
    print:
      identifier: a (System.Int32)
    print:
      identifier: b (System.Int32)
    print:
      call
        method info: System.String ToString(System.String)
        type: System.String
        return type: System.String
        target:
          identifier: b (System.Int32)
        args: 1
          string: C

Output:
39
146
$146.00

Stats:
-    Read: 0.00s
-     Lex: 0.00s
-   Parse: 0.00s
- Analyze: 0.00s
-    Eval: 0.00s
-   Print: 0.00s

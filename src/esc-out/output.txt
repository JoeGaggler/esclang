
Lex:
0000: 0 + 5 -- (1, 1) -- Identifier -- func1
0001: 5 + 1 -- (1, 6) -- Spaces -- " "
0002: 6 + 1 -- (1, 7) -- Colon -- :
0003: 7 + 1 -- (1, 8) -- Colon -- :
0004: 8 + 1 -- (1, 9) -- Spaces -- " "
0005: 9 + 1 -- (1, 10) -- BraceOpen -- {
0006: 10 + 1 -- (1, 11) -- EndOfLine -- \n
0007: 11 + 4 -- (2, 1) -- Spaces -- "    "
0008: 15 + 1 -- (2, 5) -- Identifier -- a
0009: 16 + 1 -- (2, 6) -- Spaces -- " "
0010: 17 + 1 -- (2, 7) -- Colon -- :
0011: 18 + 1 -- (2, 8) -- Equals -- =
0012: 19 + 1 -- (2, 9) -- Spaces -- " "
0013: 20 + 1 -- (2, 10) -- Number -- 2
0014: 21 + 1 -- (2, 11) -- EndOfLine -- \n
0015: 22 + 4 -- (3, 1) -- Spaces -- "    "
0016: 26 + 6 -- (3, 5) -- Identifier -- return
0017: 32 + 1 -- (3, 11) -- Spaces -- " "
0018: 33 + 1 -- (3, 12) -- Identifier -- a
0019: 34 + 1 -- (3, 13) -- EndOfLine -- \n
0020: 35 + 1 -- (4, 1) -- BraceClose -- }
0021: 36 + 1 -- (4, 2) -- EndOfLine -- \n
0022: 37 + 1 -- (5, 1) -- Identifier -- a
0023: 38 + 1 -- (5, 2) -- Spaces -- " "
0024: 39 + 1 -- (5, 3) -- Colon -- :
0025: 40 + 1 -- (5, 4) -- Equals -- =
0026: 41 + 1 -- (5, 5) -- Spaces -- " "
0027: 42 + 2 -- (5, 6) -- Number -- 13
0028: 44 + 1 -- (5, 8) -- EndOfLine -- \n
0029: 45 + 1 -- (6, 1) -- Identifier -- b
0030: 46 + 1 -- (6, 2) -- Spaces -- " "
0031: 47 + 1 -- (6, 3) -- Colon -- :
0032: 48 + 1 -- (6, 4) -- Equals -- =
0033: 49 + 1 -- (6, 5) -- Spaces -- " "
0034: 50 + 1 -- (6, 6) -- Number -- 1
0035: 51 + 1 -- (6, 7) -- Spaces -- " "
0036: 52 + 1 -- (6, 8) -- Plus -- +
0037: 53 + 1 -- (6, 9) -- Spaces -- " "
0038: 54 + 1 -- (6, 10) -- Number -- 2
0039: 55 + 1 -- (6, 11) -- EndOfLine -- \n
0040: 56 + 1 -- (7, 1) -- Identifier -- c
0041: 57 + 1 -- (7, 2) -- Spaces -- " "
0042: 58 + 1 -- (7, 3) -- Colon -- :
0043: 59 + 1 -- (7, 4) -- Equals -- =
0044: 60 + 1 -- (7, 5) -- Spaces -- " "
0045: 61 + 1 -- (7, 6) -- Identifier -- a
0046: 62 + 1 -- (7, 7) -- Spaces -- " "
0047: 63 + 1 -- (7, 8) -- Plus -- +
0048: 64 + 1 -- (7, 9) -- Spaces -- " "
0049: 65 + 5 -- (7, 10) -- Identifier -- func1
0050: 70 + 1 -- (7, 15) -- Spaces -- " "
0051: 71 + 1 -- (7, 16) -- Plus -- +
0052: 72 + 1 -- (7, 17) -- Spaces -- " "
0053: 73 + 1 -- (7, 18) -- Identifier -- b
0054: 74 + 1 -- (7, 19) -- EndOfLine -- \n
0055: 75 + 5 -- (8, 1) -- Identifier -- print
0056: 80 + 1 -- (8, 6) -- Spaces -- " "
0057: 81 + 1 -- (8, 7) -- Identifier -- a
0058: 82 + 1 -- (8, 8) -- EndOfLine -- \n
0059: 83 + 5 -- (9, 1) -- Identifier -- print
0060: 88 + 1 -- (9, 6) -- Spaces -- " "
0061: 89 + 1 -- (9, 7) -- Identifier -- c
0062: 90 + 1 -- (9, 8) -- EndOfLine -- \n
0063: 91 + 0 -- (10, 1) -- EndOfFile -- <EOF>

Parse:
declare-static
  id
    identifier: func1
  value
    braces
      declare-assign
        id
          identifier: a
        value
          2
      call
        target
          identifier: return
        arguments
          identifier: a
declare-assign
  id
    identifier: a
  value
    13
declare-assign
  id
    identifier: b
  value
    plus
      1
      2
declare-assign
  id
    identifier: c
  value
    plus
      plus
        identifier: a
        identifier: func1
      identifier: b
call
  target
    identifier: print
  arguments
    identifier: a
call
  target
    identifier: print
  arguments
    identifier: c

Analysis Log:
=== Build: init ===
slot 0001 in 0000 :: File = FileSlotData { Main = 0 }
slot 0002 in 0001 :: Braces = BracesSlotData { Lines = System.Int32[] }
slot 0001 in 0000 <- File = FileSlotData { Main = 2 }
slot 0003 in 0002 :: Declare = DeclareSlotData { Name = func1, IsStatic = True, Type = 0, Value = 0 }
slot 0002 in 0001 -> Braces = BracesSlotData { Lines = System.Int32[] }
slot 0004 in 0003 :: Braces = BracesSlotData { Lines = System.Int32[] }
slot 0005 in 0004 :: Declare = DeclareSlotData { Name = a, IsStatic = False, Type = 0, Value = 0 }
slot 0004 in 0003 -> Braces = BracesSlotData { Lines = System.Int32[] }
slot 0006 in 0005 :: Integer = IntegerSlotData { Value = 2 }
slot 0005 in 0004 <- Declare = DeclareSlotData { Name = a, IsStatic = False, Type = 0, Value = 6 }
slot 0007 in 0004 :: Call = CallSlotData { Target = 0, Args = System.Int32[] }
slot 0008 in 0007 :: Identifier = IdentifierSlotData { Name = return, Target = 0 }
slot 0007 in 0004 <- Call = CallSlotData { Target = 8, Args = System.Int32[] }
slot 0009 in 0007 :: Identifier = IdentifierSlotData { Name = a, Target = 0 }
slot 0007 in 0004 <- Call = CallSlotData { Target = 8, Args = System.Int32[] }
slot 0004 in 0003 <- Braces = BracesSlotData { Lines = System.Int32[] }
slot 0003 in 0002 <- Declare = DeclareSlotData { Name = func1, IsStatic = True, Type = 0, Value = 4 }
slot 0010 in 0002 :: Declare = DeclareSlotData { Name = a, IsStatic = False, Type = 0, Value = 0 }
slot 0002 in 0001 -> Braces = BracesSlotData { Lines = System.Int32[] }
slot 0011 in 0010 :: Integer = IntegerSlotData { Value = 13 }
slot 0010 in 0002 <- Declare = DeclareSlotData { Name = a, IsStatic = False, Type = 0, Value = 11 }
slot 0012 in 0002 :: Declare = DeclareSlotData { Name = b, IsStatic = False, Type = 0, Value = 0 }
slot 0002 in 0001 -> Braces = BracesSlotData { Lines = System.Int32[] }
slot 0013 in 0012 :: Add = AddOpSlotData { Left = 0, Right = 0 }
slot 0014 in 0013 :: Integer = IntegerSlotData { Value = 1 }
slot 0015 in 0013 :: Integer = IntegerSlotData { Value = 2 }
slot 0013 in 0012 <- Add = AddOpSlotData { Left = 14, Right = 15 }
slot 0012 in 0002 <- Declare = DeclareSlotData { Name = b, IsStatic = False, Type = 0, Value = 13 }
slot 0016 in 0002 :: Declare = DeclareSlotData { Name = c, IsStatic = False, Type = 0, Value = 0 }
slot 0002 in 0001 -> Braces = BracesSlotData { Lines = System.Int32[] }
slot 0017 in 0016 :: Add = AddOpSlotData { Left = 0, Right = 0 }
slot 0018 in 0017 :: Add = AddOpSlotData { Left = 0, Right = 0 }
slot 0019 in 0018 :: Identifier = IdentifierSlotData { Name = a, Target = 0 }
slot 0020 in 0018 :: Identifier = IdentifierSlotData { Name = func1, Target = 0 }
slot 0018 in 0017 <- Add = AddOpSlotData { Left = 19, Right = 20 }
slot 0021 in 0017 :: Identifier = IdentifierSlotData { Name = b, Target = 0 }
slot 0017 in 0016 <- Add = AddOpSlotData { Left = 18, Right = 21 }
slot 0016 in 0002 <- Declare = DeclareSlotData { Name = c, IsStatic = False, Type = 0, Value = 17 }
slot 0022 in 0002 :: Call = CallSlotData { Target = 0, Args = System.Int32[] }
slot 0023 in 0022 :: Identifier = IdentifierSlotData { Name = print, Target = 0 }
slot 0022 in 0002 <- Call = CallSlotData { Target = 23, Args = System.Int32[] }
slot 0024 in 0022 :: Identifier = IdentifierSlotData { Name = a, Target = 0 }
slot 0022 in 0002 <- Call = CallSlotData { Target = 23, Args = System.Int32[] }
slot 0025 in 0002 :: Call = CallSlotData { Target = 0, Args = System.Int32[] }
slot 0026 in 0025 :: Identifier = IdentifierSlotData { Name = print, Target = 0 }
slot 0025 in 0002 <- Call = CallSlotData { Target = 26, Args = System.Int32[] }
slot 0027 in 0025 :: Identifier = IdentifierSlotData { Name = c, Target = 0 }
slot 0025 in 0002 <- Call = CallSlotData { Target = 26, Args = System.Int32[] }
slot 0002 in 0001 <- Braces = BracesSlotData { Lines = System.Int32[] }
=== Build: return ===
add type 3 = FunctionTypeSlot { ReturnType = 1 }
slot 0002 in 0001 <- Braces : 3 = BracesSlotData { Lines = System.Int32[] }
slot 0004 in 0003 <- Braces : 3 = BracesSlotData { Lines = System.Int32[] }
slot 0008 in 0007 -> Identifier = IdentifierSlotData { Name = return, Target = 0 }
slot 0007 in 0004 << Return = ReturnSlotData { Value = 9, Function = 0 }
slot 0008 in 0007 << Unknown = InvalidSlotData { }
slot 0007 in 0004 -- call -> return
slot 0023 in 0022 -> Identifier = IdentifierSlotData { Name = print, Target = 0 }
slot 0026 in 0025 -> Identifier = IdentifierSlotData { Name = print, Target = 0 }
slot 0007 <- returns to 0004
slot 0007 in 0004 <- Return = ReturnSlotData { Value = 9, Function = 4 }
slot 0004 in 0003 <- Braces : 0 = BracesSlotData { Lines = System.Int32[] }
=== Build: resolve identifiers ===
identifier: 0009 = IdentifierSlotData { Name = a, Target = 0 }
  0007 = Return
    0004 FOUND: BracesSlotData { Lines = System.Int32[] }
slot 0009 in 0007 <- Identifier = IdentifierSlotData { Name = a, Target = 5 }
identifier: 0019 = IdentifierSlotData { Name = a, Target = 0 }
  0018 = Add
    0017 = Add
      0016 = Declare
        0002 FOUND: BracesSlotData { Lines = System.Int32[] }
slot 0019 in 0018 <- Identifier = IdentifierSlotData { Name = a, Target = 10 }
identifier: 0020 = IdentifierSlotData { Name = func1, Target = 0 }
  0018 = Add
    0017 = Add
      0016 = Declare
        0002 FOUND: BracesSlotData { Lines = System.Int32[] }
slot 0020 in 0018 <- Identifier = IdentifierSlotData { Name = func1, Target = 3 }
identifier: 0021 = IdentifierSlotData { Name = b, Target = 0 }
  0017 = Add
    0016 = Declare
      0002 FOUND: BracesSlotData { Lines = System.Int32[] }
slot 0021 in 0017 <- Identifier = IdentifierSlotData { Name = b, Target = 12 }
identifier: 0023 = IdentifierSlotData { Name = print, Target = 0 }
  0022 = Call
      0001 = File
slot 0023 in 0022 << Intrinsic = IntrinsicSlotData { Name = print }
add type 4 = NativeTypeSlot { Name = string }
add type 5 = FunctionTypeSlot { ReturnType = 4 }
slot 0023 in 0022 <- Intrinsic : 5 = IntrinsicSlotData { Name = print }
identifier: 0024 = IdentifierSlotData { Name = a, Target = 0 }
  0022 = Call
    0002 FOUND: BracesSlotData { Lines = System.Int32[] }
slot 0024 in 0022 <- Identifier = IdentifierSlotData { Name = a, Target = 10 }
identifier: 0026 = IdentifierSlotData { Name = print, Target = 0 }
  0025 = Call
      0001 = File
slot 0026 in 0025 << Intrinsic = IntrinsicSlotData { Name = print }
slot 0026 in 0025 <- Intrinsic : 5 = IntrinsicSlotData { Name = print }
identifier: 0027 = IdentifierSlotData { Name = c, Target = 0 }
  0025 = Call
    0002 FOUND: BracesSlotData { Lines = System.Int32[] }
slot 0027 in 0025 <- Identifier = IdentifierSlotData { Name = c, Target = 16 }
=== Build: types ===
slot 0006 in 0005 <- Integer : 2 = IntegerSlotData { Value = 2 }
enqueue 0006
slot 0011 in 0010 <- Integer : 2 = IntegerSlotData { Value = 13 }
enqueue 0011
slot 0014 in 0013 <- Integer : 2 = IntegerSlotData { Value = 1 }
enqueue 0014
slot 0015 in 0013 <- Integer : 2 = IntegerSlotData { Value = 2 }
enqueue 0015
dequeue: 0006
add target: 5
slot 0005 in 0004 <- Declare : 2 = DeclareSlotData { Name = a, IsStatic = False, Type = 0, Value = 6 }
slot 0013 in 0012 <- Add : 2 = AddOpSlotData { Left = 14, Right = 15 }
dequeue: 0011
add target: 10
slot 0010 in 0002 <- Declare : 2 = DeclareSlotData { Name = a, IsStatic = False, Type = 0, Value = 11 }
dequeue: 0014
dequeue: 0015
dequeue: 0005
id target: 9
slot 0009 in 0007 <- Identifier : 2 = IdentifierSlotData { Name = a, Target = 5 }
dequeue: 0013
add target: 12
slot 0012 in 0002 <- Declare : 2 = DeclareSlotData { Name = b, IsStatic = False, Type = 0, Value = 13 }
dequeue: 0010
id target: 19
slot 0019 in 0018 <- Identifier : 2 = IdentifierSlotData { Name = a, Target = 10 }
id target: 24
slot 0024 in 0022 <- Identifier : 2 = IdentifierSlotData { Name = a, Target = 10 }
dequeue: 0009
slot 0007 return: type <- NativeTypeSlot { Name = int } 2 via 0009
slot 0007 in 0004 <- Return : 2 = ReturnSlotData { Value = 9, Function = 4 }
dequeue: 0012
id target: 21
slot 0021 in 0017 <- Identifier : 2 = IdentifierSlotData { Name = b, Target = 12 }
dequeue: 0019
dequeue: 0024
slot 0022 in 0002 <- Call : 4 = CallSlotData { Target = 23, Args = System.Int32[] }
dequeue: 0007
add type 6 = FunctionTypeSlot { ReturnType = 2 }
slot 0004 braces: found return 0007 6
slot 0004 in 0003 <- Braces : 6 = BracesSlotData { Lines = System.Int32[] }
dequeue: 0021
dequeue: 0022
dequeue: 0004
add target: 3
slot 0003 in 0002 <- Declare : 6 = DeclareSlotData { Name = func1, IsStatic = True, Type = 0, Value = 4 }
dequeue: 0003
id target: 20
slot 0028 in 0020 :: Identifier = IdentifierSlotData { Name = func1, Target = 3 }
slot 0028 in 0020 <- Identifier : 6 = IdentifierSlotData { Name = func1, Target = 3 }
slot 0020 in 0018 << Call = CallSlotData { Target = 28, Args = System.Int32[] }
id target: 28
slot 0028 in 0020 <- Identifier : 6 = IdentifierSlotData { Name = func1, Target = 3 }
dequeue: 0028
slot 0020 in 0018 <- Call : 2 = CallSlotData { Target = 28, Args = System.Int32[] }
dequeue: 0020
slot 0018 in 0017 <- Add : 2 = AddOpSlotData { Left = 19, Right = 20 }
dequeue: 0028
slot 0017 in 0016 <- Add : 2 = AddOpSlotData { Left = 18, Right = 21 }
dequeue: 0020
dequeue: 0018
dequeue: 0017
add target: 16
slot 0016 in 0002 <- Declare : 2 = DeclareSlotData { Name = c, IsStatic = False, Type = 0, Value = 17 }
dequeue: 0016
id target: 27
slot 0027 in 0025 <- Identifier : 2 = IdentifierSlotData { Name = c, Target = 16 }
dequeue: 0027
slot 0025 in 0002 <- Call : 4 = CallSlotData { Target = 26, Args = System.Int32[] }
dequeue: 0025
done after 25 iterations
=== Tree ===
0001: file (unknown)
0002:   braces (function -> void)
0003:     static func1 (function -> int)
            value
0004:         braces (function -> int)
0005:           declare a (int)
                  value
0006:               integer=2 (int)
0007:           return (int)
0009:             id: name = a (int) -> 0005
0010:     declare a (int)
            value
0011:         integer=13 (int)
0012:     declare b (int)
            value
0013:         add (int)
0014:           integer=1 (int)
0015:           integer=2 (int)
0016:     declare c (int)
            value
0017:         add (int)
0018:           add (int)
0019:             id: name = a (int) -> 0010
0020:             call (int)
0028:               id: name = func1 (function -> int) -> 0003
0021:           id: name = b (int) -> 0012
0022:     call (string)
0023:       intrinsic: name = print (function -> string)
0024:       id: name = a (int) -> 0010
0025:     call (string)
0026:       intrinsic: name = print (function -> string)
0027:       id: name = c (int) -> 0016

Analyze:
main procedure
  scope

Output:

Stats:
-   Start: 0.0s
-    Read: 0.0s
-     Lex: 0.0s
-   Parse: 0.0s
- Analyze: 0.0s
-    Eval: 0.0s
-   Print: 0.0s
-  Output: 0.0s


Lex:
0000: 0 + 5 -- (1, 1) -- Identifier -- func2
0001: 5 + 1 -- (1, 6) -- Spaces -- " "
0002: 6 + 1 -- (1, 7) -- Colon -- :
0003: 7 + 1 -- (1, 8) -- Equals -- =
0004: 8 + 1 -- (1, 9) -- Spaces -- " "
0005: 9 + 1 -- (1, 10) -- BraceOpen -- {
0006: 10 + 1 -- (1, 11) -- EndOfLine -- \n
0007: 11 + 4 -- (2, 1) -- Spaces -- "    "
0008: 15 + 4 -- (2, 5) -- Identifier -- cond
0009: 19 + 1 -- (2, 9) -- Spaces -- " "
0010: 20 + 1 -- (2, 10) -- Colon -- :
0011: 21 + 1 -- (2, 11) -- Spaces -- " "
0012: 22 + 4 -- (2, 12) -- Identifier -- bool
0013: 26 + 1 -- (2, 16) -- Spaces -- " "
0014: 27 + 1 -- (2, 17) -- Colon -- :
0015: 28 + 1 -- (2, 18) -- Spaces -- " "
0016: 29 + 1 -- (2, 19) -- LessThan -- <
0017: 30 + 1 -- (2, 20) -- GreaterThan -- >
0018: 31 + 1 -- (2, 21) -- EndOfLine -- \n
0019: 32 + 4 -- (3, 1) -- Spaces -- "    "
0020: 36 + 2 -- (3, 5) -- Identifier -- if
0021: 38 + 1 -- (3, 7) -- Spaces -- " "
0022: 39 + 5 -- (3, 8) -- Identifier -- false
0023: 44 + 1 -- (3, 13) -- Spaces -- " "
0024: 45 + 1 -- (3, 14) -- BraceOpen -- {
0025: 46 + 1 -- (3, 15) -- EndOfLine -- \n
0026: 47 + 8 -- (4, 1) -- Spaces -- "        "
0027: 55 + 6 -- (4, 9) -- Identifier -- return
0028: 61 + 1 -- (4, 15) -- Spaces -- " "
0029: 62 + 1 -- (4, 16) -- Number -- 0
0030: 63 + 1 -- (4, 17) -- EndOfLine -- \n
0031: 64 + 4 -- (5, 1) -- Spaces -- "    "
0032: 68 + 1 -- (5, 5) -- BraceClose -- }
0033: 69 + 1 -- (5, 6) -- EndOfLine -- \n
0034: 70 + 4 -- (6, 1) -- Spaces -- "    "
0035: 74 + 2 -- (6, 5) -- Identifier -- if
0036: 76 + 1 -- (6, 7) -- Spaces -- " "
0037: 77 + 4 -- (6, 8) -- Identifier -- cond
0038: 81 + 1 -- (6, 12) -- Spaces -- " "
0039: 82 + 1 -- (6, 13) -- BraceOpen -- {
0040: 83 + 1 -- (6, 14) -- EndOfLine -- \n
0041: 84 + 8 -- (7, 1) -- Spaces -- "        "
0042: 92 + 6 -- (7, 9) -- Identifier -- return
0043: 98 + 1 -- (7, 15) -- Spaces -- " "
0044: 99 + 3 -- (7, 16) -- Number -- 100
0045: 102 + 1 -- (7, 19) -- EndOfLine -- \n
0046: 103 + 4 -- (8, 1) -- Spaces -- "    "
0047: 107 + 1 -- (8, 5) -- BraceClose -- }
0048: 108 + 1 -- (8, 6) -- EndOfLine -- \n
0049: 109 + 4 -- (9, 1) -- Spaces -- "    "
0050: 113 + 6 -- (9, 5) -- Identifier -- return
0051: 119 + 1 -- (9, 11) -- Spaces -- " "
0052: 120 + 4 -- (9, 12) -- Number -- 9999
0053: 124 + 1 -- (9, 16) -- Spaces -- " "
0054: 125 + 14 -- (9, 17) -- Comment -- // unreachable
0055: 139 + 1 -- (9, 31) -- EndOfLine -- \n
0056: 140 + 1 -- (10, 1) -- BraceClose -- }
0057: 141 + 1 -- (10, 2) -- EndOfLine -- \n
0058: 142 + 5 -- (11, 1) -- Identifier -- func1
0059: 147 + 1 -- (11, 6) -- Spaces -- " "
0060: 148 + 1 -- (11, 7) -- Colon -- :
0061: 149 + 1 -- (11, 8) -- Equals -- =
0062: 150 + 1 -- (11, 9) -- Spaces -- " "
0063: 151 + 1 -- (11, 10) -- BraceOpen -- {
0064: 152 + 1 -- (11, 11) -- EndOfLine -- \n
0065: 153 + 4 -- (12, 1) -- Spaces -- "    "
0066: 157 + 1 -- (12, 5) -- Identifier -- a
0067: 158 + 1 -- (12, 6) -- Spaces -- " "
0068: 159 + 1 -- (12, 7) -- Colon -- :
0069: 160 + 1 -- (12, 8) -- Equals -- =
0070: 161 + 1 -- (12, 9) -- Spaces -- " "
0071: 162 + 1 -- (12, 10) -- Number -- 2
0072: 163 + 1 -- (12, 11) -- EndOfLine -- \n
0073: 164 + 4 -- (13, 1) -- Spaces -- "    "
0074: 168 + 1 -- (13, 5) -- Identifier -- b
0075: 169 + 1 -- (13, 6) -- Spaces -- " "
0076: 170 + 1 -- (13, 7) -- Colon -- :
0077: 171 + 1 -- (13, 8) -- Equals -- =
0078: 172 + 1 -- (13, 9) -- Spaces -- " "
0079: 173 + 1 -- (13, 10) -- Identifier -- a
0080: 174 + 1 -- (13, 11) -- Spaces -- " "
0081: 175 + 1 -- (13, 12) -- Plus -- +
0082: 176 + 1 -- (13, 13) -- Spaces -- " "
0083: 177 + 5 -- (13, 14) -- Identifier -- func2
0084: 182 + 1 -- (13, 19) -- Spaces -- " "
0085: 183 + 4 -- (13, 20) -- Identifier -- true
0086: 187 + 1 -- (13, 24) -- EndOfLine -- \n
0087: 188 + 4 -- (14, 1) -- Spaces -- "    "
0088: 192 + 6 -- (14, 5) -- Identifier -- return
0089: 198 + 1 -- (14, 11) -- Spaces -- " "
0090: 199 + 1 -- (14, 12) -- Identifier -- b
0091: 200 + 1 -- (14, 13) -- EndOfLine -- \n
0092: 201 + 1 -- (15, 1) -- BraceClose -- }
0093: 202 + 1 -- (15, 2) -- EndOfLine -- \n
0094: 203 + 1 -- (16, 1) -- Identifier -- a
0095: 204 + 1 -- (16, 2) -- Spaces -- " "
0096: 205 + 1 -- (16, 3) -- Colon -- :
0097: 206 + 1 -- (16, 4) -- Equals -- =
0098: 207 + 1 -- (16, 5) -- Spaces -- " "
0099: 208 + 2 -- (16, 6) -- Number -- 13
0100: 210 + 1 -- (16, 8) -- EndOfLine -- \n
0101: 211 + 1 -- (17, 1) -- Identifier -- a
0102: 212 + 1 -- (17, 2) -- Spaces -- " "
0103: 213 + 1 -- (17, 3) -- Equals -- =
0104: 214 + 1 -- (17, 4) -- Spaces -- " "
0105: 215 + 2 -- (17, 5) -- Number -- 39
0106: 217 + 1 -- (17, 7) -- EndOfLine -- \n
0107: 218 + 1 -- (18, 1) -- Identifier -- b
0108: 219 + 1 -- (18, 2) -- Spaces -- " "
0109: 220 + 1 -- (18, 3) -- Colon -- :
0110: 221 + 1 -- (18, 4) -- Equals -- =
0111: 222 + 1 -- (18, 5) -- Spaces -- " "
0112: 223 + 1 -- (18, 6) -- Identifier -- a
0113: 224 + 1 -- (18, 7) -- Spaces -- " "
0114: 225 + 1 -- (18, 8) -- Plus -- +
0115: 226 + 1 -- (18, 9) -- Spaces -- " "
0116: 227 + 5 -- (18, 10) -- Identifier -- func1
0117: 232 + 1 -- (18, 15) -- Spaces -- " "
0118: 233 + 1 -- (18, 16) -- Plus -- +
0119: 234 + 1 -- (18, 17) -- Spaces -- " "
0120: 235 + 1 -- (18, 18) -- Number -- 5
0121: 236 + 1 -- (18, 19) -- EndOfLine -- \n
0122: 237 + 5 -- (19, 1) -- Identifier -- print
0123: 242 + 1 -- (19, 6) -- Spaces -- " "
0124: 243 + 1 -- (19, 7) -- Identifier -- a
0125: 244 + 1 -- (19, 8) -- EndOfLine -- \n
0126: 245 + 5 -- (20, 1) -- Identifier -- print
0127: 250 + 1 -- (20, 6) -- Spaces -- " "
0128: 251 + 1 -- (20, 7) -- Identifier -- b
0129: 252 + 1 -- (20, 8) -- EndOfLine -- \n
0130: 253 + 5 -- (21, 1) -- Identifier -- print
0131: 258 + 1 -- (21, 6) -- Spaces -- " "
0132: 259 + 1 -- (21, 7) -- ParenOpen -- (
0133: 260 + 1 -- (21, 8) -- Identifier -- b
0134: 261 + 1 -- (21, 9) -- Period -- .
0135: 262 + 8 -- (21, 10) -- Identifier -- ToString
0136: 270 + 1 -- (21, 18) -- Spaces -- " "
0137: 271 + 3 -- (21, 19) -- LiteralString -- "C"
0138: 274 + 1 -- (21, 22) -- ParenClose -- )
0139: 275 + 1 -- (21, 23) -- Spaces -- " "
0140: 276 + 13 -- (21, 24) -- Comment -- // C=currency
0141: 289 + 1 -- (21, 37) -- EndOfLine -- \n
0142: 290 + 0 -- (22, 1) -- EndOfFile -- <EOF>

Parse:
line
  declare-assign
    id
      identifier: func2
    value
      braces
        line
          declare-static
            id
              identifier: cond
            type
              identifier: bool
            value
              parameter
        line
          call
            target
              identifier: if
            arguments
              identifier: false
              braces
                line
                  call
                    target
                      identifier: return
                    arguments
                      0
        line
          call
            target
              identifier: if
            arguments
              identifier: cond
              braces
                line
                  call
                    target
                      identifier: return
                    arguments
                      100
        line
          call
            target
              identifier: return
            arguments
              9999
line
  declare-assign
    id
      identifier: func1
    value
      braces
        line
          declare-assign
            id
              identifier: a
            value
              2
        line
          declare-assign
            id
              identifier: b
            value
              plus
                identifier: a
                call
                  target
                    identifier: func2
                  arguments
                    identifier: true
        line
          call
            target
              identifier: return
            arguments
              identifier: b
line
  declare-assign
    id
      identifier: a
    value
      13
line
  assign
    identifier: a
    39
line
  declare-assign
    id
      identifier: b
    value
      plus
        plus
          identifier: a
          identifier: func1
        5
line
  call
    target
      identifier: print
    arguments
      identifier: a
line
  call
    target
      identifier: print
    arguments
      identifier: b
line
  call
    target
      identifier: print
    arguments
      call
        target
          member
            identifier: b
            identifier: ToString
        arguments
          "C"

Analyze:
main procedure
    scope
    declare: func2 = (FunctionExpression)
      func
        scope
          declare: cond = (ParameterExpression)
            parameter: System.Void
          if
            condition
              bool: False
            block
              func
                scope
                  return: IntLiteralExpression { Type = System.Int32, Value = 0 } (IntLiteralExpression)
          if
            condition
              identifier: cond (System.Void)
            block
              func
                scope
                  return: IntLiteralExpression { Type = System.Int32, Value = 100 } (IntLiteralExpression)
          return: IntLiteralExpression { Type = System.Int32, Value = 9999 } (IntLiteralExpression)
    declare: func1 = (FunctionExpression)
      func
        scope
          declare: a = (IntLiteralExpression)
            int: 2
          declare: b = (AddExpression)
            add
              identifier: a (System.Int32)
              call
                identifier: func2 (System.Int32)
                bool: True
          return: IdentifierExpression { Type = System.Int32, Identifier = b } (IdentifierExpression)
    declare: a = (IntLiteralExpression)
      int: 13
    expression
      assign
        identifier: a (System.Int32)
        int: 39
    declare: b = (AddExpression)
      add
        add
          identifier: a (System.Int32)
          identifier: func1 (System.Int32)
        int: 5
    print:
      identifier: a (System.Int32)
    print:
      identifier: b (System.Int32)
    print:
      call
        method info: System.String ToString(System.String)
        type: System.String
        return type: System.String
        target:
          identifier: b (System.Int32)
        args: 1
          string: C

Output:
39
146
$146.00

Stats:
-    Read: 0.00s
-     Lex: 0.00s
-   Parse: 0.00s
- Analyze: 0.00s
-    Eval: 0.00s
-   Print: 0.00s
